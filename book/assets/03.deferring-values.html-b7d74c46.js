import{_ as n,Y as s,Z as a,a3 as e}from"./framework-3d290349.js";const t={},o=e(`<h2 id="延迟值" tabindex="-1"><a class="header-anchor" href="#延迟值" aria-hidden="true">#</a> 延迟值</h2><p>每个 <code>async</code> 代码块都会返回一个 <code>Deferred&lt;T&gt; </code>。它是协程 API 的核心原理，了解它的工作原理非常重要。</p><p><code>async </code> 会创建一个 <code>DeferredCoroutine</code> 或者一个 <code>LazyDeferredCoroutine</code>。这些协程都有一个公共的特点：实现了 <code>Continuation&lt;T&gt;</code> 接口，允许拦截执行流程并可以将值一直传递到调用处，就像 <code>suspendCoroutine</code> 一样。这看来与之前的 <strong>future pattern</strong> 的工作方式类似。</p><p>一旦协程被创建，除非指定了 <code>CoroutineStart</code> 为 <code>CoroutineStart.LAZY</code>，否则它将会立即启动。代码将在通过 <code>context</code> 参数传入的 <code>Dispatchers</code> 声明的线程中执行。当代码执行完毕并产生一个值后，这个值将被存储在协程内部。如果在任意时刻调用 <code>await</code>，它将会是一起挂断调用，同时它也会创建一个新的续体和执行流程，直到 <code>await</code> 返回值。如果协程还没有准备好值，那么这个函数必须等待。如果协程已经准备好值，那么将会立即得到值。</p><p>同时我们还可以检查 deferred value 的状态，因为它也实现了 <code>Job</code> 接口。我们可以使用 <code>isActive</code> 和 <code>isCompleted</code> 来了解它当前生命周期的状态。我们还可以使用其他的函数来获取协程的值，如果协程被取消，那么将会得到异常。<code>getCompleted</code> 函数可以返回协程的值，或者协程被取消，它将返回一个异常。<code>getCompletionExceptionOrNull</code> 函数可以返回 <code>CancellationException</code> 异常，如何协程没有被取消，它将返回 <code>null</code>。通过上述函数，我们可以了解 deferred value 完成状态的详细信息。</p><p>所以，什么是 <code>Deferred</code> 的最好诠释：它是一个带有返回结果的 <code>Job</code>。它可以并行运行，它可能会，也可能不会生成结果值，并且它可以被取消以及连接其它的 <code>Job</code>。它提供了一个强大的 API，我们可以随心所欲的调用。我们可以利用延迟值的特性：将延迟值组合在一个具有多个参数的函数中。</p><h2 id="组合多个延迟值" tabindex="-1"><a class="header-anchor" href="#组合多个延迟值" aria-hidden="true">#</a> 组合多个延迟值</h2><p>能够将多个在后台构建的延迟值在一个函数调用中，并且可以在主线程访问，这是一件了不起的事情。但是 <code>async</code> 的真正强大之处在于能够将两个或多个延迟值组合到一个函数调用中。让我们看看如何实现。</p><p>到目前为止，我们已经学习了一个模拟网络请求的示例，但现在是时候了扩展下该示例了。在项目中有一个 13,000 行文本的名为 <strong>users.txt</strong> 的文件。大多数行的信息包含有一个 <code>id</code>，一个 <code>name</code> 以及一个 <code>last name</code>，这些信息可以构建 <code>Users</code> 类。有些是空行，还有些行没有包含完整的上述三个信息，甚至有些行是脏数据。我们的想法是读取整个文件，解析和拆分每一行并从中创建用户。在这之后，我们可以得到一个 <code>User</code> 的集合，最后我们检查通过模拟网络请求得到的 <code>User</code> 是否存储在文件中。</p><p>通过这个想法，我们就可以看到如何在单个函数调用中启动和使用两个延迟值。现在我们打开 <strong>AsyncAwait.kt</strong> 。在那里，将以下代码添加到文件中：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">readUsersFromFile</span><span class="token punctuation">(</span>filePath<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span>
	GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>
	    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Reading the file of users&quot;</span></span><span class="token punctuation">)</span>
	    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
	    <span class="token function">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
	    <span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token punctuation">.</span><span class="token function">asSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
	    <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span>
	        <span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot; &quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// [id, name, lastName]</span>
	        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">data</span> <span class="token keyword">else</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token punctuation">}</span>
	    <span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span>
	        it<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token punctuation">}</span>
	    <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span>
	        <span class="token keyword">val</span> userId <span class="token operator">=</span> it<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	        <span class="token keyword">val</span> name <span class="token operator">=</span> it<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
	        <span class="token keyword">val</span> lastName <span class="token operator">=</span> it<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
	        <span class="token function">User</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> name<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span>
	    <span class="token punctuation">}</span>
	    <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">checkUserExists</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">,</span> users<span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
    <span class="token keyword">return</span> user <span class="token keyword">in</span> users
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>别忘记下面的导包：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数以异步方式执行上述所有操作，并将返回一个包含用户列表的 <code>Deferred</code>。 现在，我们可以将 <code>main</code> 函数中的代码调整为如下所示：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> userId <span class="token operator">=</span> <span class="token number">992</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Finding user&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> userDeferred <span class="token operator">=</span> <span class="token function">getUserByIdFromNetwork</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>
        <span class="token keyword">val</span> usersFromFileDeferred <span class="token operator">=</span> <span class="token function">readUsersFromFile</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;users.txt&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> userStoredInFile <span class="token operator">=</span> <span class="token function">checkUserExists</span><span class="token punctuation">(</span>
            userDeferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> usersFromFileDeferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userStoredInFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Found user in file!&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中：</p><ul><li>通过调用 <code>getUserByIdFromNetwork</code> 创建了一个 <code>userDeferred</code> 变量。<code>getUserByIdFromNetwork</code> 函数将会延迟 3秒返回一个 <code>User</code>。</li><li>然后将存储在 <strong>users.txt</strong> 文件中的用户列表读取到 <code>usersFromFileDeferred</code> 变量。</li><li>当上述两个变量都准备好后，就可以调用 <code>checkUserExists</code> 函数来检查从网络获取到的 <code>user</code> 是否存储在文件中。</li><li><code>checkUserExists</code> 函数需要两个参数：其中一个是需要被检查的 <code>user</code>，另外一个是检查 <code>user</code> 是否在其中的 <code>User</code> 集合。</li><li>要传入上述两个参数值，必须要等待 <code>Deferred</code> 的结果。</li><li>最后，如果 <code>user</code> 存储在文件中，那么就输出：“Found user in file!” 。</li></ul><p>我们传入 <code>checkUserExists</code> 函数的参数是之前准备的两个延迟值的等待结果，并且只通过一行代码：挂起函数并获取了两个值。</p><p>这是使用多个延迟值的正确方法。我们只创建了一个挂起点，但是它挂起了两个函数。另一种方式是把 <code>checkUserExists</code> 变成挂起函数，然后在其内部等待延迟值，但是将延迟值进一步传递给其他函数之前就得到值更加的简单明了。</p><p>运行上述代码，我们可以看到以下输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Finding user
Retrieving user from network
Reading the <span class="token function">file</span> of <span class="token function">users</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大概 3秒后，我们还可以看到 <code>Found user in file!</code>。这是因为通过 <code>Deferred</code> 创建的协程不是惰性的，它们会立即启动——只有当调用 <code>await</code> 时，才会挂起代码。调用 <code>await</code> 之后，就可以得到 <code>checkUserExists</code> 的返回值，并且输出 <code>user</code> 在文件中存在。</p><p>使用这种方法，可以组合任意数量的延迟值并实现智能和简单的并行性，但它不是基于数据流和回调的概念。基于到这一点，代码非常容易理解，因为它类似于顺序的同步代码，即使在背后它可能完全是异步的。这就是协程和异步/等待模式的真正力量。</p><p>在上一章中，我们使用 <code>withContext</code> 实现了相同的行为，但是只能返回一个值。这是两种模式之间的主要区别 —— <code>withContext</code> 最适用于需要从一段可挂起的代码中返回单个值的场景，而 <code>async/await</code> 最适用于并行运行的多个函数组合产生一个结果的场景。</p><p>然而，这段代码有一点并不理想：事实上，在取消和资源管理方面，这段代码的结构不是很好。让我们看看如何按照 <strong>Jetbrain&#39;s</strong> 的理念将代码打磨至完美。</p>`,25),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","03.deferring-values.html.vue"]]);export{d as default};

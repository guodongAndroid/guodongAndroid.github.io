import{_ as i,Y as l,Z as e,a3 as t}from"./framework-3d290349.js";const a={},c=t('<h1 id="关键点" tabindex="-1"><a class="header-anchor" href="#关键点" aria-hidden="true">#</a> 关键点</h1><ul><li>多线程允许您同时运行多个任务。</li><li>异步编程是线程通信的常见模式。</li><li>在线程之间共享数据有不同的机制，例如队列和管道。</li><li>大多数机制依赖于推-拉策略，当有太多或没有足够数据需要处理时阻塞线程。</li><li>回调是一种复杂、难以维护且认知超负载的机制。</li><li>当使用回调进行复现的操作时，很容易造成回调地狱。</li><li>响应式扩展为数据转换、组合和错误处理提供了简洁的解决方案。</li><li>Rx 可能过于复杂，并且不适用于所有应用程序。</li><li>协程是一个基于低级调度，且成熟可靠的概念。</li><li>线程过多会占用大量内存，最终导致程序或计算机崩溃。</li><li>协程并不总是创建新线程，它们可以重用线程池中的现有线程。</li><li>使用协程让编写简洁、同步风格的异步代码成为可能。</li></ul>',2),n=[c];function o(s,_){return l(),e("div",null,n)}const d=i(a,[["render",o],["__file","10.key-points.html.vue"]]);export{d as default};

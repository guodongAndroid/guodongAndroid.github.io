import{_ as l,Y as i,Z as r,$ as n,a1 as a,a2 as o,a0 as s,a3 as c,E as p}from"./framework-3d290349.js";const u="/book/assets/02-00-idea-24c7388c.png",d={},k=n("h1",{id:"sword-为-kotlin-函数增加代理功能-三",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sword-为-kotlin-函数增加代理功能-三","aria-hidden":"true"},"#"),s(" Sword - 为 Kotlin 函数增加代理功能(三)")],-1),v=n("h2",{id:"简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),s(" 简介")],-1),m=n("p",null,"Sword：一个可以给 Kotlin 函数增加代理的第三方库，基于 KCP 实现。",-1),b=c(`<p>前面两篇文章笔者记录了 <code>Sword</code> 的实现过程，本篇文章简单记录下如何使用 <code>Sword</code> 以及如何通过 <code>KSP</code> 为 <code>InvocationHandler</code> 生成 <code>FqName</code> 索引类 <code>HandlerFqName</code>。</p><p>下面我们先看下如何使用 <code>Sword</code> 吧。</p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// \`InvocationHandler\` 实现类1</span>
<span class="token keyword">class</span> GetTextNoArgInvocationHandler <span class="token operator">:</span> InvocationHandler <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> GetTextNoArgInvocationHandler<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>simpleName

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>className<span class="token operator">:</span> String<span class="token punctuation">,</span> methodName<span class="token operator">:</span> String<span class="token punctuation">,</span> args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Any<span class="token operator">?</span> <span class="token punctuation">{</span>
        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;invoke: className = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">className</span></span><span class="token string">, methodName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">methodName</span></span><span class="token string">, args(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">args<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">args<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;guodongAndroid-Debug&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \`InvocationHandler\` 实现类2</span>
<span class="token keyword">class</span> GetTextArgInvocationHandler <span class="token operator">:</span> InvocationHandler <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> GetTextArgInvocationHandler<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>simpleName

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>className<span class="token operator">:</span> String<span class="token punctuation">,</span> methodName<span class="token operator">:</span> String<span class="token punctuation">,</span> args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Any<span class="token operator">?</span> <span class="token punctuation">{</span>
        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;invoke: className = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">className</span></span><span class="token string">, methodName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">methodName</span></span><span class="token string">, args(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">args<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">args<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;guodongAndroid-Debug&quot;</span></span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码片段中，笔者创建了两个 <code>InvocationHandler</code> 实现类，对原始函数的返回值进行了替换，接下来创建测试类：</p><p><strong>向 <code>Proxy</code> 注解中的 <code>handler</code> 参数注入 <code>InvocationHandler</code> 实现类的全限定名(Fully Qualified Name)，其实现类必须有无参构造方法</strong>。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 测试类</span>
<span class="token keyword">class</span> Test <span class="token punctuation">{</span>

    <span class="token annotation builtin">@Proxy</span><span class="token punctuation">(</span>
        enable <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>isDebug<span class="token punctuation">,</span>
        <span class="token comment">// 注入 \`InvocationHandler\` 实现类的全限定名</span>
        handler <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.sword.app.GetTextNoArgInvocationHandler&quot;</span></span>
    <span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">getTextNoArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;guodongAndroid&quot;</span></span>

    <span class="token annotation builtin">@Proxy</span><span class="token punctuation">(</span>
        enable <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>isDebug<span class="token punctuation">,</span>
        <span class="token comment">// 注入 \`InvocationHandler\` 实现类的全限定名</span>
        handler <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.sword.app.GetTextArgInvocationHandler&quot;</span></span>
    <span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">getTextArg</span><span class="token punctuation">(</span>
        b<span class="token operator">:</span> Byte<span class="token punctuation">,</span>
        z<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
        c<span class="token operator">:</span> Char<span class="token punctuation">,</span>
        s<span class="token operator">:</span> Short<span class="token punctuation">,</span>
        i<span class="token operator">:</span> Int<span class="token punctuation">,</span>
        l<span class="token operator">:</span> Long<span class="token punctuation">,</span>
        f<span class="token operator">:</span> Float<span class="token punctuation">,</span>
        d<span class="token operator">:</span> Double<span class="token punctuation">,</span>
        str<span class="token operator">:</span> String<span class="token punctuation">,</span>
        ia<span class="token operator">:</span> IntArray<span class="token punctuation">,</span>
        sa<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">,</span>
        ls<span class="token operator">:</span> List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">,</span>
        lls<span class="token operator">:</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
        map<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token punctuation">,</span>
        user<span class="token operator">:</span> User<span class="token punctuation">,</span>
        callback<span class="token operator">:</span> Callback<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;guodongAndroid-Release&quot;</span></span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>笔者创建了两个测试函数：<code>getTextNoArg</code> 和 <code>getTextArg</code>，一个函数没有参数，另一个函数有多个不同类型的参数。这两个函数上都有 <code>Proxy</code> 注解，并且注解的参数 <code>enable</code> 都处于开启状态，<code>handler</code> 参数都注入了对应 <code>InvocationHandler</code> 实现类的全限定名。</p><p>下面执行测试逻辑，分别调用上述两个函数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> test <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">val</span> textNoArg <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">getTextNoArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;onCreate: textNoArg = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">textNoArg<span class="token punctuation">.</span>length</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">val</span> textArg <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">getTextArg</span><span class="token punctuation">(</span>
    <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token number">1F</span><span class="token punctuation">,</span>
    <span class="token number">1.0</span><span class="token punctuation">,</span>
    <span class="token string-literal singleline"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">,</span>
    <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">object</span> <span class="token operator">:</span> Callback <span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>cause<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;onCreate: textArg = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">textArg</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原始输出结果：</p><div class="language-logcat line-numbers-mode" data-ext="logcat"><pre class="language-logcat"><code>1.MainActivity: onCreate: textNoArg = 14
2.MainActivity: onCreate: textArg = User(name=guodongAndroid-Release, age=28)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代理输出结果：</p><div class="language-logcat line-numbers-mode" data-ext="logcat"><pre class="language-logcat"><code>1.GetTextNoArgInvocationHandler: invoke: className = Test, methodName = getTextNoArg, args(0) = 
2.MainActivity: onCreate: textNoArg = 20
3.GetTextArgInvocationHandler: invoke: className = Test, methodName = getTextArg, args(16) = 1, false, A, 1, 1, 1, 1.0, 1.0, test, [I@156552e7, [Ljava.lang.String;@110de94, [], [], {}, User(name=1, age=1), com.guodong.android.sword.app.MainActivity$onCreate$textArg$2@12780d3d
4.onCreate: textArg = User(name=guodongAndroid-Debug, age=18)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的输出结果可以看出，<code>Proxy</code> 注解生效了：调用上述两个函数后成功执行了代理类的 <code>invoke</code> 函数。</p><p>至此，<code>Sword</code> 的使用就结束了，是不是比较简单呢？</p><p>但是这里有个问题：我们在给 <code>Proxy</code> 注解的 <code>handler</code> 参数注入 <code>InvocationHandler</code> 实现类的全限定名时使用的是硬编码，如果我们修改了实现类的类名，而忘记修改此处的全限定名，代码在运行时就会发生错误了。</p><p>针对这个问题，笔者的第一想法是使用 <code>handler = GetTextNoArgInvocationHandler::class.java.name</code>，但是不行，<strong>注解参数必须是编译期常量</strong>，此路不通了。</p><p>后面笔者想到一种方案：为 <code>InvocationHandler</code> 的实现类生成全限定名索引。</p><p>此方案参考自 <code>EventBus</code> 为 <code>Event</code> 事件生成 <code>EventIndex</code> ，不过 <code>EventBus</code> 使用 <code>APT</code> 技术进行实现，而 <code>Sword</code> 选择使用 <code>KSP</code> 实现。</p><p>接下来我们就看看如何为 <code>InvocationHandler</code> 的实现类生成全限定名索引吧。</p><p>首先看下最后的索引类 <code>HandlerFqName</code> 效果：</p><h2 id="handlerfqname" tabindex="-1"><a class="header-anchor" href="#handlerfqname" aria-hidden="true">#</a> HandlerFqName</h2><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// The file is automatic generated by Sword, don&#39;t modify it.</span>
<span class="token keyword">package</span> com<span class="token punctuation">.</span>guodong<span class="token punctuation">.</span>android<span class="token punctuation">.</span>sword<span class="token punctuation">.</span>app

<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>String

<span class="token comment">/**
 * The class is automatic generated by Sword, don&#39;t modify it.
 *
 * [com.guodong.android.sword.api.kt.InvocationHandler]实现类的全限定名
 */</span>
<span class="token keyword">public</span> <span class="token keyword">object</span> HandlerFqName <span class="token punctuation">{</span>
  <span class="token comment">/**
   * [com.guodong.android.sword.app.GetTextArgInvocationHandler]
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token keyword">val</span> GetTextArgInvocationHandler<span class="token operator">:</span> String <span class="token operator">=</span>
      <span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.sword.app.GetTextArgInvocationHandler&quot;</span></span>

  <span class="token comment">/**
   * [com.guodong.android.sword.app.GetTextNoArgInvocationHandler]
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token keyword">val</span> GET_TEXT_NO_ARG<span class="token operator">:</span> String <span class="token operator">=</span>
      <span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.sword.app.GetTextNoArgInvocationHandler&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proxyhandler" tabindex="-1"><a class="header-anchor" href="#proxyhandler" aria-hidden="true">#</a> ProxyHandler</h2><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * 标记[InvocationHandler]的实现类, 为其生成\`FqName\`索引类\`HandlerFqName\`
 *
 * 使用 ksp 实现
 */</span>
<span class="token annotation builtin">@Target</span><span class="token punctuation">(</span>AnnotationTarget<span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span>
<span class="token annotation builtin">@Retention</span><span class="token punctuation">(</span>AnnotationRetention<span class="token punctuation">.</span>BINARY<span class="token punctuation">)</span>
<span class="token keyword">annotation</span> <span class="token keyword">class</span> <span class="token function">ProxyHandler</span><span class="token punctuation">(</span>
    <span class="token comment">/**
     * 生成字段的名称, 默认为类名
     *
     * \`paramName\`参数名称不要随意变动
     */</span>
    <span class="token keyword">val</span> paramName<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>api-kotlin</code> 模块中新增 <code>ProxyHandler</code> 注解，此注解用于标记 <code>InvocationHandler</code> 的实现类，为其生成<code>FqName</code>索引，比如我们标记在 <code>GetTextNoArgInvocationHandler</code> 类上：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@ProxyHandler</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;GET_TEXT_NO_ARG&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">class</span> GetTextNoArgInvocationHandler <span class="token operator">:</span> InvocationHandler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>paramName</code> 参数可以指定生成字段的名称，如果没有设置，默认生成的字段名称为实现类的类名：<code>HandlerFqName.GetTextArgInvocationHandler</code>。</p><h2 id="ksp" tabindex="-1"><a class="header-anchor" href="#ksp" aria-hidden="true">#</a> KSP</h2>`,30),g={href:"https://github.com/google/ksp",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"KCP",-1),w=n("code",null,"KCP",-1),f=n("code",null,"KSP",-1),A=n("code",null,"KSP",-1),x={href:"https://github.com/google/ksp",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"KSP",-1),h=c('<p>笔者先描述下自己的实现思路：</p><ol><li>首先判断当前模块是否有 <code>InvocationHandler</code> 接口，如若没有，则不处理，</li><li>其次判断当前模块是否有 <code>ProxyHandler</code> 注解，如若没有，则不处理，</li><li>以上两个条件都满足的，再获取包含 <code>ProxyHandler</code> 注解的所有 <code>Kotlin</code> 符号，</li><li>对获取的 <code>Kotlin</code> 符号进行几种条件过滤，目的是确保此符号是 <code>InvocationHandler</code> 接口的实现类，过滤条件： <ol><li>判断是否是类，而不是接口、枚举类等，</li><li>判断类是否是公开且不是抽象类，确保当前类可以访问并直接实例化，</li><li>判断是否有主构造方法或主构造方法没有参数，确保有无参构造方法，</li><li>最后判断当前类是否实现了 <code>InvocationHandler</code> 接口。</li></ol></li><li>通过过滤后的符号，收集并存储要生成的字段名和全限定名，</li><li>最后通过 <code>KotlinPoet</code> 生成索引类。</li></ol><p><img src="'+u+`" alt="idea" loading="lazy"></p><p>下面根据实现思路依次实现。 首先定义一些常量，用于后面代码的编写：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对应\`ProxyHandler\`注解里的\`paramName\`参数名称</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> PARAM_NAME <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;paramName&quot;</span></span>

    <span class="token comment">// 生成索引类的包名，提供给外部配置，默认\`com.guodong.android.sword\`</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> PACKAGE_NAME_PARAM_NAME <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;sword.pkg&quot;</span></span>

    <span class="token comment">// 默认索引类的包名</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> DEFAULT_PACKAGE_NAME <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.sword&quot;</span></span>
    
    <span class="token comment">// 索引类所在文件名</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> FILE_NAME <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;HandlerFqName&quot;</span></span>
    
    <span class="token comment">// 索引类的类名</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> CLASS_NAME <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;HandlerFqName&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再定义一个实体，用于存储生成的字段名和全限定名：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">ProxyHandlerParam</span><span class="token punctuation">(</span>
    <span class="token comment">/**
     * 参数名称, 默认为类名
     */</span>
    <span class="token keyword">val</span> paramName<span class="token operator">:</span> String<span class="token punctuation">,</span>

    <span class="token comment">/**
     * [InvocationHandler]实现类的全限定名
     *
     * e.g. com.example.ProxyTestInvocationHandler
     */</span>
    <span class="token keyword">val</span> fqName<span class="token operator">:</span> String<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来主要分析 <code>SymbolProcessor</code> 的 <code>process(resolver: Resolver)</code> 函数，下面代码是思路中前两步的具体实现：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> mInvocationHandlerName <span class="token operator">=</span> <span class="token function">requireNotNull</span><span class="token punctuation">(</span>InvocationHandler<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>qualifiedName<span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">val</span> mProxyHandlerName <span class="token operator">=</span> <span class="token function">requireNotNull</span><span class="token punctuation">(</span>ProxyHandler<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>qualifiedName<span class="token punctuation">)</span>

<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">process</span><span class="token punctuation">(</span>resolver<span class="token operator">:</span> Resolver<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>KSAnnotated<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断当前模块是否有 \`InvocationHandler\` 接口，如若没有，则不处理</span>
    <span class="token keyword">val</span> mProxyHandlerType <span class="token operator">=</span>
    	resolver<span class="token punctuation">.</span><span class="token function">getClassDeclarationByName</span><span class="token punctuation">(</span>mProxyHandlerName<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">asType</span><span class="token punctuation">(</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mProxyHandlerType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">TAG</span></span><span class="token string">: Not found \`ProxyHandler\`&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 判断当前模块是否有 \`ProxyHandler\` 注解，如若没有，则不处理</span>
    <span class="token keyword">val</span> mInvocationHandlerType <span class="token operator">=</span>
    	resolver<span class="token punctuation">.</span><span class="token function">getClassDeclarationByName</span><span class="token punctuation">(</span>mInvocationHandlerName<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">asType</span><span class="token punctuation">(</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mInvocationHandlerType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">TAG</span></span><span class="token string">: Not found \`InvocationHandler\`&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取包含 <code>ProxyHandler</code> 注解的所有 <code>Kotlin</code> 符号比较简单，通过 <code>KSP</code> 提供的 API，我们可以很方便的获取到：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> symbols <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">getSymbolsWithAnnotation</span><span class="token punctuation">(</span>mProxyHandlerName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面根据实现思路的第四步过滤我们获取到的符号：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> classDeclaration <span class="token operator">=</span> symbols
	<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
	<span class="token punctuation">.</span>filterIsInstance<span class="token operator">&lt;</span>KSClassDeclaration<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> declaration <span class="token operator">-&gt;</span>
         <span class="token comment">// Class</span>
         <span class="token keyword">val</span> isClass <span class="token operator">=</span> declaration<span class="token punctuation">.</span>classKind <span class="token operator">==</span> ClassKind<span class="token punctuation">.</span>CLASS

         <span class="token comment">// Public &amp;&amp; !Abstract</span>
         <span class="token keyword">val</span> isPublic <span class="token operator">=</span>
         Modifier<span class="token punctuation">.</span>PUBLIC <span class="token keyword">in</span> declaration<span class="token punctuation">.</span>modifiers <span class="token operator">||</span> declaration<span class="token punctuation">.</span>modifiers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token keyword">val</span> isNotAbstract <span class="token operator">=</span> Modifier<span class="token punctuation">.</span>ABSTRACT <span class="token operator">!</span><span class="token keyword">in</span> declaration<span class="token punctuation">.</span>modifiers

         <span class="token comment">// 无参构造方法</span>
         <span class="token keyword">val</span> primaryConstructor <span class="token operator">=</span> declaration<span class="token punctuation">.</span>primaryConstructor
         <span class="token keyword">val</span> hasNoArgumentConstructor <span class="token operator">=</span>
         primaryConstructor <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> primaryConstructor<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

         <span class="token comment">// 实现\`InvocationHandler\`接口</span>
         <span class="token keyword">val</span> isImplInvocationHandler <span class="token operator">=</span>
         declaration<span class="token punctuation">.</span>superTypes<span class="token punctuation">.</span><span class="token function">any</span> <span class="token punctuation">{</span> ref <span class="token operator">-&gt;</span> ref<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> mInvocationHandlerType <span class="token punctuation">}</span>

         isClass <span class="token operator">&amp;&amp;</span> isPublic <span class="token operator">&amp;&amp;</span> isNotAbstract <span class="token operator">&amp;&amp;</span> hasNoArgumentConstructor <span class="token operator">&amp;&amp;</span> isImplInvocationHandler
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤符号后，就可以收集并存储要生成的字段名和全限定名了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> params <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>ProxyHandlerParam<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>declaration <span class="token keyword">in</span> classDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">annotation</span> <span class="token keyword">in</span> declaration<span class="token punctuation">.</span>annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里笔者没有判断当前\`annotation\`是否是\`ProxyHandler\`可能会存在问题</span>
        <span class="token comment">// 因为\`resolve()\`函数的注释中描述调用此函数的代价比较昂贵, 应尽可能避免调用，这里又是在遍历中调用，所以笔者就没有判断</span>
        <span class="token comment">// 如果存在问题，我们可以给\`ProxyHandler\`注解的\`paramName\`参数换个唯一不会重复的名称</span>
        <span class="token comment">/*if (annotation.annotationType.resolve() != mProxyHandlerType) {
            continue
        }*/</span>
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span>argument <span class="token keyword">in</span> <span class="token keyword">annotation</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> name <span class="token operator">=</span> argument<span class="token punctuation">.</span>name<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token keyword">continue</span>
            <span class="token comment">// 判断是否是\`ProxyHandler\`注解中的参数名称</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> PARAM_NAME<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取注解中的参数值</span>
                <span class="token keyword">val</span> value<span class="token operator">:</span> String <span class="token operator">=</span> argument<span class="token punctuation">.</span>value <span class="token keyword">as</span><span class="token operator">?</span> String <span class="token operator">?:</span> <span class="token keyword">continue</span>
                <span class="token comment">// 获取当前实现类的全限定名</span>
                <span class="token keyword">val</span> fqName<span class="token operator">:</span> String <span class="token operator">=</span> declaration<span class="token punctuation">.</span>qualifiedName<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token keyword">continue</span>

                <span class="token comment">// 如果注解没有注入参数名则使用类名</span>
                <span class="token keyword">val</span> paramName <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">ifEmpty</span> <span class="token punctuation">{</span> declaration<span class="token punctuation">.</span>simpleName<span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
                
                <span class="token comment">// 收集存储</span>
                <span class="token keyword">val</span> param <span class="token operator">=</span> <span class="token function">ProxyHandlerParam</span><span class="token punctuation">(</span>paramName<span class="token punctuation">,</span> fqName<span class="token punctuation">)</span>
                params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>收集我们所需的数据后，最后就可以生成索引类了，笔者使用 <code>KotlinPoet</code> 来生成索引类：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 构建类中的全限定名属性</span>
<span class="token keyword">val</span> propertySpecs <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> param <span class="token operator">-&gt;</span>
    PropertySpec<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>paramName<span class="token punctuation">,</span> String<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addModifiers</span><span class="token punctuation">(</span>KModifier<span class="token punctuation">.</span>CONST<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">initializer</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;%S&quot;</span></span><span class="token punctuation">,</span> param<span class="token punctuation">.</span>fqName<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addKdoc</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">param<span class="token punctuation">.</span>fqName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 构建\`HandlerFqName\`类</span>
<span class="token keyword">val</span> type <span class="token operator">=</span> TypeSpec<span class="token punctuation">.</span><span class="token function">objectBuilder</span><span class="token punctuation">(</span>CLASS_NAME<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addKdoc</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The class is automatic generated by Sword, don&#39;t modify it.\\n\\n&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addKdoc</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">mInvocationHandlerName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]实现类的全限定名&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addProperties</span><span class="token punctuation">(</span>propertySpecs<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 获取包名</span>
<span class="token keyword">val</span> pkg <span class="token operator">=</span> env<span class="token punctuation">.</span>options<span class="token punctuation">[</span>PACKAGE_NAME_PARAM_NAME<span class="token punctuation">]</span>
<span class="token keyword">val</span> packageName <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DEFAULT_PACKAGE_NAME
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    pkg
<span class="token punctuation">}</span>

<span class="token comment">// 构建\`HandlerFqName\`文件</span>
<span class="token keyword">val</span> fileBuilder <span class="token operator">=</span> FileSpec<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> FILE_NAME<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addFileComment</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The file is automatic generated by Sword, don&#39;t modify it.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>

<span class="token comment">// 创建生成文件的依赖关系</span>
<span class="token keyword">val</span> sources <span class="token operator">=</span>
    classDeclaration<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>containingFile <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">filterNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toTypedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> dependencies <span class="token operator">=</span> <span class="token function">Dependencies</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">*</span>sources<span class="token punctuation">)</span>

<span class="token comment">// 生成索引类</span>
fileBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>codegen<span class="token punctuation">,</span> dependencies<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，通过 <code>KSP</code> 生成索引类完成。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文简单记录了 <code>Sword</code> 的使用方式，以及在使用过程中发现的问题，最后使用 <code>KSP</code> 解决问题的过程。在解决问题的过程中，笔者参考 <code>EventBus</code> 的实现，结合问题本身的逻辑，形成自己的解决方案。</p><p>通过解决这个问题的过程，笔者感受到学习开源项目的魅力，当我们遇到问题时，或许开源项目也遇到过类似问题并有成熟的解决方案供我们参考。</p><p>最近笔者对 <code>Sword</code> 的功能实现有新的想法：通过 <code>Kotlin IR</code> 进行实现。</p><p>目前这只是一个初步想法，理论上实现起来应该比使用 <code>ASM</code> 简单一些吧，待笔者实现后再记录一下吧。</p><p>下篇再见，happy~</p>`,24);function H(q,S){const e=p("RouterLink"),t=p("ExternalLinkIcon");return i(),r("div",null,[k,v,m,n("ol",null,[n("li",null,[a(e,{to:"/OpenSourceProject/Sword/00-sword.html"},{default:o(()=>[s("Sword - 为 Kotlin 函数增加代理功能(一)")]),_:1})]),n("li",null,[a(e,{to:"/OpenSourceProject/Sword/01-sword.html"},{default:o(()=>[s("Sword - 为 Kotlin 函数增加代理功能(二)")]),_:1})])]),b,n("p",null,[n("a",g,[s("KSP"),a(t)]),s(" 基于 "),y,s(" 实现，提供了一个简化的编译器插件 API，与 "),w,s(" 陡峭的学习曲线相比，"),f,s(" 的学习曲线要平滑一些。、")]),n("p",null,[s("如何使用 "),A,s(" 读者可以参考"),n("a",x,[s("官网"),a(t)]),s("，本文就不记录搭建 "),N,s(" 开发环境了，直接进入正题。")]),h])}const _=l(d,[["render",H],["__file","02-sword.html.vue"]]);export{_ as default};

import{_ as t,Y as p,Z as i,$ as n,a0 as s,a1 as e,a3 as o,E as l}from"./framework-3d290349.js";const c="/book/assets/00-00-project-a820b99e.png",r="/book/assets/202205120932971-c1ba65b9.png",d={},u=o('<h1 id="sword-为-kotlin-函数增加代理功能-一" tabindex="-1"><a class="header-anchor" href="#sword-为-kotlin-函数增加代理功能-一" aria-hidden="true">#</a> Sword - 为 Kotlin 函数增加代理功能(一)</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>Sword：一个可以给 Kotlin 函数增加代理的第三方库，基于 KCP 实现。</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2>',4),k={href:"https://sunxiaodou.com/book/SourceCodeAnalysis/Retrofit/2.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html",target:"_blank",rel:"noopener noreferrer"},v=o("<p>正好笔者之前就有把某个函数/方法标记为开发调试方法的需求：在开发调试阶段可以执行，正式发布之后就不可执行。要实现这种需求，笔者可以列举下自己想到的方案：</p><ol><li>在函数/方法中通过 <code>BuildConfig#DEBUG</code> 判断是否可以执行：此方案最简单，在编码期依赖开发人员手动实现，但是编码过程比较繁琐且索然无味，</li><li>为函数/方法增加某个注解，通过修改函数/方法的字节码增加判断是否可以执行逻辑：此方案实现起来较为复杂，需要了解一些字节码信息，但是实现后使用起来比较方便且一劳永逸。</li></ol><p>仔细思考一下，其实可以发现：<strong>为函数/方法增加代理功能</strong> 可以实现 <strong>把某个函数/方法标记为开发调试方法的需求</strong>。</p><p>经过一番思想斗争，笔者选择了第二种方案，然后结合 <strong>为函数/方法也增加代理功能的想法</strong> ，所以最终选型为：注解 + KCP + ASM。</p><p>又正好笔者之前写过几篇关于 KCP 的文章：</p>",5),m={href:"https://sunxiaodou.com/2022/05/08/Kotlin/Kotlin-KCP%E7%9A%84%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%B8%80%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://sunxiaodou.com/2022/05/12/Kotlin/Kotlin-KCP%E7%9A%84%E5%BA%94%E7%94%A8-%E7%AC%AC%E4%BA%8C%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://sunxiaodou.com/2022/05/23/Kotlin/Kotlin-KCP%E7%9A%84%E5%BA%94%E7%94%A8-%E4%BF%AE%E6%94%B9SDK%E7%89%88%E6%9C%AC%E5%8F%B7/",target:"_blank",rel:"noopener noreferrer"},h=o('<p>在上面的 KCP 文章中，笔者记录了搭建 KCP 开发环境的过程，通过阅读上面的文章可以快速搭建一个 KCP 开发环境。</p><p>本文记录下 Sword 的项目结构及前期的开发环境搭建，后续文章再分析 Sword 的核心代码部分，下面让我们先看看项目结构吧。</p><h2 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h2><p><img src="'+c+`" alt="project" loading="lazy"></p><ul><li><strong>api-kotlin</strong>：API 模块，定义相关的注解 API 类，</li><li><strong>compiler</strong>：ksp 模块，辅助 Sword 生成常量类，后续文章再讲，</li><li><strong>kcp</strong>：kcp 模块，实现 Gradle Plugin 和 Kotlin Compiler Plugin。</li></ul><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><h3 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> Proxy</h3><p>首先创建 API 模块并定义 <code>Proxy</code> 注解：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Target</span><span class="token punctuation">(</span>AnnotationTarget<span class="token punctuation">.</span>FUNCTION<span class="token punctuation">)</span>
<span class="token annotation builtin">@Retention</span><span class="token punctuation">(</span>AnnotationRetention<span class="token punctuation">.</span>BINARY<span class="token punctuation">)</span>
<span class="token keyword">annotation</span> <span class="token keyword">class</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>
    <span class="token comment">/**
     * 是否启用, 默认True
     */</span>
    <span class="token keyword">val</span> enable<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     * [InvocationHandler]实现类的全限定名, 实现类必须有无参构造方法
     *
     * e.g. com.example.ProxyTestInvocationHandler
     */</span>
    <span class="token keyword">val</span> handler<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Proxy</code> 注解中有两个参数：</p><ol><li><strong>enable</strong>：表示是否为函数启用代理，默认 <code>True</code>，</li><li><strong>handler</strong>：表示代理函数处理类的<strong>全限定名</strong>，<strong>此处理类必须实现 <code>InvocationHandler</code> 接口，且必须有无参构造方法</strong>。</li></ol><h3 id="invocationhandler" tabindex="-1"><a class="header-anchor" href="#invocationhandler" aria-hidden="true">#</a> InvocationHandler</h3><p>先看下 Java 动态代理接口 <code>java.lang.reflect.InvocationHandler</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们仿照 Java 的动态代理接口定义我们的接口：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// kt</span>
<span class="token keyword">interface</span> InvocationHandler <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>className<span class="token operator">:</span> String<span class="token punctuation">,</span> methodName<span class="token operator">:</span> String<span class="token punctuation">,</span> args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Any<span class="token operator">?</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者是不是比较相似呢？但是后者的接口方法参数有所不同：</p><ol><li><strong>className</strong>：表示当前代理方法所在的类名，</li><li><strong>methodName</strong>：表示当前代理方法的名称，</li><li><strong>args</strong>：表示当前代理方法的参数数组。</li></ol><p>在实现方式上也有所不同：</p><ol><li>Java 动态代理是在运行时动态创建并加载 Class，然后通过反射调用，有一定的性能开销，</li><li>Sword 勉强属于静态代理吧，在编译期修改字节码，没有经过反射调用，基本没有性能开销。</li></ol><p>API 相关定义完成，接下来开始编写 KCP 吧。</p><h2 id="kcp" tabindex="-1"><a class="header-anchor" href="#kcp" aria-hidden="true">#</a> KCP</h2><p>对 KCP 不太了解的读者可以先看下上面列举的几篇文章。这里再贴下 KCP 的架构图吧：</p><p><img src="`+r+`" alt="kcp-architecture" loading="lazy"></p><h3 id="gradle-plugin" tabindex="-1"><a class="header-anchor" href="#gradle-plugin" aria-hidden="true">#</a> Gradle Plugin</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> SwordGradlePlugin <span class="token operator">:</span> KotlinCompilerPluginSupportPlugin <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Project<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Welcome to guodongAndroid sword kcp gradle plugin.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">isApplicable</span><span class="token punctuation">(</span>kotlinCompilation<span class="token operator">:</span> KotlinCompilation<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getCompilerPluginId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>KOTLIN_PLUGIN_ID

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getPluginArtifact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SubpluginArtifact <span class="token operator">=</span> <span class="token function">SubpluginArtifact</span><span class="token punctuation">(</span>
        groupId <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>KOTLIN_PLUGIN_GROUP<span class="token punctuation">,</span>
        artifactId <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>KOTLIN_PLUGIN_NAME<span class="token punctuation">,</span>
        version <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>KOTLIN_PLUGIN_VERSION<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">applyToCompilation</span><span class="token punctuation">(</span>kotlinCompilation<span class="token operator">:</span> KotlinCompilation<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Provider<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>SubpluginOption<span class="token operator">&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> project <span class="token operator">=</span> kotlinCompilation<span class="token punctuation">.</span>target<span class="token punctuation">.</span>project
        <span class="token keyword">return</span> project<span class="token punctuation">.</span><span class="token function">provider</span> <span class="token punctuation">{</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对目前的 Sword 来说，它不需要任何参数和配置项。所以 <strong>Gradle Plugin</strong> 就一个 <code>SwordGradlePlugin</code> 类，比较简单，在其中配置下 <em>PluginId</em> 和 KCP 的 <em>SubpluginArtifact</em> 即可。</p><h3 id="kotlin-compiler-plugin" tabindex="-1"><a class="header-anchor" href="#kotlin-compiler-plugin" aria-hidden="true">#</a> Kotlin Compiler Plugin</h3><h4 id="commandlineprocessor" tabindex="-1"><a class="header-anchor" href="#commandlineprocessor" aria-hidden="true">#</a> CommandLineProcessor</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@AutoService</span><span class="token punctuation">(</span>CommandLineProcessor<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> SwordCommandLineProcessor <span class="token operator">:</span> CommandLineProcessor <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">val</span> pluginId<span class="token operator">:</span> String <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>KOTLIN_PLUGIN_ID

    <span class="token keyword">override</span> <span class="token keyword">val</span> pluginOptions<span class="token operator">:</span> Collection<span class="token operator">&lt;</span>AbstractCliOption<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CommandLineProcessor</code> 也非常简单，只需配置 <code>PluginId</code>，没有任何参数和配置项。</p><h4 id="componentregistrar" tabindex="-1"><a class="header-anchor" href="#componentregistrar" aria-hidden="true">#</a> ComponentRegistrar</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@AutoService</span><span class="token punctuation">(</span>ComponentRegistrar<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> SwordComponentRegistrar <span class="token operator">:</span> ComponentRegistrar <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">registerProjectComponents</span><span class="token punctuation">(</span>
        project<span class="token operator">:</span> MockProject<span class="token punctuation">,</span>
        configuration<span class="token operator">:</span> CompilerConfiguration
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> messageCollector <span class="token operator">=</span>
            configuration<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>CLIConfigurationKeys<span class="token punctuation">.</span>MESSAGE_COLLECTOR_KEY<span class="token punctuation">,</span> MessageCollector<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span>

        messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
            CompilerMessageSeverity<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span>
            <span class="token string-literal singleline"><span class="token string">&quot;Welcome to guodongAndroid sword kcp kotlin plugin&quot;</span></span>
        <span class="token punctuation">)</span>

        ClassBuilderInterceptorExtension<span class="token punctuation">.</span><span class="token function">registerExtension</span><span class="token punctuation">(</span>
            project<span class="token punctuation">,</span>
            <span class="token function">SwordClassGenerationInterceptor</span><span class="token punctuation">(</span>messageCollector<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ComponentRegistrar</code> 的逻辑也很简单：首先获取 <code>MessageCollector</code> 用于日志输出，然后注册一个 <code>ClassBuilder</code> 拦截器用于拦截类的生成。</p><h4 id="classbuilderinterceptorextension" tabindex="-1"><a class="header-anchor" href="#classbuilderinterceptorextension" aria-hidden="true">#</a> ClassBuilderInterceptorExtension</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">SwordClassGenerationInterceptor</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> messageCollector<span class="token operator">:</span> MessageCollector<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">:</span> ClassBuilderInterceptorExtension <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">interceptClassBuilderFactory</span><span class="token punctuation">(</span>
        interceptedFactory<span class="token operator">:</span> ClassBuilderFactory<span class="token punctuation">,</span>
        bindingContext<span class="token operator">:</span> BindingContext<span class="token punctuation">,</span>
        diagnostics<span class="token operator">:</span> DiagnosticSink
    <span class="token punctuation">)</span><span class="token operator">:</span> ClassBuilderFactory <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> ClassBuilderFactory <span class="token keyword">by</span> interceptedFactory <span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">newClassBuilder</span><span class="token punctuation">(</span>origin<span class="token operator">:</span> JvmDeclarationOrigin<span class="token punctuation">)</span><span class="token operator">:</span> ClassBuilder <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">SwordClassBuilder</span><span class="token punctuation">(</span>messageCollector<span class="token punctuation">,</span> interceptedFactory<span class="token punctuation">.</span><span class="token function">newClassBuilder</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现 <code>ClassBuilderInterceptorExtension</code> 接口方法 <code>interceptClassBuilderFactory</code>，返回一个 <code>ClassBuilderFactory</code>，在 <code>newClassBuilder</code> 中做拦截，加入自己的处理逻辑，所以接下来的 <code>ClassBuilder</code> 算是 Sword 的核心代码了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文只是记录了 Sword 的项目结构及前期的开发环境搭建过程，可以看出 KCP 的开发环境搭建是有迹可循，有模板可依，此次的搭建过程与之前的 Mask 和 修改 SDK 版本号大同小异，笔者后续会提供一个 KCP 开发环境的模板工程供大家参考。</p><p>在学习或工作中有好的想法一定要及时记录下来，不要着急去实现你的想法，认真思考几种实现方案，仔细衡量方案中的利弊，选择一个你认为好的方案后再开始做实现。</p><p><strong>哦，对了，有想法一定要去实践，不要只是记录下来！</strong></p><p>下篇再见，happy~</p>`,42);function C(f,y){const a=l("ExternalLinkIcon");return p(),i("div",null,[u,n("p",null,[s("为什么写这个库呢？笔者在学习 Retrofit 时，写过一篇文章 "),n("a",k,[s("Retrofit学习日记-动态代理"),e(a)]),s("，在这时候笔者就萌生了为函数/方法也增加代理功能的想法。")]),v,n("ol",null,[n("li",null,[n("a",m,[s("Kotlin-KCP的应用-第一篇"),e(a)])]),n("li",null,[n("a",g,[s("Kotlin-KCP的应用-第二篇"),e(a)])]),n("li",null,[n("a",b,[s("Kotlin-KCP的应用-修改SDK版本号"),e(a)])])]),h])}const P=t(d,[["render",C],["__file","00-sword.html.vue"]]);export{P as default};

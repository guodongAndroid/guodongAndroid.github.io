import{_ as e,Y as t,Z as o,$ as s,a0 as n,a1 as c,a2 as p,a3 as l,E as i}from"./framework-3d290349.js";const d={},u=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),r=s("code",null,"@Url",-1),k=s("code",null,"@Path",-1),m=l(`<h2 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> @Url</h2><p><code>@Url</code> 注解标记HTTP接口方法的一个参数，表示这个参数是一个 <code>endpoint</code>，可以与 <code>baseUrl</code> 进行结合，根据上一篇文章中描述的结合规则拼接完整的HTTP请求地址，简单使用示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GET</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Url</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 假设 baseUrl 如下:</span>
<span class="token comment">// baseUrl = &quot;http://example.com/&quot;</span>
<span class="token class-name">Service</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 那么完整的请求地址如下:</span>
<span class="token comment">// request.url().toString(): http://example.com/foo/bar/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Url</code> 注解使用时有以下几点需要注意：</p><ol><li><p>被 <code>@Url</code> 注解标记的参数必须在 <code>@Query</code>、<code>@QueryName</code> 及 <code>@QueryMap</code> 注解标记参数的前面，否则抛出异常，<strong>所以通常标记第一个参数</strong>，下面是错误示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 错误示例</span>
<span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GET</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;ping&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> ping<span class="token punctuation">,</span> <span class="token annotation punctuation">@Url</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>被 <code>@Url</code> 注解标记的参数必须是以下几种类型之一：</p><ol><li><code>java.lang.String</code>，</li><li><code>okhttp3.HttpUrl</code>，</li><li><code>java.net.URI</code>，</li><li><code>android.net.Uri</code></li></ol></li><li><p>如果请求方法注解中的 <code>endpoint</code> 不是默认值（即：空字符串），则会抛出异常，即：<code>@Url</code> 注解标记的 <code>endpoint</code> 不能与请求方法注解中的 <code>endpoint</code> 共存，下面是错误示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 错误示例</span>
<span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar/&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 请求方法注解中的 endpoint 不是默认值（即：空字符串）</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Url</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Service</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果使用了 <code>@Url</code> 注解，那么就不能再使用 <code>@Path</code> 注解，即 <code>@Url</code> 注解和 <code>@Path</code> 注解存在互斥关系，否则抛出异常，</p></li><li><p>一个HTTP接口方法中不能同时存在两个及以上的 <code>@Url</code> 注解，否则抛出异常，</p></li></ol><h2 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> @Path</h2><p><code>@Path</code> 注解标记HTTP接口方法的一个参数，表示这个参数用于替换HTTP请求注解静态路径段中的命名路径。注解的值会经过 <code>Retrofit#stringConverter(Type, Annotation[])</code> 转换，如果没有找到匹配的字符串转换器则使用 <code>Object#toString()</code>，最后再经过URL编码。</p><p><code>@Path</code> 注解有两个参数，分别为：</p><ol><li><code>value</code>：对应路径段中的命名路径，</li><li><code>encoded</code>：当前参数值是否已经经过URL编码，为 <code>true</code> 的话，Retrofit 内部不会再经过URL编码，默认 <code>false</code></li></ol><p>简单使用示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;image/{id}&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 假设 baseUrl 如下:</span>
<span class="token comment">// baseUrl = &quot;http://example.com/&quot;</span>
<span class="token class-name">Service</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 那么完整的请求地址如下:</span>
<span class="token comment">// request.url().toString(): http://example.com/image/1</span>

<span class="token comment">// ========================================================================</span>
<span class="token comment">// encoded</span>
<span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;user/{name}&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">&quot;guodong+Android&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// url: user/guodong%2BAndroid</span>

<span class="token comment">// ========================================================================</span>
<span class="token comment">// not encoded</span>
<span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;user/{name}&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> encoded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">&quot;guodong+Android&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// url: user/guodong+Android</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Path</code> 注解使用时有以下几点需要注意：</p><ol><li>被 <code>@Path</code> 注解标记的参数必须在 <code>@Query</code>、<code>@QueryName</code> 及 <code>@QueryMap</code> 注解标记参数的前面，否则抛出异常，这一点与 <code>@Url</code> 注解类似，</li><li>如果使用了 <code>@Path</code> 注解，那么就不能再使用 <code>@Url</code> 注解，即 <code>@Url</code> 注解和 <code>@Path</code> 注解存在互斥关系，否则抛出异常，</li><li>基于第2条的限制条件，<code>@Path</code> 注解仅能和HTTP请求方法注解中的 <code>endpoint</code> 配套使用，</li><li><code>@Path</code> 注解可以存在多个，但必须有与之对应的命名路径，否则抛出异常，</li><li>被 <code>@Path</code> 注解标记的参数的值不能包含路径遍历字符：<code>.</code> 、 <code>..</code> 、<code>%2e</code> 以及 <code>%2E</code>，</li></ol><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>前面我们学习了 <code>@Url</code> 和 <code>@Path</code> 请求参数注解的简单使用与注意事项，现在我们总结一下它俩各自的作用或者说它俩可以解决什么样的问题。</p><h3 id="url-1" tabindex="-1"><a class="header-anchor" href="#url-1" aria-hidden="true">#</a> @Url</h3><p>我们平常的工作中可能很少使用 <code>@Url</code> 注解：</p><ol><li>可能是因为我们的接口地址都可以写在HTTP请求方法注解中，</li><li>可能是因为我们还没有遇到使用 <code>@Url</code> 注解的场景，</li><li>还可能是因为我们不了解 <code>@Url</code> 注解的作用，</li></ol><p>但是我们不能小看这个注解，在某些方面这个注解的作用还是非常大的。</p><p>那么，<code>@Url</code> 注解到底有什么作用呢？或者说相对于HTTP请求方法注解，它有什么优势？可以解决什么问题？</p><p>不知道读者是否遇到过以下几个场景，比如：</p><ol><li>请求接口地址是由服务端返回的，</li><li>请求接口地址是由外部服务商提供的，不能遵循 <code>baseUrl</code> 的结合规则，</li><li>请求接口地址有多个版本，客户端需要做兼容时： <ol><li><code>v1/user/name</code></li><li><code>v2/user/name</code></li></ol></li></ol><p>从以上几个场景可以看出，请求地址大部分是不固定的，或者说是动态的，这时候HTTP请求注解中的静态请求路径已不再适用，那么以上几个场景中的问题就都可以使用 <code>@Url</code> 注解来解决了。</p><p><code>@Url</code> 注解非常适合动态请求路径的场景。</p><p>Retrofit 为我们提供了两种请求路径的方式：</p><ol><li>HTTP请求方法注解中的静态请求路径，</li><li><code>@Url</code> 注解的动态请求路径，</li></ol><p>由于是动态请求路径，所以 <code>@Url</code> 注解比较适合 <code>GET</code> 请求，或者简单的 <code>POST</code> 请求。</p><h3 id="path-1" tabindex="-1"><a class="header-anchor" href="#path-1" aria-hidden="true">#</a> @Path</h3><p><code>@Path</code> 注解在平常的工作中使用频率应该是非常高的，它非常适用于 RESTful 风格的 API 接口，它的作用就是替换HTTP请求注解静态路径段中的命名路径。</p><p>同时，它也为HTTP请求方法注解静态请求路径增强了部分动态特性。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文学习了 <code>@Url</code> 和 <code>@Path</code> 请求参数注解的简单使用与注意事项，以及各自的作用。这两个注解都参与了解析完整URL地址的逻辑，是非常重要的两个注解。</p><p>通过本文的学习，让我们在实际的工作中对这两个注解的使用更加的得心应手。</p><p>希望可以帮你更好的使用 Retrofit。</p><p>下篇 <code>@Header</code> 相关的注解更精彩，happy~</p>`,35);function v(h,b){const a=i("RouterLink");return t(),o("div",null,[u,s("p",null,[n("在上一篇文章 "),c(a,{to:"/SourceCodeAnalysis/Retrofit/7.annotation-part-1.html"},{default:p(()=>[n("请求方法与标记注解")]),_:1}),n(" 中我们学习了 Retrofit 中的HTTP请求方法注解和标记类型注解，那么本篇文章我们先学习 Retrofit 中的 "),r,n(" 和 "),k,n(" 请求参数注解。")]),m])}const f=e(d,[["render",v],["__file","8.annotation-part-2.html.vue"]]);export{f as default};

import{_ as e,Y as p,Z as t,$ as o,a0 as n,a1 as c,a2 as i,a3 as s,E as l}from"./framework-3d290349.js";const u="/book/assets/01-00-codeflow-4d8008a3.png",r="/book/assets/01-01-proxy-mind-c4da2fc8.png",d={},k=s('<h1 id="sword-为-kotlin-函数增加代理功能-二" tabindex="-1"><a class="header-anchor" href="#sword-为-kotlin-函数增加代理功能-二" aria-hidden="true">#</a> Sword - 为 Kotlin 函数增加代理功能(二)</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>Sword：一个可以给 Kotlin 函数增加代理的第三方库，基于 KCP 实现。</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2>',4),v=s(`<p>首先看下上篇文章最后没有记录的 <code>ClassBuilder</code>。</p><h2 id="classbuilder" tabindex="-1"><a class="header-anchor" href="#classbuilder" aria-hidden="true">#</a> ClassBuilder</h2><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> annotations<span class="token operator">:</span> List<span class="token operator">&lt;</span>FqName<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>
    <span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.sword.api.kt.Proxy&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">newMethod</span><span class="token punctuation">(</span>
    origin<span class="token operator">:</span> JvmDeclarationOrigin<span class="token punctuation">,</span>
    access<span class="token operator">:</span> Int<span class="token punctuation">,</span>
    name<span class="token operator">:</span> String<span class="token punctuation">,</span>
    desc<span class="token operator">:</span> String<span class="token punctuation">,</span>
    signature<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>
    exceptions<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> String<span class="token operator">&gt;</span><span class="token operator">?</span>
<span class="token punctuation">)</span><span class="token operator">:</span> MethodVisitor <span class="token punctuation">{</span>
    <span class="token keyword">val</span> newMethod <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">newMethod</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span>

    <span class="token keyword">val</span> function <span class="token operator">=</span> origin<span class="token punctuation">.</span>descriptor <span class="token keyword">as</span><span class="token operator">?</span> FunctionDescriptor <span class="token operator">?:</span> <span class="token keyword">return</span> newMethod

    <span class="token keyword">if</span> <span class="token punctuation">(</span>function<span class="token punctuation">.</span>isOperator <span class="token operator">||</span>
        function<span class="token punctuation">.</span>isInfix <span class="token operator">||</span>
        function<span class="token punctuation">.</span>isInline <span class="token operator">||</span>
        function<span class="token punctuation">.</span>isSuspend <span class="token operator">||</span>
        function<span class="token punctuation">.</span>isTailrec
       <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> newMethod
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span><span class="token function">none</span> <span class="token punctuation">{</span> function<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> newMethod
    <span class="token punctuation">}</span>

    <span class="token keyword">val</span> className <span class="token operator">=</span> delegate<span class="token punctuation">.</span>thisName

    messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
        CompilerMessageSeverity<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Sword className = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">className</span></span><span class="token string">, methodName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">)</span>

    <span class="token keyword">val</span> realClassName <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token function">SwordAdapter</span><span class="token punctuation">(</span>
        Opcodes<span class="token punctuation">.</span>ASM9<span class="token punctuation">,</span>
        newMethod<span class="token punctuation">,</span>
        realClassName<span class="token punctuation">,</span>
        access<span class="token punctuation">,</span>
        name<span class="token punctuation">,</span>
        desc
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>ClassBuilder</code> 中主要覆写 <code>newMethod</code> 函数拦截 Java 方法的生成：</p><ol><li>首先判断是否是函数描述符，否则直接返回，</li><li>若是操作符重载、中缀、内联、挂起以及尾递归函数，不予处理，直接返回，</li><li>函数若是不存在 <code>Proxy</code> 注解，不予处理，直接返回，</li><li>获取真实的类名，交予 <code>SwordAdapter</code> 处理。</li></ol><p>可以看出在 <code>ClassBuilder</code> 中主要是实现了一些校验逻辑，第 2 步中的过滤逻辑可增加配置参数提供给集成方在外部灵活配置。</p><p>接下来我们看下 <code>SwordAdapter</code> 是如何处理的吧。</p><h2 id="swordadapter" tabindex="-1"><a class="header-anchor" href="#swordadapter" aria-hidden="true">#</a> SwordAdapter</h2><p><code>SwordAdapter</code> 的逻辑较为复杂，笔者先描述下自己的实现思路，然后再按照思路一点点分析。</p><ol><li><p>首先通过 ASM 判断当前函数是否存在 <code>Proxy</code> 注解，若存在则解析出注解中的数据暂存起来，否则不予转换，</p></li><li><p>若存在<code>Proxy</code> 注解并解析出注解中的数据，则根据注解中的 <code>enable</code> 字段判断是否启用代理，若启用则进行转换，否则不予转换，</p></li><li><p>若进行转换，再判断注解中的 <code>handler</code> 字段是否为空字符串，若是空字符串则进行简单的转换，否则进行代理转换，</p></li><li><p>简单转换：根据函数返回类型判断</p><ol><li>无返回值类型返回 <code>void</code>，</li><li>基本数据类型返回：<code>-1</code>，<code>char</code> 类型返回 <code>48</code>，</li><li>引用类型返回 <code>null</code>。</li></ol></li><li><p>代理转换：替换<code>handler</code>字段中的全限定名，调用<code>InvocationHandler#invoke</code>函数。</p></li></ol><p>下面的流程图看起来可能更清楚一些：</p><p><img src="`+u+`" alt="code flow" loading="lazy"></p><h3 id="解析注解" tabindex="-1"><a class="header-anchor" href="#解析注解" aria-hidden="true">#</a> 解析注解</h3><p>首先定义一个 <code>Proxy</code> 注解数据实体类：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">internal</span> <span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">SwordParam</span><span class="token punctuation">(</span>
    <span class="token comment">/**
     * 是否有[Proxy]注解
     */</span>
    <span class="token keyword">var</span> hasProxyAnnotation<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     * 是否启用, 默认True
     */</span>
    <span class="token keyword">var</span> enable<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     * [InvocationHandler]实现类的全限定名, 实现类必须有无参构造方法
     *
     * e.g. com.example.ProxyTestInvocationHandler
     */</span>
    <span class="token keyword">var</span> handler<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
        <span class="token comment">// 与[Proxy]注解的参数名一一对应</span>
        <span class="token keyword">internal</span> <span class="token keyword">const</span> <span class="token keyword">val</span> PARAM_ENABLE <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;enable&quot;</span></span>
        <span class="token keyword">internal</span> <span class="token keyword">const</span> <span class="token keyword">val</span> PARAM_HANDLER <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;handler&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此实体类存储 <code>Proxy</code> 注解中解析出来的数据，下面就是解析 <code>Proxy</code> 注解了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 定义一些常量</span>
<span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> PROXY_KT_DESC <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Lcom/guodong/android/sword/api/kt/Proxy;&quot;</span></span>

    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> KT_INVOCATION_HANDLER_OWNER <span class="token operator">=</span>
    <span class="token string-literal singleline"><span class="token string">&quot;com/guodong/android/sword/api/kt/InvocationHandler&quot;</span></span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> INVOKE_METHOD <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;invoke&quot;</span></span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> INVOCATION_HANDLER_INVOKE_DESC <span class="token operator">=</span>
    <span class="token string-literal singleline"><span class="token string">&quot;(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;&quot;</span></span>

    <span class="token keyword">private</span> <span class="token keyword">val</span> proxyDesc <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>PROXY_KT_DESC<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 声明注解数据实体变量</span>
<span class="token keyword">private</span> <span class="token keyword">val</span> param <span class="token operator">=</span> <span class="token function">SwordParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 覆写\`visitAnnotation\`</span>
<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitAnnotation</span><span class="token punctuation">(</span>descriptor<span class="token operator">:</span> String<span class="token punctuation">,</span> visible<span class="token operator">:</span> Boolean<span class="token punctuation">)</span><span class="token operator">:</span> AnnotationVisitor <span class="token punctuation">{</span>
    <span class="token keyword">var</span> av <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> visible<span class="token punctuation">)</span>

    <span class="token comment">// 判断是否存在\`Proxy\`注解</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyDesc<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        param<span class="token punctuation">.</span>hasProxyAnnotation <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 解析\`Proxy\`注解</span>
            av <span class="token operator">=</span> <span class="token function">AnnotationAdapter</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> av<span class="token punctuation">,</span> param<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> av
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析注解数据主要覆写 <code>visitAnnotation</code> 函数，在此函数中首先判断是否存在 <code>Proxy</code> 注解，若存在则进行解析，否则不予处理。</p><p>解析逻辑就在下面代码的 <code>AnnotationAdapter</code> 中了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">AnnotationAdapter</span><span class="token punctuation">(</span>
    api<span class="token operator">:</span> Int<span class="token punctuation">,</span>
    annotationVisitor<span class="token operator">:</span> AnnotationVisitor<span class="token operator">?</span><span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> param<span class="token operator">:</span> SwordParam
<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">AnnotationVisitor</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> annotationVisitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visit</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">when</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SwordParam<span class="token punctuation">.</span>PARAM_ENABLE <span class="token operator">-&gt;</span> param<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token keyword">as</span> Boolean<span class="token punctuation">)</span>
            SwordParam<span class="token punctuation">.</span>PARAM_HANDLER <span class="token operator">-&gt;</span> param<span class="token punctuation">.</span>handler <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token keyword">as</span> String<span class="token punctuation">)</span>
            <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，解析逻辑也比较简单，在 <code>visit</code> 函数中：</p><ol><li>第一个参数 <code>name</code> 表示注解中参数的名称，第二参数 <code>value</code>表示注解中参数的值，</li><li>通过比对 <code>name</code> 参数的名称来解析注解中的数据并存储在实体中。</li></ol><p>至此解析 <code>Proxy</code> 注解完成，我们已经拿到注解中的数据，下面我们就可以开始转换了。</p><h3 id="转换分支" tabindex="-1"><a class="header-anchor" href="#转换分支" aria-hidden="true">#</a> 转换分支</h3><p>对函数代理功能的转换，笔者实现了两种转换分支：</p><ol><li><strong>简单转换</strong>：或者称为默认转换，就像 <code>switch</code> 有 <code>default</code> 分支一样，</li><li><strong>代理转换</strong>：真正的代理功能实现。</li></ol><p>转换逻辑在 <code>visitCode</code> 函数中处理，我们先看看转换分支的选择：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断是否有\`Proxy\`注解且是否启用代理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span>hasProxyAnnotation <span class="token operator">&amp;&amp;</span> param<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 织入一个\`booelan\`值：True</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ICONST_1<span class="token punctuation">)</span>
        <span class="token keyword">val</span> label <span class="token operator">=</span> <span class="token function">Label</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token comment">// 织入\`if\`判断语句</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitJumpInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>IFEQ<span class="token punctuation">,</span> label<span class="token punctuation">)</span>

        <span class="token comment">// 获取\`methodType\`</span>
        <span class="token keyword">val</span> methodType <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">getMethodType</span><span class="token punctuation">(</span>
            methodDescriptor
        <span class="token punctuation">)</span>
        
        <span class="token comment">// 获取\`returnType\`，函数的返回值类型</span>
        <span class="token keyword">val</span> returnType <span class="token operator">=</span> methodType<span class="token punctuation">.</span>returnType

        <span class="token keyword">val</span> handler <span class="token operator">=</span> param<span class="token punctuation">.</span>handler

        <span class="token comment">// 判断\`handler\`是否是空字符串</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 代理转换</span>
            <span class="token function">weaveHandler</span><span class="token punctuation">(</span>methodType<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 简单转换</span>
            <span class="token function">weaveDefaultValue</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitLabel</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>visitCode</code> 函数的前部分是一些判断处理：</p><ol><li>如果有<code>Proxy</code>注解且启用了代理，则通过 <code>ASM</code> 先织入 <code>if (true)</code> 条件判断语句，</li><li>接下来获取函数的 <code>methodType</code> 和 <code>returnType</code>，分别表示在 <code>ASM</code> 眼中的函数类型和返回值类型，</li><li>最后判断 <code>handler</code> 是否是空字符串来决定执行哪种转换分支。</li></ol><h3 id="简单转换" tabindex="-1"><a class="header-anchor" href="#简单转换" aria-hidden="true">#</a> 简单转换</h3><p>简单转换的实现是根据函数返回类型判断：</p><ol><li>无返回值类型返回 <code>void</code>，</li><li>基本数据类型返回：<code>-1</code>，<code>char</code> 类型返回 <code>48</code>，</li><li>引用类型返回 <code>null</code>。</li></ol><p>下面是简单转换的实现代码片段：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">weaveDefaultValue</span><span class="token punctuation">(</span>returnType<span class="token operator">:</span> Type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> sort <span class="token operator">=</span> returnType<span class="token punctuation">.</span>sort
    <span class="token keyword">when</span> <span class="token punctuation">{</span>
        sort <span class="token operator">==</span> Type<span class="token punctuation">.</span>VOID <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>RETURN<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        sort <span class="token operator">==</span> Type<span class="token punctuation">.</span>CHAR <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitIntInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>BIPUSH<span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>returnType<span class="token punctuation">.</span><span class="token function">getOpcode</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>IRETURN<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        sort <span class="token operator">&gt;=</span> Type<span class="token punctuation">.</span>BOOLEAN <span class="token operator">&amp;&amp;</span> sort <span class="token operator">&lt;=</span> Type<span class="token punctuation">.</span>INT <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ICONST_M1<span class="token punctuation">)</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>returnType<span class="token punctuation">.</span><span class="token function">getOpcode</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>IRETURN<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        sort <span class="token operator">==</span> Type<span class="token punctuation">.</span>LONG <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>LRETURN<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        sort <span class="token operator">==</span> Type<span class="token punctuation">.</span>FLOAT <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1f</span><span class="token punctuation">)</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>FRETURN<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        sort <span class="token operator">==</span> Type<span class="token punctuation">.</span>DOUBLE <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>DRETURN<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ACONST_NULL<span class="token punctuation">)</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ARETURN<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单转换的实现逻辑比较简单，笔者就不再分析了，接下来我们看看今天的主角：代理转换。</p><h3 id="代理转换" tabindex="-1"><a class="header-anchor" href="#代理转换" aria-hidden="true">#</a> 代理转换</h3><p>代理转换的实现逻辑较为复杂，以下几点是我们需要考虑的：</p><ol><li>原始函数是否是静态函数：非静态函数(不包括构造函数)的第零位参数始终是 <code>this</code>，</li><li>如何构建 <code>InvocationHandler</code> 实现类的实例，</li><li>如何获取 <code>InvocationHandler#invoke</code> 函数所需的参数，</li><li>如何调用 <code>InvocationHandler#invoke</code> 函数，</li><li>调用 <code>InvocationHandler#invoke</code> 函数后的结果如何返回给原始函数。</li></ol><p>脑图如下：</p><p><img src="`+r+`" alt="proxy mind" loading="lazy"></p><p>下面我们就根据上述几点依次分析下：</p><h4 id="_1-是否是静态函数" tabindex="-1"><a class="header-anchor" href="#_1-是否是静态函数" aria-hidden="true">#</a> 1.是否是静态函数</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> argumentTypes <span class="token operator">=</span> t<span class="token punctuation">.</span>argumentTypes
<span class="token keyword">val</span> argumentSize <span class="token operator">=</span> argumentTypes<span class="token punctuation">.</span>size

<span class="token keyword">val</span> isStaticMethod <span class="token operator">=</span> methodAccess <span class="token operator">and</span> Opcodes<span class="token punctuation">.</span>ACC_STATIC <span class="token operator">!=</span> <span class="token number">0</span>
<span class="token keyword">var</span> localSize <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isStaticMethod<span class="token punctuation">)</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span>
<span class="token keyword">val</span> firstSlot <span class="token operator">=</span> localSize
<span class="token keyword">for</span> <span class="token punctuation">(</span>argType <span class="token keyword">in</span> argumentTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    localSize <span class="token operator">+=</span> argType<span class="token punctuation">.</span>size
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先判断是否是静态函数，其中一个目的是为了找到函数第一个参数的起始位置，以及计算整个方法的 <code>locals</code> 大小，为后续存储 <code>InvocationHandler</code> 实现类实例做准备：</p><ul><li><code>firstSlot</code> 即为第一个参数的起始位置，后面会使用到，</li><li><code>localSize</code> 即为整个方法的 <code>lcoals</code> 大小，通过遍历函数参数得到。</li></ul><h4 id="_2-构建实现类实例" tabindex="-1"><a class="header-anchor" href="#_2-构建实现类实例" aria-hidden="true">#</a> 2.构建实现类实例</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> realHandler <span class="token operator">=</span> <span class="token function">covertToClassDescriptor</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitTypeInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>NEW<span class="token punctuation">,</span> realHandler<span class="token punctuation">)</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>DUP<span class="token punctuation">)</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>INVOKESPECIAL<span class="token punctuation">,</span> realHandler<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&lt;init&gt;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;()V&quot;</span></span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ASTORE<span class="token punctuation">,</span> localSize<span class="token punctuation">)</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ALOAD<span class="token punctuation">,</span> localSize<span class="token punctuation">)</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">covertToClassDescriptor</span><span class="token punctuation">(</span>className<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
    <span class="token keyword">return</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\\\.&quot;</span></span><span class="token punctuation">.</span><span class="token function">toRegex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;/&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>首先需要把 <code>handler</code> 字段中的实现类全限定名（<code>Full-Qualified Name</code>）转换成 <code>ASM</code> 里的 <code>InternalName</code>，比如：<code>com.guodong.android.TestInvocationHandler</code> 转换为 <code>com/guodong/android/TestInvocationHandler</code>，即把 <code>.</code> 替换成 <code>/</code>。</li><li>上述片段中的第 4 行代码通过调用实现类的无参构造方法来构建实例，这就是为什么实现类必须有无参构造方法的原因，</li><li>后面两行代码是把创建出来的实例存储在方法的 <code>locals</code> 上并再次加载出来以备后用。</li></ol><h4 id="_3-获取所需参数" tabindex="-1"><a class="header-anchor" href="#_3-获取所需参数" aria-hidden="true">#</a> 3.获取所需参数</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span>
<span class="token function">weaveInt</span><span class="token punctuation">(</span>argumentSize<span class="token punctuation">)</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitTypeInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ANEWARRAY<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;java/lang/Object&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>argumentTypes<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">weaveArgs</span><span class="token punctuation">(</span>argumentTypes<span class="token punctuation">,</span> argumentSize<span class="token punctuation">,</span> firstSlot<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>

<span class="token comment">// InvocationHandler</span>
<span class="token keyword">interface</span> InvocationHandler <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>className<span class="token operator">:</span> String<span class="token punctuation">,</span> methodName<span class="token operator">:</span> String<span class="token punctuation">,</span> args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Any<span class="token operator">?</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码片段的最后是 <code>InvocationHandler</code> 接口的声明，如上所示，<code>invoke</code> 函数需要 3 个参数，分别为：</p><ol><li>当前的类名，</li><li>当前的函数名，</li><li>当前函数声明参数的数组。</li></ol><p>下面分析下获取参数的逻辑：</p><ol><li>代码片段的前两行代码我们织入了前两个参数，</li><li>第 3 行代码我们织入参数数组的大小，</li><li>第 4 行代码构建参数数组实例，</li><li>最后面的 <code>if</code> 条件判断逻辑是把原始函数的参数放进数组内。</li></ol><h4 id="_4-调用-invoke-函数" tabindex="-1"><a class="header-anchor" href="#_4-调用-invoke-函数" aria-hidden="true">#</a> 4.调用 <code>invoke</code> 函数</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>
    Opcodes<span class="token punctuation">.</span>INVOKEINTERFACE<span class="token punctuation">,</span>
    KT_INVOCATION_HANDLER_OWNER<span class="token punctuation">,</span>
    INVOKE_METHOD<span class="token punctuation">,</span>
    INVOCATION_HANDLER_INVOKE_DESC<span class="token punctuation">,</span>
    <span class="token boolean">true</span> <span class="token comment">/* isInterface */</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>invoke</code> 函数比较简单，通过调用 <code>ASM</code> 的 <code>visitMethodInsn</code> 方法传入正确的参数即可。注意最后一个参数要为 <code>true</code>，因为我们调用的是一个接口方法。</p><h4 id="_5-invoke-函数的结果返回给原始函数" tabindex="-1"><a class="header-anchor" href="#_5-invoke-函数的结果返回给原始函数" aria-hidden="true">#</a> 5.<code>invoke </code>函数的结果返回给原始函数</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> returnTypeSort <span class="token operator">=</span> returnType<span class="token punctuation">.</span>sort
<span class="token keyword">when</span> <span class="token punctuation">{</span>
    returnTypeSort <span class="token operator">==</span> Type<span class="token punctuation">.</span>VOID <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>RETURN<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">isPrimitiveType</span><span class="token punctuation">(</span>returnTypeSort<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">weavePrimitiveReturn</span><span class="token punctuation">(</span>returnTypeSort<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> internalName <span class="token operator">=</span> returnType<span class="token punctuation">.</span>internalName
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitTypeInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>CHECKCAST<span class="token punctuation">,</span> internalName<span class="token punctuation">)</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ARETURN<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如前所示，<code>invoke</code> 函数的返回值是 <code>Any?</code> ，那么如何返回给原始函数呢？我们还是需要根据原始函数的返回值类型做判断：</p><ol><li>如果是 <code>voidd</code> 类型，则直接 <code>return</code>，</li><li>如果是基本数据类型，需要先强制类型转换为包装类型，再调用包装类型对应的 <code>xxxValue</code> 方法获取基本数据类型，最后再返回，</li><li>如果是引用类型，通过 <code>returnType</code> 获取返回值的 <code>InternalName</code>，然后进行强制类型转换，最后返回。</li></ol><p>至此，代理转换分析完毕，happy~</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在想实现某个功能的时候，我们可能会有好几种思路，如何在这好几种思路中选择一个进行实现，这其中考量与取舍的过程笔者觉得比较有趣。</p><p>本文记录了 <code>Sword</code> 的实现原理与源码分析，同时记录了笔者实现代码时的一些思路与思考，笔者个人认为这些思路与思考远比实现这个功能更有意义。</p><p>下篇再见，happy~</p>`,67);function m(b,y){const a=l("RouterLink");return p(),t("div",null,[k,o("p",null,[n("续接 "),c(a,{to:"/OpenSourceProject/Sword/00-sword.html"},{default:i(()=>[n("上篇")]),_:1}),n("，在上篇文章中笔者记录了搭建 Sword 的基础开发环境以及技术选型为：注解 + KCP + ASM。本文主要记录使用 ASM 的实现过程。")]),v])}const g=e(d,[["render",m],["__file","01-sword.html.vue"]]);export{g as default};

import{_ as n,Y as s,Z as a,a3 as e}from"./framework-3d290349.js";const p="/book/assets/2.proxy-59a89a65.jpg",t={},c=e('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>众所周知，<code>Retrofit</code> 使用动态代理技术大大简化了 http 请求的过程，我们只需定义 http 请求相关的接口与接口方法，把定义的接口的 Class 对象传入 <code>Retrofit#create()</code> 方法即可，然后我们就可以直接调用接口方法发起 http 请求，对于如何发起 http 请求，请求过程是怎样的，数据如何解析完全无感知，非常棒的设计。</p><p>那么动态代理技术就必须学习一下了。既然有动态代理，那么必然就有静态代理，我们先学习下静态代理吧。</p><h2 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式" aria-hidden="true">#</a> 代理模式</h2><p>代理模式在 Java 的设计模式中是比较常见的模式之一。代理模式比较简单，它是指客户端不直接或不能访问实际对象，而必须通过代理对象来间接访问实际对象。</p><p>在现实世界中，这种情况比较常见，比如我要买二手房，一般会先找个中介去和房东沟通，而我一般不直接和房东进行沟通；另外一个例子：小公司一般都没有专门的记账人员，会找一家代理记账的公司来为本公司记账。</p><p><img src="'+p+`" alt="proxy" loading="lazy"></p><h2 id="静态代理" tabindex="-1"><a class="header-anchor" href="#静态代理" aria-hidden="true">#</a> 静态代理</h2><p>静态代理是我们手动编码实现的，在代码编译期就已经确认并完成代理。</p><p>静态代理的实现有模板步骤可以遵循：</p><ol><li>首先定义一个接口并定义一个具体实现，</li><li>其次构建一个代理对象并实现上一步定义的接口，</li><li>最后将被代理的对象注入进代理对象中，然后在代理对象的方法内调用被代理对象对应的方法。</li></ol><p>通过以上三步模板步骤，我们就可以实现屏蔽被代理对象与客户端之间的直接联系。</p><p>下面我们以购买二手房为例来看看静态代理吧。</p><h5 id="_1-定义talk接口" tabindex="-1"><a class="header-anchor" href="#_1-定义talk接口" aria-hidden="true">#</a> 1.定义<code>Talk</code>接口</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Talk</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二手房交易就是买方与卖方之间通过中介进行沟通，所以我们定义一个 <code>Talk</code> 接口，接口内有讲话 <code>speak()</code> 和收听他人的讲话 <code>listen()</code> 两个方法。</p><h5 id="_2-买方实现-talk-接口" tabindex="-1"><a class="header-anchor" href="#_2-买方实现-talk-接口" aria-hidden="true">#</a> 2.买方实现 <code>Talk</code> 接口</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Buyer</span> <span class="token keyword">implements</span> <span class="token class-name">Talk</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;出价2000万, 你问他卖不卖&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;买方听到: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>买方实现 <code>Talk</code> 接口，并说 “出价2000万, 你问他卖不卖”，并等待卖方的回复。</p><h5 id="_3-卖方实现-talk-接口" tabindex="-1"><a class="header-anchor" href="#_3-卖方实现-talk-接口" aria-hidden="true">#</a> 3.卖方实现 <code>Talk</code> 接口</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Seller</span> <span class="token keyword">implements</span> <span class="token class-name">Talk</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;少于2001万不卖&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;卖方听到: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>卖方实现 <code>Talk</code> 接口，收到买方的问话，2000万就想买我的房子，太看不起我了，并回复 “少于2001万不卖”。</p><h5 id="_4-中介实现-talk-接口" tabindex="-1"><a class="header-anchor" href="#_4-中介实现-talk-接口" aria-hidden="true">#</a> 4.中介实现 <code>Talk</code> 接口</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Talk</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Talk</span> buyer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">Talk</span> buyer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>buyer <span class="token operator">=</span> buyer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> speak <span class="token operator">=</span> buyer<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> proxy <span class="token operator">=</span> <span class="token string">&quot;买方说：&quot;</span> <span class="token operator">+</span> speak<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;中介说: 您好，哥, 刚才买方出价2000万了, 这个价格差不多了&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buyer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>中介收到买方的出价后，并稍加修饰去询问卖方，等待卖方的回复，</li><li>中介收到卖方的回复后，没有修饰直接转给了买方。</li></ol><h5 id="_5-实际调用" tabindex="-1"><a class="header-anchor" href="#_5-实际调用" aria-hidden="true">#</a> 5.实际调用</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Talk</span> buyer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buyer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Talk</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>buyer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Talk</span> seller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Seller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> buyerSpeak <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    seller<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>buyerSpeak<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> sellerSpeak <span class="token operator">=</span> seller<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    proxy<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>sellerSpeak<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上述代码，可以看到以下输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>买方说：出价2000万, 你问他卖不卖
卖方听到: 中介说: 您好，哥, 刚才买方出价2000万了, 这个价格差不多了
买方听到: 少于2001万不卖
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从以上代码的输出结果可以看出，买方和卖方之间没有直接的沟通，都是通过中介在中间来回传话，当然现实世界不会如此简单，可能卖方也有中介，那就是买方和买方的中介沟通，然后中介和卖方的中介沟通，最后卖方的中介再和卖方沟通。</p><p>静态代理一般是定义接口，我们知道在接口中新增接口方法，所有的实现类都要实现新增的接口方法，所以静态代理的劣势很明显，不利于后续的维护，而且不够灵活，因此动态代理应运而生。</p><h2 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理" aria-hidden="true">#</a> 动态代理</h2><p>与静态代理相比，动态代理比较灵活。我们不需要编写代理对象的代码，即动态代理不处于编译期，而是处于运行时动态的创建代理对象。</p><p>动态代理的实现方式有很多种，常用的有 JDK 动态代理、CGLIB 动态代理等，由于 <code>Retrofit</code> 中使用的 JDK 动态代理，所以我们现在只学习 JDK 动态代理，其他动态代理的实现方式在学习完 <code>Retrofit</code> 后再了解下吧。</p><p>既然静态代理有模板步骤可以遵循，那么动态代理也是有模板步骤的：</p><ol><li>在静态代理中的接口和被代理对象实现不变，</li><li>构建一个调用处理器并实现 <code>InvocationHandler</code> 接口，</li><li>通过调用 <code>java.lang.reflect.Proxy</code> 的 <code>newProxyInstance()</code> 方法来动态创建代理对象，</li><li>最后在调用处理器的 <code>invoke()</code> 方法中处理代理逻辑。</li></ol><h3 id="invocationhandler" tabindex="-1"><a class="header-anchor" href="#invocationhandler" aria-hidden="true">#</a> <code>InvocationHandler</code></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 当你调用代理对象的方法的时候实际上会调用到这个方法
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>invoke</code> 方法有三个参数：</p><ol><li>proxy : 动态代理创建的代理对象，</li><li>method : 调用的代理对象方法，</li><li>args : 调用的代理对象方法的参数。</li></ol><p>动态代理创建的代理对象对于开发者无感知，所以 JDK 为开发者提供了一个 <code>InvocationHandler</code> 接口，这样当调用代理对象方法时，内部通过调用 <code>InvocationHandler</code> 的 <code>invoke</code> 接口方法，这样我们开发者就可以做一些逻辑处理了。</p><h3 id="proxy-newproxyinstance" tabindex="-1"><a class="header-anchor" href="#proxy-newproxyinstance" aria-hidden="true">#</a> <code>Proxy#newProxyInstance()</code></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span>
                                      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>
                                      <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>newProxyInstance()</code> 方法需要三个参数：</p><ol><li>loader : 类加载器，用于加载创建出来的代理对象，</li><li>interfaces ： 被代理对象实现的接口，</li><li>h: 调用处理器，即实现 <code>InvocationHandler</code> 接口的对象。</li></ol><p>接下来让我们使用动态代理改写前面的购买二手房示例吧。</p><h3 id="动态代理-1" tabindex="-1"><a class="header-anchor" href="#动态代理-1" aria-hidden="true">#</a> 动态代理</h3><p>首先之前定义的 <code>Talk</code> 接口和买卖双方的实现不变，我们直接定义调用处理器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">DynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token comment">// 被代理对象</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Talk</span> target<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span><span class="token class-name">Talk</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>

        <span class="token comment">// 获取方法名称</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 根据方法名称做不同的处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;speak&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 增加前缀 &#39;D&#39;</span>
            <span class="token class-name">String</span> busySpeak <span class="token operator">=</span> <span class="token string">&quot;D 买方说：&quot;</span> <span class="token operator">+</span> invoke<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>busySpeak<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">&quot;D 中介说: 您好，哥, 刚才买方出价2000万了, 这个价格差不多了&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;listen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 增加前缀 &#39;D&#39;</span>
            args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;D &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>首先实现 <code>InvocationHandler</code> 接口并在构造方法中注入被代理对象，</li><li>其次实现 <code>invoke</code> 接口方法，在 <code>invoke</code> 方法内处理逻辑，</li><li>获取此时代理对象被调用的方法名称，根据方法名称做不同的处理，</li><li>我们在 <code>invoke</code> 方法中讲的话前面都加了字符 &#39;D&#39; 来区分是静态代理还是动态代理。</li></ol><p>下面我们修改调用处的代码：</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>public static void main(String[] args) {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   Talk buyer = new Buyer();
</span><span class="token prefix unchanged"> </span><span class="token line">   Talk seller = new Seller();
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   // Talk proxy = new Proxy(buyer);
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   ClassLoader classLoader = buyer.getClass().getClassLoader();
</span><span class="token prefix inserted">+</span><span class="token line">   Class&lt;?&gt;[] interfaces = buyer.getClass().getInterfaces();
</span><span class="token prefix inserted">+</span><span class="token line">   DynamicProxy dynamicProxy = new DynamicProxy(buyer);
</span><span class="token prefix inserted">+</span><span class="token line">   Talk proxy = (Talk) java.lang.reflect.Proxy.newProxyInstance(classLoader, interfaces, dynamicProxy);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   String buyerSpeak = proxy.speak();
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   seller.listen(buyerSpeak);
</span><span class="token prefix unchanged"> </span><span class="token line">   String sellerSpeak = seller.speak();
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   proxy.listen(sellerSpeak);
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用处，我们注释掉之前静态代理创建代理对象的逻辑，增加创建动态代理对象的逻辑。</p><p>运行以上代码，可以看到以下输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>D 买方说：出价2000万, 你问他卖不卖
卖方听到: D 中介说: 您好，哥, 刚才买方出价2000万了, 这个价格差不多了
买方听到: D 少于2001万不卖
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从以上代码的输出结果看出，动态处理创建的代理对象确实生效了。</p><h2 id="总结与思考" tabindex="-1"><a class="header-anchor" href="#总结与思考" aria-hidden="true">#</a> 总结与思考</h2><ol><li>静态代理实现起来比较简单，且易于理解，但是后续维护成本较高，</li><li>动态代理实现起来比较复杂，需要掌握一些反射知识，学习曲线较为陡峭，但是它比较灵活，后续维护成本一般，</li></ol><p>静态代理和动态代理各有优劣，需要我们在实际编码过程中做好取舍，笔者个人比较喜爱静态代理，上手比较快，代码一目了然，当静态代理满足不了需求时，再考虑动态代理。</p><p>有了动态代理的前置知识，想必我们再学习 <code>Retrofit</code> 时就不会那么吃力了。</p><p>希望可以帮你更好的使用 <code>Retrofit</code> ，happy ~~</p>`,61),l=[c];function o(i,u){return s(),a("div",null,l)}const r=n(t,[["render",o],["__file","2.动态代理.html.vue"]]);export{r as default};

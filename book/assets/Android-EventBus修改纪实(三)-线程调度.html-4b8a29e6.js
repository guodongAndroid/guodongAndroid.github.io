import{_ as p,Y as o,Z as c,$ as s,a0 as n,a1 as e,a3 as t,E as i}from"./framework-3d290349.js";const l="/book/assets/202206031222025-79e607d0.png",u="/book/assets/202206031249615-60b38000.png",d={},k=s("h1",{id:"android-eventbus修改纪实-三",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#android-eventbus修改纪实-三","aria-hidden":"true"},"#"),n(" Android-EventBus修改纪实(三)")],-1),r=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),v={href:"https://juejin.cn/post/7104536485428199437",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"POSTING",-1),b=t(`<p>上一篇中未对线程模型的具体实现做分析，本篇文章分析下线程模型是如何做线程调度的。</p><p><strong>本篇文章只讨论发布普通事件的线程调度，粘性事件和必达事件的线程调度与普通事件略有不同。</strong></p><h2 id="线程模型" tabindex="-1"><a class="header-anchor" href="#线程模型" aria-hidden="true">#</a> 线程模型</h2><p>先简单回顾下上篇文章中关于线程模型的分析：</p><ul><li>POSTING：对于普通事件来说，事件发布与订阅方法将在同一个线程，这是该线程调度模型的本意</li><li>MAIN：在主线程来分发事件，根据是否在 Android 上使用，处理逻辑不同</li><li>MAIN_ORDER：在主线程依次分发事件</li><li>BACKGROUND：在后台线程来分发事件，根据是否在 Android 上使用，处理逻辑不同。使用单线程处理，尽量不要进行耗时操作以免阻塞后台线程</li><li>ASYNC：在异步线程来分发事件，使用线程池处理</li></ul><h2 id="事件分发器" tabindex="-1"><a class="header-anchor" href="#事件分发器" aria-hidden="true">#</a> 事件分发器</h2><p>EventBus 使用 <strong>事件分发器</strong> 对事件进行线程调度，除 <code>POSTING</code> 线程模型外，其他 4 种线程模型都有 <strong>事件分发器</strong> 的身影，<strong>事件分发器</strong> 主要在<code>postToSubscription</code> 方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postToSubscription</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription<span class="token punctuation">,</span> <span class="token class-name">Object</span> event<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>subscription<span class="token punctuation">.</span>subscriberMethod<span class="token punctuation">.</span>threadMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理POSTING</span>
        <span class="token keyword">case</span> <span class="token constant">POSTING</span><span class="token operator">:</span>
            <span class="token comment">// 直接分发事件</span>
            <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 处理MAIN</span>
        <span class="token keyword">case</span> <span class="token constant">MAIN</span><span class="token operator">:</span>
            <span class="token comment">// 是否是主线程，在非 Android 平台上时，isMainThread 也是 true</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 此时 mainThreadPoster != null，可以认为是在 Android 平台上</span>
                mainThreadPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理MAIN_ORDERED</span>
        <span class="token keyword">case</span> <span class="token constant">MAIN_ORDERED</span><span class="token operator">:</span>
            <span class="token comment">// 不管是否是主线程，总是先判断是否可以入队</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mainThreadPoster <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mainThreadPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// temporary: technically not correct as poster not decoupled from subscriber</span>
                <span class="token comment">// 否则直接分发事件</span>
                <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理BACKGROUND</span>
        <span class="token keyword">case</span> <span class="token constant">BACKGROUND</span><span class="token operator">:</span>
            <span class="token comment">// 如果是主线程则入队，backgroundPoster使用单个后台线程依次分发事件，订阅方法应尽快返回以免阻塞后台线程</span>
            <span class="token comment">// 在非 Android 平台上时，isMainThread 也是 true，即在非 Android 平台上时，始终在后台线程分发事件</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                backgroundPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 否则直接分发事件</span>
                <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理ASYNC</span>
        <span class="token keyword">case</span> <span class="token constant">ASYNC</span><span class="token operator">:</span>
            <span class="token comment">// 始终异步分发事件</span>
            asyncPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown thread mode: &quot;</span> <span class="token operator">+</span> subscription<span class="token punctuation">.</span>subscriberMethod<span class="token punctuation">.</span>threadMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>postToSubscription</code> 方法中可以看出各线程模型对应分别对应哪种 <strong>事件分发器</strong>：</p><ul><li>MAIN，MAIN_ORDERED：mainThreadPoster，<code>mainThreadPoster</code> 在Android 平台上的类型是 <code>HandlerPoster</code></li><li>BACKGROUND：backgroundPoster，<code>backgroundPoster</code> 的类型是 <code>BackgroundPoster</code></li><li>ASYNC：asyncPoster，<code>asyncPoster</code> 的类型是 <code>AsyncPoster</code></li></ul><p>以上事件发布器都实现了 <code>Poster</code> 接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Poster</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 待发布事件入队
     *
     * <span class="token keyword">@param</span> <span class="token parameter">subscription</span> 订阅者和订阅方法
     * <span class="token keyword">@param</span> <span class="token parameter">event</span>        待发布事件
     */</span>
    <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription<span class="token punctuation">,</span> <span class="token class-name">Object</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Poster</code> 接口是对事件分发器行为的抽象。</p><p>从 <code>Poster</code> 接口中唯一的接口方法名称 <code>enqueue</code> 来看，可以大概猜测到事件分发器的实现思想为：<strong>事件循环机制</strong>。</p><p>既然是 <strong>事件循环</strong>，接口方法名称又是 <code>enqueue</code>，猜测有队列相关的实现。</p><h2 id="待发布事件队列" tabindex="-1"><a class="header-anchor" href="#待发布事件队列" aria-hidden="true">#</a> 待发布事件队列</h2><p>每个事件分发器都有一个待发布事件队列，将待发布的事件存储在队列中，待发布事件队列是通过一种先进先出(FIFO)的单向链表实现的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PendingPostQueue</span> <span class="token punctuation">{</span>
    <span class="token comment">// 链表头部元素</span>
    <span class="token keyword">private</span> <span class="token class-name">PendingPost</span> head<span class="token punctuation">;</span> <span class="token comment">// 真链表</span>
    
    <span class="token comment">// 链表尾部元素</span>
    <span class="token keyword">private</span> <span class="token class-name">PendingPost</span> tail<span class="token punctuation">;</span> <span class="token comment">// 假链表，真链表尾部元素的引用</span>

    <span class="token comment">// 插入链表尾部</span>
    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">PendingPost</span> pendingPost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingPost <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;null cannot be enqueued&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 尾部元素不为空，认为链表中有数据</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 新的元素插入链表尾部</span>
            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> pendingPost<span class="token punctuation">;</span>
            
            <span class="token comment">// 更新尾部元素引用</span>
            tail <span class="token operator">=</span> pendingPost<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            head <span class="token operator">=</span> tail <span class="token operator">=</span> pendingPost<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Head present, but no tail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 通知所有等待的线程，用于\`poll(int)\`中\`wait()\`</span>
        <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 链表头部出队</span>
    <span class="token keyword">synchronized</span> <span class="token class-name">PendingPost</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PendingPost</span> pendingPost <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pendingPost<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 链表头部出队</span>
    <span class="token keyword">synchronized</span> <span class="token class-name">PendingPost</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxMillisToWait<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">wait</span><span class="token punctuation">(</span>maxMillisToWait<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>待发布事件队列中有两个字段，其中 <code>head</code> 是真链表，标识链表的头部元素，<code>tail</code> 是假链表，它是真链表尾部元素的引用，标识链表的尾部元素，它的作用是方便在链表尾部插入元素，元素数据中有 <code>next</code> 字段指向下一个元素，下图展示了元素入队时真假链表的变化情况：</p><p><strong>箭头向右表示元素入队</strong></p><p><img src="`+l+'" alt="20220603122155865" loading="lazy"></p><ol><li>初始时，<code>head</code> 和 <code>tail</code> 均为 <code>null</code>，</li><li>当第一个元素入队时，<code>head</code> 和 <code>tail</code> 均为 <code>event1</code>，</li><li>当第二个元素入队时，<code>event2</code> 插入 <code>head</code> 的尾部，<code>tail</code> 的引用更新为 <code>event2</code></li><li>当第三个元素入队时，<code>event3</code> 插入 <code>head</code> 的尾部，<code>tail</code> 的引用更新为 <code>event3</code></li></ol><p>当插入更多元素时依次类推，<code>head</code> 为链表的头部元素，<code>tail</code> 为链表的尾部元素。</p><p>元素出队的情况，正好与元素入队相反，下图展示了元素出队时真假链表的变化情况：</p><p><strong>箭头向左表示元素出队</strong></p><p><img src="'+u+`" alt="20220603124949865" loading="lazy"></p><ol><li>当链表中有三个元素时，出队一个元素，即取出 <code>head</code> 头部元素 <code>event1</code>，然后把 <code>head</code> 的 <code>next</code> 元素 <code>event2</code> 指向为 <code>head</code>，判断 <code>head</code> 是否为 <code>null</code>，如果是，则认为链表中没有数据，将 <code>head</code> 和 <code>tail</code> 均置为 <code>null</code>, 否则 <code>tail</code> 尾部元素不变</li><li>当链表中有两个元素时，出队一个元素，即取出 <code>head</code> 头部元素 <code>event2</code>，然后把 <code>head</code> 的 <code>next</code> 元素 <code>event3</code> 指向为 <code>head</code>，判断 <code>head</code> 是否为 <code>null</code>，如果是，则认为链表中没有数据，将 <code>head</code> 和 <code>tail</code> 均置为 <code>null</code>, 否则 <code>tail</code> 尾部元素不变</li><li>当链表中有一个元素时，出队一个元素，即取出 <code>head</code> 头部元素 <code>event3</code>，然后把 <code>head</code> 的 <code>next</code> 元素 <code>null</code> 指向为 <code>head</code>，判断 <code>head</code> 是否为 <code>null</code>，如果是，则认为链表中没有数据，将 <code>head</code> 和 <code>tail</code> 均置为 <code>null</code>, 否则 <code>tail</code> 尾部元素不变</li></ol><h2 id="待发布事件队列元素" tabindex="-1"><a class="header-anchor" href="#待发布事件队列元素" aria-hidden="true">#</a> 待发布事件队列元素</h2><p>待发布事件队列的元素是 <code>PendingPost</code>，它是单向链表结构，也是订阅者和订阅方法与事件的包装类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PendingPost</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PendingPost</span><span class="token punctuation">&gt;</span></span> pendingPostPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PendingPost</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span> event<span class="token punctuation">;</span>
    <span class="token class-name">Subscription</span> subscription<span class="token punctuation">;</span>
    <span class="token class-name">PendingPost</span> next<span class="token punctuation">;</span>

    <span class="token comment">// 私有构造方法</span>
    <span class="token keyword">private</span> <span class="token class-name">PendingPost</span><span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">,</span> <span class="token class-name">Subscription</span> subscription<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>event <span class="token operator">=</span> event<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subscription <span class="token operator">=</span> subscription<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取一个元素</span>
    <span class="token keyword">static</span> <span class="token class-name">PendingPost</span> <span class="token function">obtainPendingPost</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription<span class="token punctuation">,</span> <span class="token class-name">Object</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>pendingPostPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> pendingPostPool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">PendingPost</span> pendingPost <span class="token operator">=</span> pendingPostPool<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                pendingPost<span class="token punctuation">.</span>event <span class="token operator">=</span> event<span class="token punctuation">;</span>
                pendingPost<span class="token punctuation">.</span>subscription <span class="token operator">=</span> subscription<span class="token punctuation">;</span>
                pendingPost<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> pendingPost<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PendingPost</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 释放一个元素</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">releasePendingPost</span><span class="token punctuation">(</span><span class="token class-name">PendingPost</span> pendingPost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pendingPost<span class="token punctuation">.</span>event <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        pendingPost<span class="token punctuation">.</span>subscription <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        pendingPost<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>pendingPostPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Don&#39;t let the pool grow indefinitely</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingPostPool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pendingPostPool<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pendingPost<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),g=s("code",null,"PendingPost",-1),h=s("code",null,"Message",-1),y=s("code",null,"handler.obtainMessage()",-1),P=s("code",null,"Message.obtain()",-1),w=s("code",null,"Message#recycle()",-1),f=s("code",null,"PendingPost#releasePendingPost()",-1),_=s("code",null,"Message",-1),B=s("code",null,"PendingPost",-1),x={href:"https://juejin.cn/post/7104107150678917133",target:"_blank",rel:"noopener noreferrer"},A=s("code",null,"FindState",-1),M=t(`<h2 id="handlerposter" tabindex="-1"><a class="header-anchor" href="#handlerposter" aria-hidden="true">#</a> HandlerPoster</h2><p><code>HandlerPoster</code> 用于 <code>MAIN</code> 和 <code>MAIN_ORDERED</code> 线程模型，将事件分发到主线程处理。</p><p><code>HandlerPoster</code> 继承自 <code>Handler</code> 传入 <code>MainLooper</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerPoster</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token keyword">implements</span> <span class="token class-name">Poster</span> <span class="token punctuation">{</span>

    <span class="token comment">// 待发布事件队列</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PendingPostQueue</span> queue<span class="token punctuation">;</span>
    
    <span class="token comment">// 单轮最大处理时长，默认10毫秒</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxMillisInsideHandleMessage<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EventBus</span> eventBus<span class="token punctuation">;</span>
    
    <span class="token comment">// 是否活跃，可以理解为队列是否还有数据，并发修改由 this 守护</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> handlerActive<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">HandlerPoster</span><span class="token punctuation">(</span><span class="token class-name">EventBus</span> eventBus<span class="token punctuation">,</span> <span class="token class-name">Looper</span> looper<span class="token punctuation">,</span> <span class="token keyword">int</span> maxMillisInsideHandleMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>looper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus <span class="token operator">=</span> eventBus<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxMillisInsideHandleMessage <span class="token operator">=</span> maxMillisInsideHandleMessage<span class="token punctuation">;</span>
        queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PendingPostQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 事件入队</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription<span class="token punctuation">,</span> <span class="token class-name">Object</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取队列元素(事件包装类型)</span>
        <span class="token class-name">PendingPost</span> pendingPost <span class="token operator">=</span> <span class="token class-name">PendingPost</span><span class="token punctuation">.</span><span class="token function">obtainPendingPost</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 元素入队</span>
            queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>pendingPost<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 不活跃时，发送一个空的消息给当前Handler</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handlerActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                handlerActive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span><span class="token string">&quot;Could not send handler message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 分发事件</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> rescheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取处理此轮消息的开始时间</span>
            <span class="token keyword">long</span> started <span class="token operator">=</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 不加锁，快速取出头部元素，类似使用双重校验锁获取单例</span>
                <span class="token class-name">PendingPost</span> pendingPost <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingPost <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果为空再加锁获取头部元素</span>
                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// Check again, this time in synchronized</span>
                        pendingPost <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingPost <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 还是为空，重置活跃状态，退出循环</span>
                            handlerActive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                            <span class="token keyword">return</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                
                <span class="token comment">// 分发事件，调用订阅方法</span>
                eventBus<span class="token punctuation">.</span><span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>pendingPost<span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token comment">// 每次分发事件后都判断本轮事件分发耗时是否超过单轮最大处理时长，避免 while 死循环阻塞主线程</span>
                <span class="token keyword">long</span> timeInMethod <span class="token operator">=</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> started<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>timeInMethod <span class="token operator">&gt;=</span> maxMillisInsideHandleMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 超过单轮最大处理时长，重新发送一个空的消息给当前Handler等待调度</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span><span class="token string">&quot;Could not send handler message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    rescheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            handlerActive <span class="token operator">=</span> rescheduled<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>HandlerPoster</code> 实现 <code>Poster</code> 接口中的 <code>enqueue</code> 方法用于事件入队，在 <code>handleMessage</code> 方法中调用 <code>EventBus#invokeSubscriber</code> 方法传入待发布事件队列元素分发事件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span><span class="token class-name">PendingPost</span> pendingPost<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> event <span class="token operator">=</span> pendingPost<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
    <span class="token class-name">Subscription</span> subscription <span class="token operator">=</span> pendingPost<span class="token punctuation">.</span>subscription<span class="token punctuation">;</span>
    
    <span class="token comment">// 此处回收元素</span>
    <span class="token class-name">PendingPost</span><span class="token punctuation">.</span><span class="token function">releasePendingPost</span><span class="token punctuation">(</span>pendingPost<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 判断订阅关系是否活跃</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscription<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 反射调用订阅方法</span>
        <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>HandlerPoster</code> 为避免阻塞主线程，默认单轮事件分发最多执行 <strong>10 毫秒</strong>，即 10 毫秒内可以分发多个事件，多个订阅方法的执行耗时之和超时 10 毫秒后，就会停止本轮事件分发，重新发送一个空消息给 Handler 等待执行下轮事件分发。这里的处理思路，我们可以借鉴。</p><h2 id="backgroundposter" tabindex="-1"><a class="header-anchor" href="#backgroundposter" aria-hidden="true">#</a> BackgroundPoster</h2><p><code>BackgroundPoster</code> 用于 <code>BACKGROUND</code> 线程模型，将事件分发到后台线程。</p><p><code>BackgroundPoster</code> 实现了 <code>Runnable</code> 接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BackgroundPoster</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> <span class="token class-name">Poster</span> <span class="token punctuation">{</span>

    <span class="token comment">// 待发布事件队列</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PendingPostQueue</span> queue<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EventBus</span> eventBus<span class="token punctuation">;</span>

    <span class="token comment">// 是否活跃，可以理解为队列是否还有数据，volatile 禁止重排序，保证多线程可见性</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> executorRunning<span class="token punctuation">;</span>

    <span class="token class-name">BackgroundPoster</span><span class="token punctuation">(</span><span class="token class-name">EventBus</span> eventBus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus <span class="token operator">=</span> eventBus<span class="token punctuation">;</span>
        queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PendingPostQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 事件入队</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription<span class="token punctuation">,</span> <span class="token class-name">Object</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token comment">// 获取队列元素(事件包装类型)</span>
        <span class="token class-name">PendingPost</span> pendingPost <span class="token operator">=</span> <span class="token class-name">PendingPost</span><span class="token punctuation">.</span><span class="token function">obtainPendingPost</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
            <span class="token comment">// 元素入队</span>
            queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>pendingPost<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 不活跃时，由线程池执行此 Runnable</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>executorRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                executorRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                eventBus<span class="token punctuation">.</span><span class="token function">getExecutorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 事件分发</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 最长等待1000毫秒，取出头部元素</span>
                    <span class="token class-name">PendingPost</span> pendingPost <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingPost <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 如果为空再加锁获取头部元素</span>
                        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// Check again, this time in synchronized</span>
                            pendingPost <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingPost <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token comment">// 还是为空，重置活跃状态，退出循环</span>
                                executorRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                                <span class="token keyword">return</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    
                    <span class="token comment">// 分发事件，调用订阅方法</span>
                    eventBus<span class="token punctuation">.</span><span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>pendingPost<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                eventBus<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">WARNING</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; was interruppted&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 忽略中断事件</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 此时已退出 while 循环，即认为待发布事件队列为空</span>
            executorRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BackgroundPoster</code> 同样实现了 <code>Poster</code> 接口中的 <code>enqueue</code> 方法用于事件入队，不过 <code>BackgroundPoster</code> 使用线程池进行事件分发，所以在 <code>run</code> 方法中调用 <code>EventBus#invokeSubscriber</code> 方法传入待发布事件队列元素分发事件。</p><p><code>BackgroundPoster</code> 在处理时间分发时，第一次获取元素时调用了 <code>poll(int)</code> 方法，如果队列为空，最长等待1000毫秒后再次取头部元素，为何要这样实现？</p><p>这里笔者猜测是想提高事件分发效率与线程利用率，因为 <code>BackgroundPoster</code> 是在子线程中分发事件，如果队列为空，可以接收最长等待1000毫秒后再次取头部元素，减小在第二次加锁取头部元素还为空的几率，及减小线程切换导致的资源开销，充分利用线程资源，提高事件分发效率。</p><p><code>BackgroundPoster</code> 默认使用 EventBus 中的线程池 <code>CachedThreadPool</code>，<strong>在事件分发时，<code>BackgroundPoster</code> 忽略了 <code>InterruptedException</code> ，即没有响应线程中断，如果我们使用自定义的线程池，我们在外边关闭线程池后，这可能导致事件分发还在继续。</strong></p><p>最后，<code>BACKGROUND</code> 线程模型描述中说使用单线程进行事件分发，为何在 <code>BackgroundPoster</code> 中却是使用的线程池呢？</p><p>其实这个问题我们很容易就解答了。因为在 <code>BackgroundPoster</code> 中使用了 <code>executorRunning</code> 变量，这个变量保证执行单轮事件分发时，都使用线程池中的一个线程，单轮事件分发完成后，新的一轮事件分发可能就使用其他的线程了。</p><h2 id="asyncposter" tabindex="-1"><a class="header-anchor" href="#asyncposter" aria-hidden="true">#</a> AsyncPoster</h2><p><code>AsyncPoster</code> 用于 <code>ASYNC</code> 线程模型，将事件分发到异步线程。</p><p><code>AsyncPoster</code> 实现了 <code>Runnable</code> 和 <code>Poster</code> 接口，使用线程池实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AsyncPoster</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> <span class="token class-name">Poster</span> <span class="token punctuation">{</span>

    <span class="token comment">// 待发布事件队列</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PendingPostQueue</span> queue<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EventBus</span> eventBus<span class="token punctuation">;</span>

    <span class="token class-name">AsyncPoster</span><span class="token punctuation">(</span><span class="token class-name">EventBus</span> eventBus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventBus <span class="token operator">=</span> eventBus<span class="token punctuation">;</span>
        queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PendingPostQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 事件入队</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription<span class="token punctuation">,</span> <span class="token class-name">Object</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PendingPost</span> pendingPost <span class="token operator">=</span> <span class="token class-name">PendingPost</span><span class="token punctuation">.</span><span class="token function">obtainPendingPost</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>pendingPost<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 由线程池执行此 Runnable</span>
        eventBus<span class="token punctuation">.</span><span class="token function">getExecutorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 事件分发</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PendingPost</span> pendingPost <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pendingPost <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;No pending post available&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        eventBus<span class="token punctuation">.</span><span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>pendingPost<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AsyncPoster</code> 的实现比较简单，调用 <code>enqueue</code> 方法将事件入队并交由线程池进行事件分发，<code>run</code> 方法处理事件分发。</p><p><code>AsyncPoster</code> 默认使用 EventBus 中的线程池 <code>CachedThreadPool</code>，<code>CachedThreadPool</code> 没有核心线程，允许创建 <code>Integer.MAX_VALUE</code> 个工作线程且线程空闲时的存活时长为 60 秒，如果发布多个耗时较短的事件或多个耗时较长的时间，都会导致创建多个工作线程而浪费资源。</p><p>至此，EventBus 的线程调度分析完成。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文对 EventBus 的线程调度进行了分析，最后我们做下总结：</p><h3 id="pendingpostqueue" tabindex="-1"><a class="header-anchor" href="#pendingpostqueue" aria-hidden="true">#</a> PendingPostQueue</h3><p>在 <code>PendingPostQueue</code> 中，我们学到了如何使用单链表实现先进先出(FIFO)队列。</p><h3 id="pendingpost" tabindex="-1"><a class="header-anchor" href="#pendingpost" aria-hidden="true">#</a> PendingPost</h3><p>在 <code>PendingPost</code> 中，我们学到了「享元模式」的使用以及如何定义单链表数据结构。</p><h3 id="handlerposter-1" tabindex="-1"><a class="header-anchor" href="#handlerposter-1" aria-hidden="true">#</a> HandlerPoster</h3><p>在 <code>HandlerPoster</code> 中判断单轮事件分发最大处理时长机制，及时让出主线程的执行权，避免阻塞主线程；不过这个机制适用于耗时短的订阅方法，如果订阅方法耗时较长，一样会阻塞主线程。</p><h3 id="backgroundposter-1" tabindex="-1"><a class="header-anchor" href="#backgroundposter-1" aria-hidden="true">#</a> BackgroundPoster</h3><p>在 <code>BackgroundPoster</code> 中调用 <code>poll(int)</code> 提高事件分发效率和线程利用率，不过 <code>BackgroundPoster</code> 忽略了线程中断异常，使用自定义线程池时需要注意这里，最后我们解答了 <code>BACKGROUND</code> 线程模型描述中说使用单线程进行事件分发，而 <code>BackgroundPoster</code> 却是使用的线程池问题。</p><h3 id="asyncposter-1" tabindex="-1"><a class="header-anchor" href="#asyncposter-1" aria-hidden="true">#</a> AsyncPoster</h3><p><code>AsyncPoster</code> 比较简单，一般简单的地方反而意味着是比较危险的，我们通常会看不到它的危险性，因为我们认为它足够简单。</p><h3 id="poster" tabindex="-1"><a class="header-anchor" href="#poster" aria-hidden="true">#</a> Poster</h3><p><code>Poster</code> 说一下吧，设计框架时尽量使用接口或抽象类。</p><p>最后，还是那句话：<strong>无论使用哪种线程模型，在订阅方法中都应该尽量避免进行耗时操作。</strong></p><p>happy~，希望可以帮你更好的使用 EventBus</p>`,40);function q(E,S){const a=i("ExternalLinkIcon");return o(),c("div",null,[k,r,s("p",null,[n("在上一篇 "),s("a",v,[n("Android-EventBus修改纪实(二)"),e(a)]),n(" 中笔者简单分析了 EventBus 提供的 5 种线程模型的作用及各模型的使用场景与注意事项，特别是在 "),m,n(" 线程模型下，要谨慎的使用黏性事件和必达事件。")]),b,s("p",null,[n("看了 "),g,n(" 的源码，笔者想到了 Android 中 "),h,n(" 的实现，我们在 Android 中使用 Handler 发消息时，是不是也经常使用 "),y,n(" 或者使用 "),P,n(" 去获取一个 Message 的实例，Handler 使用完 Message 后会自动调用 "),w,n(" 方法回收利用这个 Message 实例，正好对应 "),f,n(" 方法。"),_,n(" 使用了「享元模式」达到循环利用对象，避免重复创建的目的，看来 "),B,n(" 也是使用了「享元模式」，在第一篇 "),s("a",x,[n("Android-EventBus修改纪实"),e(a)]),n(" 中我们也提到 "),A,n(" 也是使用了「享元模式」。")]),M])}const N=p(d,[["render",q],["__file","Android-EventBus修改纪实(三)-线程调度.html.vue"]]);export{N as default};

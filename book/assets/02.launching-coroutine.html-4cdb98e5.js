import{_ as t,Y as e,Z as o,$ as n,a0 as s,a1 as p,a3 as c,E as i}from"./framework-3d290349.js";const l={},r=c(`<h1 id="启动协程" tabindex="-1"><a class="header-anchor" href="#启动协程" aria-hidden="true">#</a> 启动协程</h1><p>协程有几个概念，您必须学习才能理解它们的内部工作。在深入研究这些概念之前，让我们尝试启动一些协程，以便我们可以使用手头的代码片段来分析这些概念。</p><p>查看本章中的代码<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>，请使用 IntelliJ 打开本章的启动项目并选择 Open...，然后导航到 getting-started-with-coroutines/projects/starter 文件夹，选择 getting_started_with_coroutines 项目。</p><p>当项目打开时，找到并打开 Main.kt。在 Main.kt 中，您将看到以下代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
        GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string"> printed on thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">threadName</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您启动的第一个协程很好理解：您将启动一万个协程！现在，启动一万个线程对于计算机来说有点无趣，因为大多数程序都会得到 OutOfMemoryException。但由于协程非常轻量级，您可以启动大量协程，而不会影响性能。</p><p>如果你运行上诉程序，你应该会看到很多文本输出，每一行都说明它正在打印哪个数字以及在哪个线程上打印。</p><p>在上面的代码段中有一些重要的事情需要注意。</p><p>首先，在启动协程时，您必须提供 CoroutineScope，因为它们是不真正关心其起点生命周期的后台机制。</p><p>如果程序在协程体完成之前结束会发生什么呢？ 在这种情况下，您使用的是 GlobalScope，它明确表明协程的生命周期与应用程序的生命周期一致。因此，您还需要在 main 函数结束处调用 Thread.sleep(1000) 来暂停当前线程。</p><p>其次，launch 代码块中代码代表的是协程体，它作为参数传递给 launch，其中 launch 称为协程构建器。这些特殊的函数，可以根据您提供的配置构建运行您代码的协程，我们稍后再分析它们。</p><p>这是对您所写代码的基本解释，但这些解释性概念远比代码更复杂。在分析 CoroutineScope 是什么以及它是如何组合在一起的之前，让我们深入了解协程构建器。</p><hr class="footnotes-sep">`,13),u={class:"footnotes"},d={class:"footnotes-list"},k={id:"footnote1",class:"footnote-item"},h={href:"https://github.com/raywenderlich/kco-materials/tree/editions/3.0",target:"_blank",rel:"noopener noreferrer"},f=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function m(_,v){const a=i("ExternalLinkIcon");return e(),o("div",null,[r,n("section",u,[n("ol",d,[n("li",k,[n("p",null,[n("a",h,[s("本书源码"),p(a)]),s(),f])])])])])}const g=t(l,[["render",m],["__file","02.launching-coroutine.html.vue"]]);export{g as default};

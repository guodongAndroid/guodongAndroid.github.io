import{_ as p,Y as e,Z as t,$ as s,a0 as n,a1 as o,a2 as c,a3 as l,E as i}from"./framework-3d290349.js";const u="/book/assets/4.type-a9360483.jpg",r={},k=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),d=s("code",null,"Retrofit",-1),m=s("code",null,"Method",-1),v=s("code",null,"Method",-1),y=l(`<p>在学习 <code>Method</code> 之前，我们先学习下 <code>Type</code> 相关的内容。</p><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> Type</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Type</code> 类是 Java 反射中重要的组成部分。根据其注释描述：<code>Type</code>是 Java 中所有类型的通用超接口。这些包括原始类型、参数化类型、数组类型、类型变量和基本类型。</p><p>下图是与 <code>Type</code> 相关的类图：</p><p><img src="`+u+`" alt="Type" loading="lazy"></p><p>上图中 <code>Type</code> 的子类与 <code>Type</code> 注释中的描述基本一致：</p><ol><li>原始类型、基本类型对应 <code>Class</code>，表示 Java 类、数组，8种基本类型，</li><li>数组类型对应 <code>GenericArrayType</code>，表示参数化类型或者类型变量的数组，比如：<code>List&lt;String&gt;[]</code> 和 <code>T[]</code> 等，</li><li>参数化类型对应 <code>ParameterizedType</code>，表示参数化类型的类，比如：<code>Class&lt;T&gt;</code></li><li>类型变量对应 <code>TypeVariable</code>，一般表示泛型变量，</li><li>通配符类型对应 <code>WildcardType</code>，表示泛型通配符，其没有在 <code>Type</code> 注释中描述。</li></ol><h2 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h2><p><code>Class</code> 的确实现了 <code>Type</code> 接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有多种方式可以获取 <code>Class</code> ，比如以下几种方式：</p><ul><li><code>Class&lt;Integer&gt; integerClass = int.class;</code></li><li><code>Class&lt;? extends Integer&gt; numberClass = number.getClass();</code></li><li><code>Class&lt;?&gt; strClass = Class.forName(&quot;java.lang.String&quot;);</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numberClass <span class="token operator">=</span> number<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numberClass<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码调用 <code>Type#getTypeName()</code> 方法，输出内容如下：<code>java.lang.Integer</code>。</p><h2 id="genericarraytype" tabindex="-1"><a class="header-anchor" href="#genericarraytype" aria-hidden="true">#</a> GenericArrayType</h2><p><code>GenericArrayType</code> 表示参数化类型或者类型变量的数组，比如：<code>List&lt;String&gt;[]</code> 和 <code>T[]</code> 等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GenericArrayType</span> <span class="token keyword">extends</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>
    
    <span class="token class-name">Type</span> <span class="token function">getGenericComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GenericArrayType</code> 中仅有一个 <code>getGenericComponentType</code> 方法，方法返回数据元素的类型，比如：<code>List&lt;String&gt;[]</code> 返回 <code>List&lt;String&gt;</code>。</p><p>下面是测试代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">testGenericArrayType</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ia<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sa<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> lsa<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;testGenericArrayType&quot;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getGenericParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> type <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">GenericArrayType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Type</span> componentType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">GenericArrayType</span><span class="token punctuation">)</span> type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGenericComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>componentType<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>componentType<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码中我们定义了一个 <code>testGenericArrayType</code> 方法，方法有四个参数，参数都是数组类型，接下来我们在 <code>main</code> 方法中通过反射获取 <code>Method</code>，再通过<code>getGenericParameterTypes</code> 获取方法的参数类型数组，我们遍历方法参数类型数组，输出类型名称和类名称，并判断是否是 <code>GenericArrayType</code>，如果是 <code>GenericArrayType</code> 类型再通过 <code>getGenericComponentType</code> 方法获取它的 <code>componentType</code>，最后输出 <code>componentType</code> 的类型名称和类名称。</p><p>以上代码输出结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>int<span class="token punctuation">[</span><span class="token punctuation">]</span>
java.lang.Class
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
java.lang.String<span class="token punctuation">[</span><span class="token punctuation">]</span>
java.lang.Class
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
java.util.List<span class="token operator">&lt;</span>java.lang.String<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl
java.util.List<span class="token operator">&lt;</span>java.lang.String<span class="token operator">&gt;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
T<span class="token punctuation">[</span><span class="token punctuation">]</span>
sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl
T
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的输出结果可以看：</p><ol><li><code>int[]</code> 和 <code>String[]</code> 不是 <code>GenericArrayType</code> 类型，而是 <code>Class</code> 类型，因为他俩不属于参数化类型和类型变量，</li><li>后面的两个参数都是 <code>GenericArrayType</code> 类型，而 <code>getGenericComponentType</code> 方法获取的是 <code>[]</code> 前的类型，如果是多维数组，那么它获取的是最后一个 <code>[]</code> 之前的类型，比如：<code>List&lt;String&gt;[][][]</code>，调用 <code>getGenericComponentType</code> 方法返回 <code>List&lt;String&gt;[][]</code>。</li></ol><p>我们修改下 <code>testGenericArrayType</code> 方法：<code>List&lt;String&gt;[]</code> 修改为 <code>List&lt;String&gt;[][][]</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">testGenericArrayType</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ia<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sa<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lsa<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ta<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>java.util.List<span class="token operator">&lt;</span>java.lang.String<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl
java.util.List<span class="token operator">&lt;</span>java.lang.String<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parameterizedtype" tabindex="-1"><a class="header-anchor" href="#parameterizedtype" aria-hidden="true">#</a> ParameterizedType</h2><p><code>ParameterizedType</code> 表示参数化类型的类，比如：<code>Class&lt;T&gt;</code> 等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ParameterizedType</span> <span class="token keyword">extends</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>
    
    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Type</span> <span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Type</span> <span class="token function">getOwnerType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ParameterizedType</code> 接口有三个方法：</p><ol><li><code>getActualTypeArguments</code> 方法：参数化类型中的参数实际类型，比如：<code>Class&lt;String&gt;</code> 中的 <code>String</code>，</li><li><code>getRawType</code> 方法：参数化类型中的原始类型，比如：<code>Class&lt;String&gt;</code> 中的 <code>Class</code>，</li><li><code>getOwnerType</code> 方法：嵌套参数化类型中的上层类型，根据方法注释描述：对于 <code>O&lt;T&gt;.I&lt;S&gt;</code> 中的 <code>I&lt;S&gt;</code> 来说，它的 <code>ownerType</code> 是 <code>O&lt;T&gt;</code>，而 <code>O&lt;T&gt;</code> 是顶层类型，它没有 <code>ownerType</code>，返回 null。</li></ol><p>下面我们看看测试代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>guodong<span class="token punctuation">.</span>android<span class="token punctuation">.</span>retrofit</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">testParameterizedType</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;testParameterizedType&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getGenericParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> type <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ParameterizedType</span> parameterizedType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> type<span class="token punctuation">;</span>
                <span class="token class-name">Type</span> ownerType <span class="token operator">=</span> parameterizedType<span class="token punctuation">.</span><span class="token function">getOwnerType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Type</span> rawType <span class="token operator">=</span> parameterizedType<span class="token punctuation">.</span><span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> parameterizedType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ownerType = &quot;</span> <span class="token operator">+</span> ownerType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rawType = &quot;</span> <span class="token operator">+</span> rawType<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;actualTypeArguments = &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>actualTypeArguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们定义了一个 <code>testParameterizedType</code> 方法，它仅有一个 <code>Class&lt;T&gt;</code> 类型的参数，接下来我们在 <code>main</code> 方法中通过反射获取 <code>Method</code>，再通过<code>getGenericParameterTypes</code> 获取方法的参数类型数组，我们遍历方法参数类型数组，输出类型名称和类名称，并判断是否是 <code>ParameterizedType</code>，如果是 <code>ParameterizedType</code> 类型，再获取它的 <code>ownerType</code>、<code>rawType</code> 和 <code>actualTypeArguments</code>，并输出。</p><p>上述代码输出结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>java.lang.Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>
sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl
ownerType <span class="token operator">=</span> null
rawType <span class="token operator">=</span> class java.lang.Class
actualTypeArguments <span class="token operator">=</span> <span class="token punctuation">[</span>T<span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的输出结果可以看出：</p><ol><li>对于 <code>Class&lt;T&gt;</code> 来说，它是顶层类型，它没有 <code>ownerType</code>，所以 <code>ownerType</code> 为 null，</li><li>它的原始类型 <code>rawType</code> 是 <code>java.lang.Class</code>，</li><li>它的参数实际类型是：<code>T</code>。</li></ol><h2 id="typevariable" tabindex="-1"><a class="header-anchor" href="#typevariable" aria-hidden="true">#</a> TypeVariable</h2><p><code>TypeVariable</code> 一般表示泛型变量，在 Java 中有三个地方可以声明类型变量：</p><ol><li>Class，比如：<code>User&lt;T&gt;</code>，</li><li>Constructor，比如： <code>public &lt;S&gt; User(S s) {}</code>，</li><li>Method，比如：<code>public &lt;F, R&gt; R convert(F f) {}</code>。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TypeVariable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">GenericDeclaration</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Type</span><span class="token punctuation">,</span> <span class="token class-name">AnnotatedElement</span> <span class="token punctuation">{</span>
    
    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">D</span> <span class="token function">getGenericDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">AnnotatedType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAnnotatedBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TypeVariable</code> 接口有四个方法：</p><ol><li><code>getBounds</code> 方法：获取泛型变量的上限，可以使用 <code>&amp;</code> 符号指定多个上限，所以此方法返回的是类型数组，如果没有显式指定上限，默认上限为 <code>Object</code>，</li><li><code>getGenericDeclaration</code> 方法：获取声明泛型变量的类型：是 Class 还是 Constructor，或者是 Method，</li><li><code>getName</code> 方法：获取声明泛型变量时的变量名称，如：<code>Class&lt;T&gt;</code> 中 <code>T</code>，</li><li><code>getAnnotatedBounds</code> 方法：此方法是 Java 1.8 添加的，获取声明泛型变量上限上的注解数组，数组内的顺序按注解声明顺序。</li></ol><p>下面还是测试代码，我们就以 Class 为例吧：</p><p>首先声明 <code>AnnotationTest</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE_USE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AnnotationTest</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>必须为 <code>RUNTIME</code> 运行时注解，</li><li>必须作用在 <code>TYPE_USE</code> 元素上。</li></ol><p>修改 <code>Test </code> 类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token annotation punctuation">@AnnotationTest</span><span class="token punctuation">(</span><span class="token string">&quot;Closeable&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Closeable</span> <span class="token operator">&amp;</span> <span class="token annotation punctuation">@AnnotationTest</span><span class="token punctuation">(</span><span class="token string">&quot;Runnable&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Runnable</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">TypeVariable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token class-name">Test</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> typeVariables <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getTypeParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TypeVariable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token class-name">Test</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typeVariable <span class="token operator">:</span> typeVariables<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;typeName = &quot;</span> <span class="token operator">+</span> typeVariable<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name = &quot;</span> <span class="token operator">+</span> typeVariable<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;genericDeclaration = &quot;</span> <span class="token operator">+</span> typeVariable<span class="token punctuation">.</span><span class="token function">getGenericDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bounds <span class="token operator">=</span> typeVariable<span class="token punctuation">.</span><span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> bound <span class="token operator">:</span> bounds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;boundTypeName = &quot;</span> <span class="token operator">+</span> bound<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">AnnotatedType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotatedBounds <span class="token operator">=</span> typeVariable<span class="token punctuation">.</span><span class="token function">getAnnotatedBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AnnotatedType</span> annotatedBound <span class="token operator">:</span> annotatedBounds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;annotateTypeName = &quot;</span> <span class="token operator">+</span> annotatedBound<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> annotatedBound<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> declaredAnnotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;declaredAnnotation = &quot;</span> <span class="token operator">+</span> declaredAnnotation<span class="token punctuation">.</span><span class="token function">annotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=======================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们为 <code>Test</code> 类定义了泛型变量 <code>T</code>，同时指定它的上限为 <code>Closeable</code> 和 <code>Runnbale</code> ，并且为泛型变量上限加上了 <code>AnnotationTest</code> 注解，接下来我们在 <code>main</code> 方法中通过 <code>Test.class.getTypeParameters();</code> 获取 <code>Test</code> 的类型变量数组，遍历类型变量数组，依次输出 <code>TypeName</code>、<code>Name</code> 、<code>GenericDeclaration</code>、<code>Bounds</code> 和 <code>AnnotatedBounds</code>。</p><p>上述代码输出结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>typeName <span class="token operator">=</span> T
name <span class="token operator">=</span> T
genericDeclarationclass <span class="token operator">=</span> com.guodong.android.retrofit.Test
boundTypeName <span class="token operator">=</span> java.io.Closeable
boundTypeName <span class="token operator">=</span> java.lang.Runnable
annotateTypeName <span class="token operator">=</span> java.io.Closeable
declaredAnnotation <span class="token operator">=</span> com.guodong.android.retrofit.AnnotationTest
annotateTypeName <span class="token operator">=</span> java.lang.Runnable
declaredAnnotation <span class="token operator">=</span> com.guodong.android.retrofit.AnnotationTest
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的输出结果可以看出：</p><ol><li>类别变量的名称为：<code>T</code>，</li><li>声明类型变量的类型为：<code>com.guodong.android.retrofit.Test</code>，</li><li>类型变量有两个上限，分别为：<code>java.io.Closeable</code> 和 <code>java.lang.Runnable</code>，且是按声明顺序排序，</li><li><code>annotateTypeName</code> 表示 <code>AnnotationTest</code> 注解加的类型，</li><li><code>declaredAnnotation</code> 表示注解的全限定名。</li></ol><h2 id="wildcardtype" tabindex="-1"><a class="header-anchor" href="#wildcardtype" aria-hidden="true">#</a> WildcardType</h2><p><code>WildcardType</code> 表示泛型通配符。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WildcardType</span> <span class="token keyword">extends</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>
    
    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getUpperBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getLowerBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WildcardType</code> 接口有两个方法：</p><ol><li><code>getUpperBounds</code> 方法，获取泛型上限，如果没有显式指定上限，默认上限为 <code>Object</code>，</li><li><code>getLowerBounds</code> 方法，获取泛型下限，如果没有显式指定下限，默认下限为 <code>null</code>，此时长度为 <code>0</code>。</li></ol><p>下面还是测试代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>guodong<span class="token punctuation">.</span>android<span class="token punctuation">.</span>retrofit</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">ParameterizedType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Type</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">WildcardType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;map&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Type</span> genericType <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getGenericType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>genericType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ParameterizedType</span> parameterizedType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> genericType<span class="token punctuation">;</span>
            <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> parameterizedType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> actualTypeArgument <span class="token operator">:</span> actualTypeArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>actualTypeArgument <span class="token keyword">instanceof</span> <span class="token class-name">WildcardType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">WildcardType</span> wildcardType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WildcardType</span><span class="token punctuation">)</span> actualTypeArgument<span class="token punctuation">;</span>
                    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> upperBounds <span class="token operator">=</span> wildcardType<span class="token punctuation">.</span><span class="token function">getUpperBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lowerBounds <span class="token operator">=</span> wildcardType<span class="token punctuation">.</span><span class="token function">getLowerBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;upperBounds = &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>upperBounds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;lowerBounds = &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>lowerBounds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们声明了一个 <code>private static Map&lt;? super String, ? extends Number&gt; map;</code> 静态变量，这个变量有两个泛型参数，第一个泛型参数指定了下限为 <code>String</code>，第二个泛型参数指定了上限为 <code>Number</code>，接下来我们在 <code>main</code> 方法中获取这个变量声明的泛型参数通配符并输出。</p><p>上述代码输出结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>upperBounds <span class="token operator">=</span> <span class="token punctuation">[</span>class java.lang.Object<span class="token punctuation">]</span>
lowerBounds <span class="token operator">=</span> <span class="token punctuation">[</span>class java.lang.String<span class="token punctuation">]</span>
----------------------------------------------
upperBounds <span class="token operator">=</span> <span class="token punctuation">[</span>class java.lang.Number<span class="token punctuation">]</span>
lowerBounds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
----------------------------------------------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的输出结果可以看出：</p><ol><li>第一个泛型参数没有指定上限，那么默认上限为 <code>Object</code>，</li><li>第一个泛型参数指定了下限 <code>String</code>，实际输出也是 <code>String</code>，</li><li>第二个泛型参数指定了上限 <code>Number</code>，实际输出也是 <code>Number</code>，</li><li>第二个泛型参数没有指定下限，那么默认下限为 <code>null</code>，数组长度为 <code>0</code>，与 <code>getLowerBounds</code> 方法注释描述相符。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们通过本章的学习，开启了反射知识的大门，为接下来我们学习 <code>Retrofit</code> 打下知识储备。</p>`,73);function g(b,T){const a=i("RouterLink");return e(),t("div",null,[k,s("p",null,[n("在 "),o(a,{to:"/SourceCodeAnalysis/Retrofit/3.%E6%B3%9B%E5%9E%8B.html"},{default:c(()=>[n("上一篇文章")]),_:1}),n(" 中我们简单学习了下泛型知识，那么本文主要学习下反射相关的知识。在 "),d,n(" 中与反射相关的主要是 "),m,n("，所以本文学习反射的重点在于 "),v,n(" 相关的知识点。")]),y])}const w=p(r,[["render",g],["__file","4.反射(一).html.vue"]]);export{w as default};

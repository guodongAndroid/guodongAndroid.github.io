import{_ as p,Y as o,Z as l,$ as n,a0 as s,a1 as t,a3 as e,E as c}from"./framework-3d290349.js";const i={},u=n("h1",{id:"修改linphone-sdk-android-下篇",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#修改linphone-sdk-android-下篇","aria-hidden":"true"},"#"),s(" 修改linphone-sdk-android-下篇")],-1),r=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),d={href:"https://juejin.cn/post/7089664949907095559",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/7090172691617071118",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>本文是下篇，本篇记录在上篇中提到的问题1排查过程及修复方案，尽量描述排查问题过程中的思路与方向</p><p>上篇中说问题1当初认为是linphone的bug，后面看源码及查资料发现可能不是bug，本篇将记录个人的理解</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>这里再描述下问题1：打开音频编解码G722、G729等时，发起呼叫的INVITE SDP中，没有G722、G729的<code>rtpmap</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>m=audio 7078 RTP/AVP 96 0 8 9 18 101 97
a=fmtp:18 annexb=yes
a=rtpmap:101 telephone-event/48000
a=rtpmap:97 telephone-event/8000
a=rtcp-fb:* trr-int 1000
a=rtcp-fb:* ccm tmmbr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2>`,6),m={href:"https://www.3cx.com/blog/voip-howto/sdp-voip2/",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[n("code",null,"rtpmap"),s("是"),n("code",null,"Session attribute lines"),s("，即为会话属性行，是对"),n("code",null,"Payload Type"),s("的补充说明，"),n("code",null,"Payload Type"),s("既是"),n("code",null,"m=audio 7078 RTP/AVP 96 0 8 9 18 101 97"),s("中"),n("code",null,"AVP"),s("后面的数字，这些数字是音频编解码对应的代码，对应关系如下：")],-1),g={href:"https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-1",target:"_blank",rel:"noopener noreferrer"},b=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},[s("PT "),n("img",{src:"https://www.iana.org/assignments/_support/sort_none.gif",alt:"img",loading:"lazy"})]),n("th",{style:{"text-align":"left"}},[s("Encoding Name "),n("img",{src:"https://www.iana.org/assignments/_support/sort_none.gif",alt:"img",loading:"lazy"})]),n("th",{style:{"text-align":"left"}},[s("Audio/Video (A/V) "),n("img",{src:"https://www.iana.org/assignments/_support/sort_none.gif",alt:"img",loading:"lazy"})]),n("th",{style:{"text-align":"left"}},[s("Clock Rate (Hz) "),n("img",{src:"https://www.iana.org/assignments/_support/sort_none.gif",alt:"img",loading:"lazy"})]),n("th",{style:{"text-align":"left"}},[s("Channels "),n("img",{src:"https://www.iana.org/assignments/_support/sort_none.gif",alt:"img",loading:"lazy"})]),n("th",{style:{"text-align":"left"}},[s("Reference "),n("img",{src:"https://www.iana.org/assignments/_support/sort_none.gif",alt:"img",loading:"lazy"})])])],-1),f=n("td",{style:{"text-align":"left"}},"0",-1),h=n("td",{style:{"text-align":"left"}},"PCMU",-1),y=n("td",{style:{"text-align":"left"}},"A",-1),x=n("td",{style:{"text-align":"left"}},"8000",-1),w=n("td",{style:{"text-align":"left"}},"1",-1),C={style:{"text-align":"left"}},P={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},L=n("tr",null,[n("td",{style:{"text-align":"left"}},"1"),n("td",{style:{"text-align":"left"}},"Reserved"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),A=n("tr",null,[n("td",{style:{"text-align":"left"}},"2"),n("td",{style:{"text-align":"left"}},"Reserved"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),S=n("td",{style:{"text-align":"left"}},"3",-1),q=n("td",{style:{"text-align":"left"}},"GSM",-1),R=n("td",{style:{"text-align":"left"}},"A",-1),D=n("td",{style:{"text-align":"left"}},"8000",-1),N=n("td",{style:{"text-align":"left"}},"1",-1),E={style:{"text-align":"left"}},I={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"left"}},"4",-1),M=n("td",{style:{"text-align":"left"}},"G723",-1),F=n("td",{style:{"text-align":"left"}},"A",-1),j=n("td",{style:{"text-align":"left"}},"8000",-1),V=n("td",{style:{"text-align":"left"}},"1",-1),U={style:{"text-align":"left"}},B={href:"https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#Vineet_Kumar",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},O=n("td",{style:{"text-align":"left"}},"5",-1),J=n("td",{style:{"text-align":"left"}},"DVI4",-1),z=n("td",{style:{"text-align":"left"}},"A",-1),H=n("td",{style:{"text-align":"left"}},"8000",-1),W=n("td",{style:{"text-align":"left"}},"1",-1),X={style:{"text-align":"left"}},Y={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},$=n("td",{style:{"text-align":"left"}},"6",-1),K=n("td",{style:{"text-align":"left"}},"DVI4",-1),Z=n("td",{style:{"text-align":"left"}},"A",-1),Q=n("td",{style:{"text-align":"left"}},"16000",-1),nn=n("td",{style:{"text-align":"left"}},"1",-1),sn={style:{"text-align":"left"}},an={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},tn=n("td",{style:{"text-align":"left"}},"7",-1),en=n("td",{style:{"text-align":"left"}},"LPC",-1),pn=n("td",{style:{"text-align":"left"}},"A",-1),on=n("td",{style:{"text-align":"left"}},"8000",-1),ln=n("td",{style:{"text-align":"left"}},"1",-1),cn={style:{"text-align":"left"}},un={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},rn=n("td",{style:{"text-align":"left"}},"8",-1),dn=n("td",{style:{"text-align":"left"}},"PCMA",-1),kn=n("td",{style:{"text-align":"left"}},"A",-1),_n=n("td",{style:{"text-align":"left"}},"8000",-1),mn=n("td",{style:{"text-align":"left"}},"1",-1),vn={style:{"text-align":"left"}},gn={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},bn=n("td",{style:{"text-align":"left"}},"9",-1),fn=n("td",{style:{"text-align":"left"}},"G722",-1),hn=n("td",{style:{"text-align":"left"}},"A",-1),yn=n("td",{style:{"text-align":"left"}},"8000",-1),xn=n("td",{style:{"text-align":"left"}},"1",-1),wn={style:{"text-align":"left"}},Cn={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},Pn=n("td",{style:{"text-align":"left"}},"10",-1),Ln=n("td",{style:{"text-align":"left"}},"L16",-1),An=n("td",{style:{"text-align":"left"}},"A",-1),Sn=n("td",{style:{"text-align":"left"}},"44100",-1),qn=n("td",{style:{"text-align":"left"}},"2",-1),Rn={style:{"text-align":"left"}},Dn={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},Nn=n("td",{style:{"text-align":"left"}},"11",-1),En=n("td",{style:{"text-align":"left"}},"L16",-1),In=n("td",{style:{"text-align":"left"}},"A",-1),Tn=n("td",{style:{"text-align":"left"}},"44100",-1),Mn=n("td",{style:{"text-align":"left"}},"1",-1),Fn={style:{"text-align":"left"}},jn={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},Vn=n("td",{style:{"text-align":"left"}},"12",-1),Un=n("td",{style:{"text-align":"left"}},"QCELP",-1),Bn=n("td",{style:{"text-align":"left"}},"A",-1),Gn=n("td",{style:{"text-align":"left"}},"8000",-1),On=n("td",{style:{"text-align":"left"}},"1",-1),Jn={style:{"text-align":"left"}},zn={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},Hn=n("td",{style:{"text-align":"left"}},"13",-1),Wn=n("td",{style:{"text-align":"left"}},"CN",-1),Xn=n("td",{style:{"text-align":"left"}},"A",-1),Yn=n("td",{style:{"text-align":"left"}},"8000",-1),$n=n("td",{style:{"text-align":"left"}},"1",-1),Kn={style:{"text-align":"left"}},Zn={href:"https://www.iana.org/go/rfc3389",target:"_blank",rel:"noopener noreferrer"},Qn=n("td",{style:{"text-align":"left"}},"14",-1),ns=n("td",{style:{"text-align":"left"}},"MPA",-1),ss=n("td",{style:{"text-align":"left"}},"A",-1),as=n("td",{style:{"text-align":"left"}},"90000",-1),ts=n("td",{style:{"text-align":"left"}},null,-1),es={style:{"text-align":"left"}},ps={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},os={href:"https://www.iana.org/go/rfc2250",target:"_blank",rel:"noopener noreferrer"},ls=n("td",{style:{"text-align":"left"}},"15",-1),cs=n("td",{style:{"text-align":"left"}},"G728",-1),is=n("td",{style:{"text-align":"left"}},"A",-1),us=n("td",{style:{"text-align":"left"}},"8000",-1),rs=n("td",{style:{"text-align":"left"}},"1",-1),ds={style:{"text-align":"left"}},ks={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},_s=n("td",{style:{"text-align":"left"}},"16",-1),ms=n("td",{style:{"text-align":"left"}},"DVI4",-1),vs=n("td",{style:{"text-align":"left"}},"A",-1),gs=n("td",{style:{"text-align":"left"}},"11025",-1),bs=n("td",{style:{"text-align":"left"}},"1",-1),fs={style:{"text-align":"left"}},hs={href:"https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#Joseph_Di_Pol",target:"_blank",rel:"noopener noreferrer"},ys=n("td",{style:{"text-align":"left"}},"17",-1),xs=n("td",{style:{"text-align":"left"}},"DVI4",-1),ws=n("td",{style:{"text-align":"left"}},"A",-1),Cs=n("td",{style:{"text-align":"left"}},"22050",-1),Ps=n("td",{style:{"text-align":"left"}},"1",-1),Ls={style:{"text-align":"left"}},As={href:"https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#Joseph_Di_Pol",target:"_blank",rel:"noopener noreferrer"},Ss=n("td",{style:{"text-align":"left"}},"18",-1),qs=n("td",{style:{"text-align":"left"}},"G729",-1),Rs=n("td",{style:{"text-align":"left"}},"A",-1),Ds=n("td",{style:{"text-align":"left"}},"8000",-1),Ns=n("td",{style:{"text-align":"left"}},"1",-1),Es={style:{"text-align":"left"}},Is={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},Ts=n("tr",null,[n("td",{style:{"text-align":"left"}},"19"),n("td",{style:{"text-align":"left"}},"Reserved"),n("td",{style:{"text-align":"left"}},"A"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),Ms=n("tr",null,[n("td",{style:{"text-align":"left"}},"20"),n("td",{style:{"text-align":"left"}},"Unassigned"),n("td",{style:{"text-align":"left"}},"A"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),Fs=n("tr",null,[n("td",{style:{"text-align":"left"}},"21"),n("td",{style:{"text-align":"left"}},"Unassigned"),n("td",{style:{"text-align":"left"}},"A"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),js=n("tr",null,[n("td",{style:{"text-align":"left"}},"22"),n("td",{style:{"text-align":"left"}},"Unassigned"),n("td",{style:{"text-align":"left"}},"A"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),Vs=n("tr",null,[n("td",{style:{"text-align":"left"}},"23"),n("td",{style:{"text-align":"left"}},"Unassigned"),n("td",{style:{"text-align":"left"}},"A"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),Us=n("tr",null,[n("td",{style:{"text-align":"left"}},"24"),n("td",{style:{"text-align":"left"}},"Unassigned"),n("td",{style:{"text-align":"left"}},"V"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),Bs=n("td",{style:{"text-align":"left"}},"25",-1),Gs=n("td",{style:{"text-align":"left"}},"CelB",-1),Os=n("td",{style:{"text-align":"left"}},"V",-1),Js=n("td",{style:{"text-align":"left"}},"90000",-1),zs=n("td",{style:{"text-align":"left"}},null,-1),Hs={style:{"text-align":"left"}},Ws={href:"https://www.iana.org/go/rfc2029",target:"_blank",rel:"noopener noreferrer"},Xs=n("td",{style:{"text-align":"left"}},"26",-1),Ys=n("td",{style:{"text-align":"left"}},"JPEG",-1),$s=n("td",{style:{"text-align":"left"}},"V",-1),Ks=n("td",{style:{"text-align":"left"}},"90000",-1),Zs=n("td",{style:{"text-align":"left"}},null,-1),Qs={style:{"text-align":"left"}},na={href:"https://www.iana.org/go/rfc2435",target:"_blank",rel:"noopener noreferrer"},sa=n("tr",null,[n("td",{style:{"text-align":"left"}},"27"),n("td",{style:{"text-align":"left"}},"Unassigned"),n("td",{style:{"text-align":"left"}},"V"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),aa=n("td",{style:{"text-align":"left"}},"28",-1),ta=n("td",{style:{"text-align":"left"}},"nv",-1),ea=n("td",{style:{"text-align":"left"}},"V",-1),pa=n("td",{style:{"text-align":"left"}},"90000",-1),oa=n("td",{style:{"text-align":"left"}},null,-1),la={style:{"text-align":"left"}},ca={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},ia=n("tr",null,[n("td",{style:{"text-align":"left"}},"29"),n("td",{style:{"text-align":"left"}},"Unassigned"),n("td",{style:{"text-align":"left"}},"V"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),ua=n("tr",null,[n("td",{style:{"text-align":"left"}},"30"),n("td",{style:{"text-align":"left"}},"Unassigned"),n("td",{style:{"text-align":"left"}},"V"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),ra=n("td",{style:{"text-align":"left"}},"31",-1),da=n("td",{style:{"text-align":"left"}},"H261",-1),ka=n("td",{style:{"text-align":"left"}},"V",-1),_a=n("td",{style:{"text-align":"left"}},"90000",-1),ma=n("td",{style:{"text-align":"left"}},null,-1),va={style:{"text-align":"left"}},ga={href:"https://www.iana.org/go/rfc4587",target:"_blank",rel:"noopener noreferrer"},ba=n("td",{style:{"text-align":"left"}},"32",-1),fa=n("td",{style:{"text-align":"left"}},"MPV",-1),ha=n("td",{style:{"text-align":"left"}},"V",-1),ya=n("td",{style:{"text-align":"left"}},"90000",-1),xa=n("td",{style:{"text-align":"left"}},null,-1),wa={style:{"text-align":"left"}},Ca={href:"https://www.iana.org/go/rfc2250",target:"_blank",rel:"noopener noreferrer"},Pa=n("td",{style:{"text-align":"left"}},"33",-1),La=n("td",{style:{"text-align":"left"}},"MP2T",-1),Aa=n("td",{style:{"text-align":"left"}},"AV",-1),Sa=n("td",{style:{"text-align":"left"}},"90000",-1),qa=n("td",{style:{"text-align":"left"}},null,-1),Ra={style:{"text-align":"left"}},Da={href:"https://www.iana.org/go/rfc2250",target:"_blank",rel:"noopener noreferrer"},Na=n("td",{style:{"text-align":"left"}},"34",-1),Ea=n("td",{style:{"text-align":"left"}},"H263",-1),Ia=n("td",{style:{"text-align":"left"}},"V",-1),Ta=n("td",{style:{"text-align":"left"}},"90000",-1),Ma=n("td",{style:{"text-align":"left"}},null,-1),Fa={style:{"text-align":"left"}},ja={href:"https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#Chunrong_Zhu",target:"_blank",rel:"noopener noreferrer"},Va=n("tr",null,[n("td",{style:{"text-align":"left"}},"35-71"),n("td",{style:{"text-align":"left"}},"Unassigned"),n("td",{style:{"text-align":"left"}},"?"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),Ua=n("td",{style:{"text-align":"left"}},"72-76",-1),Ba=n("td",{style:{"text-align":"left"}},"Reserved for RTCP conflict avoidance",-1),Ga=n("td",{style:{"text-align":"left"}},null,-1),Oa=n("td",{style:{"text-align":"left"}},null,-1),Ja=n("td",{style:{"text-align":"left"}},null,-1),za={style:{"text-align":"left"}},Ha={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},Wa=n("tr",null,[n("td",{style:{"text-align":"left"}},"77-95"),n("td",{style:{"text-align":"left"}},"Unassigned"),n("td",{style:{"text-align":"left"}},"?"),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}}),n("td",{style:{"text-align":"left"}})],-1),Xa=n("td",{style:{"text-align":"left"}},"96-127",-1),Ya=n("td",{style:{"text-align":"left"}},"dynamic",-1),$a=n("td",{style:{"text-align":"left"}},"?",-1),Ka=n("td",{style:{"text-align":"left"}},null,-1),Za=n("td",{style:{"text-align":"left"}},null,-1),Qa={style:{"text-align":"left"}},nt={href:"https://www.iana.org/go/rfc3551",target:"_blank",rel:"noopener noreferrer"},st=e(`<p>从表中了解到，Payload Type(PT) code 0 - 95为静态类型，即code对应固定的codec(编解码器)，96 - 127为动态codec，即需要在SDP协商过程中确定</p><p>接下来追踪下源码，看看SDP中为什么没有<code>rtpmap</code></p><p>先找到<code>Java</code>层发起呼叫的代码，在<code>Core.java</code>中有4个发起呼叫的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Nullable</span>
<span class="token class-name">Call</span> <span class="token function">invite</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Nullable</span>
<span class="token class-name">Call</span> <span class="token function">inviteAddress</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Address</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Nullable</span>
<span class="token class-name">Call</span> <span class="token function">inviteAddressWithParams</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Address</span> var1<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">CallParams</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Nullable</span>
<span class="token class-name">Call</span> <span class="token function">inviteWithParams</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> var1<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">CallParams</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体实现在<code>CoreImpl.java</code>中，查看这个<code>public Call inviteAddress(@NonNull Address addr);</code>方法吧</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token class-name">Call</span> <span class="token function">inviteAddress</span><span class="token punctuation">(</span><span class="token keyword">long</span> nativePtr<span class="token punctuation">,</span> <span class="token class-name">Address</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token class-name">Call</span> <span class="token function">inviteAddress</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Address</span> addr<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Call</span><span class="token punctuation">)</span><span class="token function">inviteAddress</span><span class="token punctuation">(</span>nativePtr<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Java</code>层调用了<code>native</code>层代码，打开编译后生成的<code>linphone_jni.cc</code>，找到<code>Java_org_linphone_core_CoreImpl_inviteAddress</code>方法</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>JNIEXPORT jobject JNICALL <span class="token function">Java_org_linphone_core_CoreImpl_inviteAddress</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject thiz<span class="token punctuation">,</span> jlong ptr<span class="token punctuation">,</span> jobject addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	LinphoneCore <span class="token operator">*</span>cptr <span class="token operator">=</span> <span class="token punctuation">(</span>LinphoneCore<span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>cptr <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">bctbx_error</span><span class="token punctuation">(</span><span class="token string">&quot;Java_org_linphone_core_CoreImpl_inviteAddress&#39;s LinphoneCore C ptr is null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	LinphoneAddress<span class="token operator">*</span> c_addr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>addr<span class="token punctuation">)</span> c_addr <span class="token operator">=</span> <span class="token punctuation">(</span>LinphoneAddress<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetObjectNativePtr</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	jobject jni_result <span class="token operator">=</span> <span class="token punctuation">(</span>jobject<span class="token punctuation">)</span><span class="token function">getCall</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token punctuation">(</span>LinphoneCall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">linphone_core_invite_address</span><span class="token punctuation">(</span>cptr<span class="token punctuation">,</span> c_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> jni_result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>native</code>层调用了<code>linphone_core_invite_address</code>这个方法，在IDE中，可以通过Ctrl+左键点击进行跳转，<code>linphone_core_invite_address</code>位于<code>linphonecore.c</code>中</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>LinphoneCall <span class="token operator">*</span> <span class="token function">linphone_core_invite_address</span><span class="token punctuation">(</span>LinphoneCore <span class="token operator">*</span>lc<span class="token punctuation">,</span> <span class="token keyword">const</span> LinphoneAddress <span class="token operator">*</span>addr<span class="token punctuation">)</span><span class="token punctuation">{</span>
	LinphoneCall <span class="token operator">*</span>call<span class="token punctuation">;</span>
	LinphoneCallParams <span class="token operator">*</span>p<span class="token operator">=</span><span class="token function">linphone_core_create_call_params</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">linphone_call_params_enable_video</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token function">linphone_call_params_video_enabled</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>lc<span class="token operator">-&gt;</span>video_policy<span class="token punctuation">.</span>automatically_initiate<span class="token punctuation">)</span><span class="token punctuation">;</span>
	call<span class="token operator">=</span><span class="token function">linphone_core_invite_address_with_params</span> <span class="token punctuation">(</span>lc<span class="token punctuation">,</span>addr<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">linphone_call_params_unref</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> call<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>linphone_core_invite_address</code>方法中调用了<code>linphone_core_invite_address_with_params</code>发起呼叫，这个方法较长，删减一些不关心的代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>LinphoneCall <span class="token operator">*</span> <span class="token function">linphone_core_invite_address_with_params</span><span class="token punctuation">(</span>LinphoneCore <span class="token operator">*</span>lc<span class="token punctuation">,</span> <span class="token keyword">const</span> LinphoneAddress <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">const</span> LinphoneCallParams <span class="token operator">*</span>params<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
	LinphoneCall <span class="token operator">*</span>call<span class="token punctuation">;</span>
    
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">ms_error</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t invite a NULL address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	parsed_url2<span class="token operator">=</span><span class="token function">linphone_address_new</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
	call<span class="token operator">=</span><span class="token function">linphone_call_new_outgoing</span><span class="token punctuation">(</span>lc<span class="token punctuation">,</span>parsed_url2<span class="token punctuation">,</span>addr<span class="token punctuation">,</span>cp<span class="token punctuation">,</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">bool</span> defer <span class="token operator">=</span> <span class="token class-name">Call</span><span class="token double-colon punctuation">::</span><span class="token function">toCpp</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">initiateOutgoing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>defer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Call</span><span class="token double-colon punctuation">::</span><span class="token function">toCpp</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">startInvite</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">/* The call has already gone to error and released state, so do not return it */</span>
			call <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> call<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>linphone_core_invite_address_with_params</code>方法中调用<code>linphone_call_new_outgoing</code>方法创建<code>Call</code>对象，调用<code>initiateOutgoing</code>方法初始化发起呼叫并设置当前状态为<code>OutgoingInit</code>，接下来调用<code>startInvite</code>方法发起呼叫，<code>startInvite</code>方法位于<code>call.cpp</code>中，在其中又调用<code>getActiveSession</code>方法获取<code>CallSession</code>，调用<code>CallSession::startInvite</code>方法</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token class-name">Call</span><span class="token double-colon punctuation">::</span><span class="token function">startInvite</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Address <span class="token operator">*</span>destination<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">getActiveSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">startInvite</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CallSession::startInvite</code>方法位于<code>call-session.cpp</code>中，在这个方法中找了半天，没见有与SDP发送相关的逻辑，先去头文件中看看方法原型吧</p><p>找了半天也是有点收获的，分析出调用<code>addAdditionalLocalBody</code>去组装自定义扩展头数据</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token class-name">CallSession</span><span class="token double-colon punctuation">::</span><span class="token function">startInvite</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Address <span class="token operator">*</span>destination<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>subject<span class="token punctuation">,</span> <span class="token keyword">const</span> Content <span class="token operator">*</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">L_D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	d<span class="token operator">-&gt;</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>
	<span class="token comment">/* Try to be best-effort in giving real local or routable contact address */</span>
	d<span class="token operator">-&gt;</span><span class="token function">setContactOp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	string destinationStr<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>realUrl <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>destination<span class="token punctuation">)</span>
		destinationStr <span class="token operator">=</span> destination<span class="token operator">-&gt;</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		realUrl <span class="token operator">=</span> <span class="token function">linphone_address_as_string</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>log<span class="token operator">-&gt;</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
		destinationStr <span class="token operator">=</span> realUrl<span class="token punctuation">;</span>
		<span class="token function">ms_free</span><span class="token punctuation">(</span>realUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token operator">=</span> <span class="token function">linphone_address_as_string</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>log<span class="token operator">-&gt;</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/* Take a ref because sal_call() may destroy the CallSession if no SIP transport is available */</span>
	shared_ptr<span class="token operator">&lt;</span>CallSession<span class="token operator">&gt;</span> ref <span class="token operator">=</span> <span class="token function">getSharedFromThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span>
		d<span class="token operator">-&gt;</span>op<span class="token operator">-&gt;</span><span class="token function">setLocalBody</span><span class="token punctuation">(</span><span class="token operator">*</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// If a custom Content has been set in the call params, create a multipart body for the INVITE</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> content <span class="token operator">:</span> d<span class="token operator">-&gt;</span>params<span class="token operator">-&gt;</span><span class="token function">getCustomContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		d<span class="token operator">-&gt;</span>op<span class="token operator">-&gt;</span><span class="token function">addAdditionalLocalBody</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">int</span> result <span class="token operator">=</span> d<span class="token operator">-&gt;</span>op<span class="token operator">-&gt;</span><span class="token function">call</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> destinationStr<span class="token punctuation">,</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ms_free</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>state <span class="token operator">!=</span> CallSession<span class="token double-colon punctuation">::</span>State<span class="token double-colon punctuation">::</span>Error<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>state <span class="token operator">!=</span> CallSession<span class="token double-colon punctuation">::</span>State<span class="token double-colon punctuation">::</span>Released<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// sal_call() may invoke call_failure() and call_released() SAL callbacks synchronously,</span>
			<span class="token comment">// in which case there is no need to perform a state change here.</span>
			d<span class="token operator">-&gt;</span><span class="token function">setState</span><span class="token punctuation">(</span>CallSession<span class="token double-colon punctuation">::</span>State<span class="token double-colon punctuation">::</span>Error<span class="token punctuation">,</span> <span class="token string">&quot;Call failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token function">linphone_call_log_set_call_id</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>log<span class="token punctuation">,</span> d<span class="token operator">-&gt;</span>op<span class="token operator">-&gt;</span><span class="token function">getCallId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Must be known at that time */</span>
		d<span class="token operator">-&gt;</span><span class="token function">setState</span><span class="token punctuation">(</span>CallSession<span class="token double-colon punctuation">::</span>State<span class="token double-colon punctuation">::</span>OutgoingProgress<span class="token punctuation">,</span> <span class="token string">&quot;Outgoing call in progress&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CallSession::startInvite</code>方法原型为，</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">startInvite</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Address <span class="token operator">*</span>destination<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>subject <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Content <span class="token operator">*</span>content <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是个<code>virtual</code>虚函数，说明有函数复写，在IDE中搜索发现<code>MediaSession</code>类继承自<code>CallSession</code>，好的，找到<code>MediaSession</code>复写的<code>startInvite</code>方法，方法较长，删除一些不关心的代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token class-name">MediaSession</span><span class="token double-colon punctuation">::</span><span class="token function">startInvite</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Address <span class="token operator">*</span>destination<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>subject<span class="token punctuation">,</span> <span class="token keyword">const</span> Content <span class="token operator">*</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">L_D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 删除不关心的代码</span>

	d<span class="token operator">-&gt;</span>op<span class="token operator">-&gt;</span><span class="token function">setLocalMediaDescription</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>localDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token class-name">CallSession</span><span class="token double-colon punctuation">::</span><span class="token function">startInvite</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>state <span class="token operator">==</span> CallSession<span class="token double-colon punctuation">::</span>State<span class="token double-colon punctuation">::</span>Error<span class="token punctuation">)</span>
			d<span class="token operator">-&gt;</span><span class="token function">stopStreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>MediaSession::startInvite</code>中调用<code>setLocalMediaDescription</code>方法组装本地媒体描述信息，最后再调用父类的<code>CallSession::startInvite</code>方法继续发起呼叫，好的，现在只关心<code>setLocalMediaDescription</code>方法，其中<code>op</code>是<code>SalCallOp</code>，在IDE中打开<code>call-op.cpp</code>，找到<code>setLocalMediaDescription</code>方法，删减一些不关心的代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token class-name">SalCallOp</span><span class="token double-colon punctuation">::</span><span class="token function">setLocalMediaDescription</span> <span class="token punctuation">(</span>SalMediaDescription <span class="token operator">*</span>desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">sal_media_description_ref</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		belle_sip_error_code error<span class="token punctuation">;</span>
		belle_sdp_session_description_t <span class="token operator">*</span>sdp <span class="token operator">=</span> <span class="token function">media_description_to_sdp</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> buffer <span class="token operator">=</span> <span class="token function">marshalMediaDescription</span><span class="token punctuation">(</span>sdp<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">belle_sip_object_unref</span><span class="token punctuation">(</span>sdp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> BELLE_SIP_OK<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

		mLocalBody<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>ContentType<span class="token double-colon punctuation">::</span>Sdp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		mLocalBody<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token function">move</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		mLocalBody <span class="token operator">=</span> <span class="token function">Content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里终于发现与SDP相关的方法了<code>media_description_to_sdp</code>，继续查看<code>media_description_to_sdp</code>方法，此方法位于<code>sal_sdp.c</code>中，方法较长，主要是组装SDP协议数据，比如设置版本、创建源信息，创建会话等，这里删减一些不关心的代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>belle_sdp_session_description_t <span class="token operator">*</span> <span class="token function">media_description_to_sdp</span><span class="token punctuation">(</span><span class="token keyword">const</span> SalMediaDescription <span class="token operator">*</span>desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	belle_sdp_session_description_t<span class="token operator">*</span> session_desc<span class="token operator">=</span><span class="token function">belle_sdp_session_description_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	bool_t inet6<span class="token punctuation">;</span>
	belle_sdp_origin_t<span class="token operator">*</span> origin<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>escaped_username <span class="token operator">=</span> <span class="token function">belle_sip_uri_to_escaped_username</span><span class="token punctuation">(</span>desc<span class="token operator">-&gt;</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strchr</span> <span class="token punctuation">(</span> desc<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span><span class="token char">&#39;:&#39;</span> <span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		inet6<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> inet6<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">belle_sdp_session_description_set_version</span> <span class="token punctuation">(</span> session_desc<span class="token punctuation">,</span><span class="token function">belle_sdp_version_create</span> <span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	origin <span class="token operator">=</span> <span class="token function">belle_sdp_origin_create</span> <span class="token punctuation">(</span> escaped_username
									  <span class="token punctuation">,</span>desc<span class="token operator">-&gt;</span>session_id
									  <span class="token punctuation">,</span>desc<span class="token operator">-&gt;</span>session_ver
									  <span class="token punctuation">,</span><span class="token string">&quot;IN&quot;</span>
									  <span class="token punctuation">,</span> inet6 <span class="token operator">?</span> <span class="token string">&quot;IP6&quot;</span> <span class="token operator">:</span><span class="token string">&quot;IP4&quot;</span>
									  <span class="token punctuation">,</span>desc<span class="token operator">-&gt;</span>addr <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">bctbx_free</span><span class="token punctuation">(</span>escaped_username<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">belle_sdp_session_description_set_origin</span> <span class="token punctuation">(</span> session_desc<span class="token punctuation">,</span>origin <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">belle_sdp_session_description_set_session_name</span> <span class="token punctuation">(</span> session_desc<span class="token punctuation">,</span>
		<span class="token function">belle_sdp_session_name_create</span> <span class="token punctuation">(</span> desc<span class="token operator">-&gt;</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;\\0&#39;</span> <span class="token operator">?</span> desc<span class="token operator">-&gt;</span>name <span class="token operator">:</span> <span class="token string">&quot;Talk&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 删减不关心的代码</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>desc<span class="token operator">-&gt;</span>nb_streams<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">stream_description_to_sdp</span><span class="token punctuation">(</span>session_desc<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>desc<span class="token operator">-&gt;</span>streams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> session_desc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析<code>media_description_to_sdp</code>方法找到在<code>stream_description_to_sdp</code>方法中组装数据流信息到SDP协议中，<code>stream_description_to_sdp</code>方法非常长，此方法主要是组装SDP协议中编解码相关的信息，这里删除大部分不关心的代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stream_description_to_sdp</span> <span class="token punctuation">(</span> belle_sdp_session_description_t <span class="token operator">*</span>session_desc<span class="token punctuation">,</span> <span class="token keyword">const</span> SalMediaDescription <span class="token operator">*</span>md<span class="token punctuation">,</span> <span class="token keyword">const</span> SalStreamDescription <span class="token operator">*</span>stream <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 删减不关心的代码</span>

	media_desc <span class="token operator">=</span> <span class="token function">belle_sdp_media_description_create</span> <span class="token punctuation">(</span> <span class="token function">sal_stream_description_get_type_as_string</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
				 <span class="token punctuation">,</span>stream<span class="token operator">-&gt;</span>rtp_port
				 <span class="token punctuation">,</span><span class="token number">1</span>
				 <span class="token punctuation">,</span><span class="token function">sal_media_proto_to_string</span> <span class="token punctuation">(</span> stream<span class="token operator">-&gt;</span>proto <span class="token punctuation">)</span>
				 <span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 看到payloads字段</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>payloads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span> pt_it<span class="token operator">=</span>stream<span class="token operator">-&gt;</span>payloads<span class="token punctuation">;</span> pt_it<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> pt_it<span class="token operator">=</span>pt_it<span class="token operator">-&gt;</span>next <span class="token punctuation">)</span> <span class="token punctuation">{</span>
			pt<span class="token operator">=</span> <span class="token punctuation">(</span> PayloadType<span class="token operator">*</span> <span class="token punctuation">)</span> pt_it<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
			mime_param<span class="token operator">=</span> <span class="token function">belle_sdp_mime_parameter_create</span> <span class="token punctuation">(</span> pt<span class="token operator">-&gt;</span>mime_type
					<span class="token punctuation">,</span> <span class="token function">payload_type_get_number</span> <span class="token punctuation">(</span> pt <span class="token punctuation">)</span>
					<span class="token punctuation">,</span> pt<span class="token operator">-&gt;</span>clock_rate
					<span class="token punctuation">,</span> pt<span class="token operator">-&gt;</span>channels<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token operator">?</span> pt<span class="token operator">-&gt;</span>channels <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">belle_sdp_mime_parameter_set_parameters</span> <span class="token punctuation">(</span> mime_param<span class="token punctuation">,</span>pt<span class="token operator">-&gt;</span>recv_fmtp <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> stream<span class="token operator">-&gt;</span>ptime<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">belle_sdp_mime_parameter_set_ptime</span> <span class="token punctuation">(</span> mime_param<span class="token punctuation">,</span>stream<span class="token operator">-&gt;</span>ptime <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
            <span class="token comment">// 锁定此方法</span>
			<span class="token function">belle_sdp_media_description_append_values_from_mime_parameter</span> <span class="token punctuation">(</span> media_desc<span class="token punctuation">,</span>mime_param <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">belle_sip_object_unref</span> <span class="token punctuation">(</span> mime_param <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">/* to comply with SDP we cannot have an empty payload type number list */</span>
		<span class="token comment">/* as it happens only when mline is declined with a zero port, it does not matter to put whatever codec*/</span>
		belle_sip_list_t<span class="token operator">*</span> format <span class="token operator">=</span> <span class="token function">belle_sip_list_append</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">belle_sdp_media_set_media_formats</span><span class="token punctuation">(</span><span class="token function">belle_sdp_media_description_get_media</span><span class="token punctuation">(</span>media_desc<span class="token punctuation">)</span><span class="token punctuation">,</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

    <span class="token comment">// 组装自定义sdp属性</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>custom_sdp_attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		belle_sdp_session_description_t <span class="token operator">*</span>custom_desc <span class="token operator">=</span> <span class="token punctuation">(</span>belle_sdp_session_description_t <span class="token operator">*</span><span class="token punctuation">)</span>stream<span class="token operator">-&gt;</span>custom_sdp_attributes<span class="token punctuation">;</span>
		belle_sip_list_t <span class="token operator">*</span>l <span class="token operator">=</span> <span class="token function">belle_sdp_session_description_get_attributes</span><span class="token punctuation">(</span>custom_desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		belle_sip_list_t <span class="token operator">*</span>elem<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>elem <span class="token operator">=</span> l<span class="token punctuation">;</span> elem <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> elem <span class="token operator">=</span> elem<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">belle_sdp_media_description_add_attribute</span><span class="token punctuation">(</span>media_desc<span class="token punctuation">,</span> <span class="token punctuation">(</span>belle_sdp_attribute_t <span class="token operator">*</span><span class="token punctuation">)</span>elem<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    
    <span class="token comment">// 删减不关心的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>stream_description_to_sdp</code>方法中看到<code>payload</code>字段，马上就要找到了happy~</p><p>经过分析，锁定<code>belle_sdp_media_description_append_values_from_mime_parameter</code>方法，分析此方法，在其中找到组装<code>rtpmap</code>的源码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">belle_sdp_media_description_append_values_from_mime_parameter</span><span class="token punctuation">(</span>belle_sdp_media_description_t<span class="token operator">*</span> media_description<span class="token punctuation">,</span> <span class="token keyword">const</span> belle_sdp_mime_parameter_t<span class="token operator">*</span> mime_parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">BELLE_SDP_FORCE_RTP_MAP </span><span class="token comment">/* defined to for RTP map even for static codec*/</span></span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">mime_parameter_is_static</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">/*dynamic payload*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">belle_sdp_mime_parameter_get_channel_count</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">snprintf</span><span class="token punctuation">(</span>atribute_value<span class="token punctuation">,</span>MAX_FMTP_LENGTH<span class="token punctuation">,</span><span class="token string">&quot;%i %s/%i/%i&quot;</span>
					<span class="token punctuation">,</span><span class="token function">belle_sdp_mime_parameter_get_media_format</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span>
					<span class="token punctuation">,</span><span class="token function">belle_sdp_mime_parameter_get_type</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span>
					<span class="token punctuation">,</span><span class="token function">belle_sdp_mime_parameter_get_rate</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span>
					<span class="token punctuation">,</span><span class="token function">belle_sdp_mime_parameter_get_channel_count</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token function">snprintf</span><span class="token punctuation">(</span>atribute_value<span class="token punctuation">,</span>MAX_FMTP_LENGTH<span class="token punctuation">,</span><span class="token string">&quot;%i %s/%i&quot;</span>
					<span class="token punctuation">,</span><span class="token function">belle_sdp_mime_parameter_get_media_format</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span>
					<span class="token punctuation">,</span><span class="token function">belle_sdp_mime_parameter_get_type</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span>
					<span class="token punctuation">,</span><span class="token function">belle_sdp_mime_parameter_get_rate</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token function">belle_sdp_media_description_set_attribute_value</span><span class="token punctuation">(</span>media_description<span class="token punctuation">,</span><span class="token string">&quot;rtpmap&quot;</span><span class="token punctuation">,</span>atribute_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">BELLE_SDP_FORCE_RTP_MAP</span></span>
	<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    
    <span class="token comment">// always include fmtp parameters if available</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">belle_sdp_mime_parameter_get_parameters</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">snprintf</span><span class="token punctuation">(</span>atribute_value<span class="token punctuation">,</span>MAX_FMTP_LENGTH<span class="token punctuation">,</span><span class="token string">&quot;%i %s&quot;</span>
				<span class="token punctuation">,</span><span class="token function">belle_sdp_mime_parameter_get_media_format</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span>
				<span class="token punctuation">,</span><span class="token function">belle_sdp_mime_parameter_get_parameters</span><span class="token punctuation">(</span>mime_parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">belle_sdp_media_description_set_attribute_value</span><span class="token punctuation">(</span>media_description<span class="token punctuation">,</span><span class="token string">&quot;fmtp&quot;</span><span class="token punctuation">,</span>atribute_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里先分析下<code>mime_parameter_is_static</code>方法是干什么的？查看以下源码发现，噢~~，原来是用于判断编解码是否是静态类型(前面提到的Payload Type)</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">static_payload</span> static_payload_list <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span>
	<span class="token comment">/*audio*/</span>
	<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;PCMU&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;GSM&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;G723&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;DVI4&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;DVI4&quot;</span><span class="token punctuation">,</span><span class="token number">16000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;LPC&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;PCMA&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;G722&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;L16&quot;</span><span class="token punctuation">,</span><span class="token number">44100</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;L16&quot;</span><span class="token punctuation">,</span><span class="token number">44100</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;QCELP&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;CN&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;MPA&quot;</span><span class="token punctuation">,</span><span class="token number">90000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;G728&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;DVI4&quot;</span><span class="token punctuation">,</span><span class="token number">11025</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;DVI4&quot;</span><span class="token punctuation">,</span><span class="token number">22050</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;G729&quot;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token comment">/*video*/</span>
	<span class="token punctuation">{</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;CelB&quot;</span><span class="token punctuation">,</span><span class="token number">90000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;JPEG&quot;</span><span class="token punctuation">,</span><span class="token number">90000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;nv&quot;</span><span class="token punctuation">,</span><span class="token number">90000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;H261&quot;</span><span class="token punctuation">,</span><span class="token number">90000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;MPV&quot;</span><span class="token punctuation">,</span><span class="token number">90000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;MP2T&quot;</span><span class="token punctuation">,</span><span class="token number">90000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;H263&quot;</span><span class="token punctuation">,</span><span class="token number">90000</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mime_parameter_is_static</span><span class="token punctuation">(</span><span class="token keyword">const</span> belle_sdp_mime_parameter_t <span class="token operator">*</span>param<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">static_payload</span><span class="token operator">*</span> iterator<span class="token punctuation">;</span>
	size_t i<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>iterator <span class="token operator">=</span> static_payload_list<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>payload_list_elements<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>iterator<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>iterator<span class="token operator">-&gt;</span>number <span class="token operator">==</span> param<span class="token operator">-&gt;</span>media_format <span class="token operator">&amp;&amp;</span>
			<span class="token function">strcasecmp</span><span class="token punctuation">(</span>iterator<span class="token operator">-&gt;</span>type<span class="token punctuation">,</span>param<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
			iterator<span class="token operator">-&gt;</span>channel_count<span class="token operator">==</span>param<span class="token operator">-&gt;</span>channel_count <span class="token operator">&amp;&amp;</span>
			iterator<span class="token operator">-&gt;</span>rate<span class="token operator">==</span>param<span class="token operator">-&gt;</span>rate <span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在再来分析下<code>belle_sdp_media_description_append_values_from_mime_parameter</code>方法的意思，大意如下：如果没有定义<code>BELLE_SDP_FORCE_RTP_MAP</code>这个宏就执行<code>if (!mime_parameter_is_static(mime_parameter))</code>判断编解码是否是静态类型，如果定义了就不判断是否是静态类型</p><p>总结一下就是如果没有定义<code>BELLE_SDP_FORCE_RTP_MAP</code>这个宏，就不组装静态类型编解码的<code>rtpmap</code>信息，只组装动态类型编解码的<code>rtpmap</code>信息，终于找到源头了，真是拨云见日呀</p><p>到这里还没完，既然是根据宏定义做的判断，肯定在编译的时候可以配置，先看看能不能找到定义宏的地方，在IDE中全局搜索，在<code>belle-sip</code>下的<code>CMakeList.txt</code>中发现</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">option</span><span class="token punctuation">(</span>ENABLE_RTP_MAP_ALWAYS_IN_SDP <span class="token string">&quot;Always include rtpmap in SDP.&quot;</span> <span class="token boolean">OFF</span><span class="token punctuation">)</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>ENABLE_RTP_MAP_ALWAYS_IN_SDP<span class="token punctuation">)</span> 
	<span class="token keyword">set</span><span class="token punctuation">(</span>BELLE_SDP_FORCE_RTP_MAP <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bingo~，真的是到最后了</p><p>最后在编译时增加编译配置项</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> linphone-sdk/build/
$ cmake <span class="token parameter variable">-DENABLE_RTP_MAP_ALWAYS_IN_SDP</span><span class="token operator">=</span>ON <span class="token punctuation">..</span>
$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--parallel</span> <span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新编译后拷贝到AS中运行，发起呼叫查看Logcat输出</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在源码中看到通过<code>BELLE_SDP_FORCE_RTP_MAP</code>这个宏控制是否在SDP中包含静态类型编解码的<code>rtpmap</code>信息，个人猜测是静态类型的编解码信息，是协议中固定的，任何遵循协议的实现方，都可以根据静态类型编解码对应的<code>code</code>解析出相应的<code>rtpmap</code>信息，所以在SDP中去掉静态类型编解码器的<code>rtpmap</code>信息，同时也可以减少发送数据包的大小，减轻网络压力</p>`,42);function at(tt,et){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,r,n("p",null,[s("接上篇"),n("a",d,[s("修改linphone-sdk-android-上篇"),t(a)])]),n("p",null,[s("接中篇"),n("a",k,[s("修改linphone-sdk-android-中篇"),t(a)])]),_,n("p",null,[s("这里先了解下SDP协议，参考"),n("a",m,[s("The Session Description Protocol (SDP) (3cx.com)"),t(a)])]),v,n("p",null,[s("下表源自"),n("a",g,[s("Real-Time Transport Protocol (RTP) Parameters (iana.org)"),t(a)])]),n("table",null,[b,n("tbody",null,[n("tr",null,[f,h,y,x,w,n("td",C,[s("["),n("a",P,[s("RFC3551"),t(a)]),s("]")])]),L,A,n("tr",null,[S,q,R,D,N,n("td",E,[s("["),n("a",I,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[T,M,F,j,V,n("td",U,[s("["),n("a",B,[s("Vineet_Kumar"),t(a)]),s("]["),n("a",G,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[O,J,z,H,W,n("td",X,[s("["),n("a",Y,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[$,K,Z,Q,nn,n("td",sn,[s("["),n("a",an,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[tn,en,pn,on,ln,n("td",cn,[s("["),n("a",un,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[rn,dn,kn,_n,mn,n("td",vn,[s("["),n("a",gn,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[bn,fn,hn,yn,xn,n("td",wn,[s("["),n("a",Cn,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[Pn,Ln,An,Sn,qn,n("td",Rn,[s("["),n("a",Dn,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[Nn,En,In,Tn,Mn,n("td",Fn,[s("["),n("a",jn,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[Vn,Un,Bn,Gn,On,n("td",Jn,[s("["),n("a",zn,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[Hn,Wn,Xn,Yn,$n,n("td",Kn,[s("["),n("a",Zn,[s("RFC3389"),t(a)]),s("]")])]),n("tr",null,[Qn,ns,ss,as,ts,n("td",es,[s("["),n("a",ps,[s("RFC3551"),t(a)]),s("]["),n("a",os,[s("RFC2250"),t(a)]),s("]")])]),n("tr",null,[ls,cs,is,us,rs,n("td",ds,[s("["),n("a",ks,[s("RFC3551"),t(a)]),s("]")])]),n("tr",null,[_s,ms,vs,gs,bs,n("td",fs,[s("["),n("a",hs,[s("Joseph_Di_Pol"),t(a)]),s("]")])]),n("tr",null,[ys,xs,ws,Cs,Ps,n("td",Ls,[s("["),n("a",As,[s("Joseph_Di_Pol"),t(a)]),s("]")])]),n("tr",null,[Ss,qs,Rs,Ds,Ns,n("td",Es,[s("["),n("a",Is,[s("RFC3551"),t(a)]),s("]")])]),Ts,Ms,Fs,js,Vs,Us,n("tr",null,[Bs,Gs,Os,Js,zs,n("td",Hs,[s("["),n("a",Ws,[s("RFC2029"),t(a)]),s("]")])]),n("tr",null,[Xs,Ys,$s,Ks,Zs,n("td",Qs,[s("["),n("a",na,[s("RFC2435"),t(a)]),s("]")])]),sa,n("tr",null,[aa,ta,ea,pa,oa,n("td",la,[s("["),n("a",ca,[s("RFC3551"),t(a)]),s("]")])]),ia,ua,n("tr",null,[ra,da,ka,_a,ma,n("td",va,[s("["),n("a",ga,[s("RFC4587"),t(a)]),s("]")])]),n("tr",null,[ba,fa,ha,ya,xa,n("td",wa,[s("["),n("a",Ca,[s("RFC2250"),t(a)]),s("]")])]),n("tr",null,[Pa,La,Aa,Sa,qa,n("td",Ra,[s("["),n("a",Da,[s("RFC2250"),t(a)]),s("]")])]),n("tr",null,[Na,Ea,Ia,Ta,Ma,n("td",Fa,[s("["),n("a",ja,[s("Chunrong_Zhu"),t(a)]),s("]")])]),Va,n("tr",null,[Ua,Ba,Ga,Oa,Ja,n("td",za,[s("["),n("a",Ha,[s("RFC3551"),t(a)]),s("]")])]),Wa,n("tr",null,[Xa,Ya,$a,Ka,Za,n("td",Qa,[s("["),n("a",nt,[s("RFC3551"),t(a)]),s("]")])])])]),st])}const ot=p(i,[["render",at],["__file","修改linphone-sdk-android-第三篇.html.vue"]]);export{ot as default};

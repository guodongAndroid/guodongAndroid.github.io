import{_ as t,Y as o,Z as n,$ as e,a0 as s}from"./framework-3d290349.js";const _={},a=e("h1",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),c=e("p",null,"到目前为止，您已经了解了如何使用协程和可挂起函数来桥接线程并执行不会给程序增加太多开销的异步工作。您还看到了如何从基于回调的 API 迁移到基于协程的 API，后者具有常规函数的签名，并在调用时返回您需要的值。这些函数实际上是阻塞的，但可能是异步的。",-1),r=e("p",null,"在本章中，您将看到如何构建类似的机制，这些机制不会阻塞并且可以异步和并行工作。它们同样可以返回值，就像您调用标准函数一样。听起来不错吧？好吧，您会看到所有这些功能实际上是一个比较老的概念，让我们开始吧！",-1),d=[a,c,r];function i(l,h){return o(),n("div",null,d)}const u=t(_,[["render",i],["__file","00.intro.html.vue"]]);export{u as default};

import{_ as e,Y as t,Z as p,$ as a,a0 as n,a1 as o,a2 as c,a3 as l,E as i}from"./framework-3d290349.js";const u="/book/assets/1.platform-uml-63314cac.jpg",d={},r=a("h2",{id:"前言",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),k=a("code",null,"Buidler#build()",-1),v=a("code",null,"Retrofit",-1),m=a("code",null,"Platform",-1),b=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Platform</span> platform <span class="token operator">=</span> <span class="token class-name">Platform</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于 <code>Retrofit</code> 是支持 Java 和 Android 多平台的第三方库，所以它内部需要判断当前运行的平台类型，针对不同的平台提供不同的参数与实现。</p><p>本篇文章我们就学习下 <code>Retrofit</code> 中是如何对多平台做差异化处理的，所以本文主要学习 <code>Platform</code> 类。</p><h2 id="platform" tabindex="-1"><a class="header-anchor" href="#platform" aria-hidden="true">#</a> Platform</h2><p>我们先总览下 <code>Platform</code> 的类图关系：</p><p><img src="`+u+`" alt="Platfrom UML" loading="lazy"></p><p>通过类图可以看出，Retrofit 主要支持 Java 和 Android 平台，并且同一平台也适配了不同的版本，可以说非常强大。</p><p>其中的 RoboVm 平台笔者也不大了解，这里我们就不再介绍了。</p><p><code>Platform</code> 本身是个抽象类，它一共有七个方法，其中两个是静态方法，其余的都是抽象方法。</p><p>两个静态方法分别是：<code>get()</code> 和 <code>createPlatform()</code> ，其中 <code>createPlatform()</code> 是私有静态方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Platform</span> <span class="token constant">PLATFORM</span> <span class="token operator">=</span> <span class="token function">createPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token class-name">Platform</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">PLATFORM</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Platform</span> <span class="token function">createPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.vm.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&quot;Dalvik&quot;</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Android24</span><span class="token punctuation">.</span><span class="token function">isSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Android24</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Android21</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;RoboVM&quot;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RoboVm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Java16</span><span class="token punctuation">.</span><span class="token function">isSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Java16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Java14</span><span class="token punctuation">.</span><span class="token function">isSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Java14</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Java8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createPlatform()</code> 方法在类加载时调用，用于构建 <code>Platform</code> 的实例：</p><ol><li>通过 <code>System.getProperty(&quot;java.vm.name&quot;)</code> 获取当前 Java 虚拟机的名称，</li><li>根据 Java 虚拟机的名称判断当前运行的平台类型，</li><li>我们知道 &quot;Dalvik&quot; 是 Android 平台上的虚拟机实现，除开 &quot;RoboVM&quot;，即认为是 Java 平台。</li></ol><p><code>get()</code> 方法比较简单，直接返回 <code>Platform</code> 的实例。</p><p>下面我们看看 <code>Platform </code> 提供的五个抽象方法，这些抽象方法才是 <code>Platform</code> 的核心。</p><h3 id="defaultcallbackexecutor" tabindex="-1"><a class="header-anchor" href="#defaultcallbackexecutor" aria-hidden="true">#</a> <code>defaultCallbackExecutor</code></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Executor</span> <span class="token function">defaultCallbackExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>defaultCallbackExecutor</code> 方法用于获取平台默认的回调执行器，即请求成功或失败后回调结果在哪个线程执行。</p><h3 id="createdefaultcalladapterfactories" tabindex="-1"><a class="header-anchor" href="#createdefaultcalladapterfactories" aria-hidden="true">#</a> <code>createDefaultCallAdapterFactories</code></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CallAdapter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> <span class="token function">createDefaultCallAdapterFactories</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Executor</span> callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>createDefaultCallAdapterFactories</code> 方法用于获取平台默认的适配器工厂，即我们定义的接口方法返回值适配器，比如：<code>Call&lt;T&gt;</code>，<code>Observable&lt;String&gt;</code> ，<code>CompletableFuture&lt;String&gt;</code> 等。</p><h3 id="createdefaultconverterfactories" tabindex="-1"><a class="header-anchor" href="#createdefaultconverterfactories" aria-hidden="true">#</a> <code>createDefaultConverterFactories</code></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> <span class="token function">createDefaultConverterFactories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>createDefaultConverterFactories</code> 方法用于获取平台默认的转换器工厂，主要用于转换调用 http 接口返回的数据为我们定义的接口方法返回值内的泛型类型，比如 http 接口返回 JSON 数据，我们定义的返回值为 <code>Call&lt;User&gt;</code>，那么转换器会把 接口返回的 JSON 数据转换为 User 类型的实例。</p><h3 id="isdefaultmethod" tabindex="-1"><a class="header-anchor" href="#isdefaultmethod" aria-hidden="true">#</a> <code>isDefaultMethod</code></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">isDefaultMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>isDefaultMethod</code> 方法用于判断在当前平台下，入参 <code>Method</code> 是否是默认方法，因为 Java8 开始接口支持定义默认方法。</p><h3 id="invokedefaultmethod" tabindex="-1"><a class="header-anchor" href="#invokedefaultmethod" aria-hidden="true">#</a> <code>invokeDefaultMethod</code></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> <span class="token function">invokeDefaultMethod</span><span class="token punctuation">(</span>
      <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaringClass<span class="token punctuation">,</span> <span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面介绍的 <code>isDefaultMethod</code> 方法判断入参 <code>Method</code> 是否是默认方法，如果是默认方法则通过 <code>invokeDefaultMethod</code> 方法根据不同平台类型实现调用默认方法。</p><p><code>Platform</code> 提供的方法我们已经分析完毕，接下来我们看看不同平台的实现吧（RoboVm 除外）。由于笔者是 Android 开发者，比较关注 Android 平台上的实现，所以我们先看看 Android 平台下的实现。</p><h2 id="android-平台" tabindex="-1"><a class="header-anchor" href="#android-平台" aria-hidden="true">#</a> Android 平台</h2><p>Android 平台下提供了两个针对 Android 版本的实现：<code>Android21</code> 和 <code>Android24</code> 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Android21</span> <span class="token keyword">extends</span> <span class="token class-name">Platform</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">boolean</span> <span class="token function">isDefaultMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">Object</span> <span class="token function">invokeDefaultMethod</span><span class="token punctuation">(</span>
        <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaringClass<span class="token punctuation">,</span> <span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">Executor</span> <span class="token function">defaultCallbackExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">MainThreadExecutor</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CallAdapter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> <span class="token function">createDefaultCallAdapterFactories</span><span class="token punctuation">(</span>
        <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Executor</span> callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultCallAdapterFactory</span><span class="token punctuation">(</span>callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> <span class="token function">createDefaultConverterFactories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Android21</code> 比较简单，Android API 21 还不支持 Java8，所以：</p><ol><li>判断是否是默认方法直接返回 false，</li><li>调用默认方法直接抛出异常，</li><li>适配器工厂集合只有默认的适配器工厂，</li><li>转换器工厂集合是空集合，</li><li>回调执行器是主线程执行器。</li></ol><p><code>Android24</code> 开始支持 Java8，它比 <code>Android21</code> 复杂一些：</p><ol><li>判断是否是默认方法，通过 <code>method.isDefault();</code> 判断，</li><li>调用默认方法比较复杂，首先判断了 API 版本，即 API 24 和 25 还不支持默认方法，API 26 才开始支持默认版本，接下来通过反射调用默认方法，</li><li>适配器工厂集合除了有默认的适配器工厂外，由于 Java8 支持 <code>CompletableFuture</code> ，所以增加了 <code>CompletableFutureCallAdapterFactory</code> ，</li><li>转换器工厂也不再是空集合，由于 Java8 支持 <code>Optional</code> ，所以增加了 <code>OptionalConverterFactory</code> ，</li><li>回调执行器没有变化，还是主线程执行器。</li></ol><h3 id="主线程执行器" tabindex="-1"><a class="header-anchor" href="#主线程执行器" aria-hidden="true">#</a> 主线程执行器</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MainThreadExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Executor</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MainThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        handler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主线程执行器的实现比较简单，直接实现 <code>Executor</code> 接口，在实现的接口方法中，通过 Android 平台上的 <code>Handler</code> 分发到主线程运行。</p><h2 id="java-平台" tabindex="-1"><a class="header-anchor" href="#java-平台" aria-hidden="true">#</a> Java 平台</h2><p>Java 平台下提供了三个针对 Java 版本的实现：<code>Java8</code> , <code>Java14</code> 和 <code>Java16</code> 。</p><p>我们还是先以 <code>Java8</code> 为基准与其他两个进行差异对比吧。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Java8</span> <span class="token keyword">extends</span> <span class="token class-name">Platform</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Lookup</span><span class="token punctuation">&gt;</span></span> lookupConstructor<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">Executor</span> <span class="token function">defaultCallbackExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CallAdapter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> <span class="token function">createDefaultCallAdapterFactories</span><span class="token punctuation">(</span>
        <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Executor</span> callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">asList</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">CompletableFutureCallAdapterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">DefaultCallAdapterFactory</span><span class="token punctuation">(</span>callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> <span class="token function">createDefaultConverterFactories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptionalConverterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDefaultMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> <span class="token function">invokeDefaultMethod</span><span class="token punctuation">(</span>
        <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaringClass<span class="token punctuation">,</span> <span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Lookup</span><span class="token punctuation">&gt;</span></span> lookupConstructor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lookupConstructor<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lookupConstructor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lookupConstructor <span class="token operator">=</span> <span class="token class-name">Lookup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lookupConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>lookupConstructor <span class="token operator">=</span> lookupConstructor<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> lookupConstructor
            <span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>declaringClass<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* trusted */</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">unreflectSpecial</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> declaringClass<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">bindTo</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">invokeWithArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取 Java 版本</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> version <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> feature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> version<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;feature&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> feature <span class="token operator">&gt;=</span> <span class="token number">14</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Java8</code> 与 <code>Android24</code> 非常类似，只有一点不同：它没有回调执行器，即接口数据在哪个线程返回，结果回调就在哪个线程执行。</p><p><code>Java14</code> 与 <code>Java8</code> 相比，只是在调用默认方法的实现上有些不同，看 <code>Java14</code> 的类注释，说 <code>Java14</code> 有提供调用默认方法的常规 API。</p><p><code>Java16</code> 与 <code>Java14</code> 相比，也是在调用默认方法的实现上有些不同，看 <code>Java16</code> 的类注释，说 <code>Java16</code> 提供了在代理上调用默认方法的公共 API。</p><h2 id="总结与思考" tabindex="-1"><a class="header-anchor" href="#总结与思考" aria-hidden="true">#</a> 总结与思考</h2><p>虽然 <code>Retrofit</code> 与多平台相关的代码比较少，但是我们还是可以学到不少知识点：</p><ol><li><code>Retrofit</code> 通过定义抽象类和抽象方法，不同平台实现各自的逻辑来隔离外部调用方对平台类型的无感知。这种定义上层接口，下层逻辑各自实现的设计原则与设计模式非常值得我们学习。</li><li>通过 <code>System.getProperty(&quot;java.vm.name&quot;)</code> 获取当前 Java 虚拟机的名称，我们自己写开源库时或许可以用的上，</li><li>如何获取当前系统支持 Java 版本，或许可以从 <code>Java14</code> 或 <code>Java16</code> 中的 <code>isSupported()</code> 方法中找到答案，</li><li>对于不同平台，不同版本如何调用接口默认方法，我们是不是也学到了呢，</li><li>通过分析 Android 主线程执行器的实现，我们可以举一反三，自己定义 Java 平台的回调执行器吧。</li></ol><p>好啦，就到这里吧，下期再见，希望可以帮你更好的使用 <code>Retrofit</code> 。</p><p>happy~~</p>`,53);function f(h,y){const s=i("RouterLink");return t(),p("div",null,[r,a("p",null,[n("在上一篇 "),o(s,{to:"/SourceCodeAnalysis/Retrofit/0.%E6%9E%84%E5%BB%BARetrofit.html"},{default:c(()=>[n("构建Retrofit")]),_:1}),n(" 文章的最后，在真正通过 "),k,n(" 方法去构建 "),v,n(" 实例时，我们有看到 "),m,n(" 相关的代码：")]),b])}const g=e(d,[["render",f],["__file","1.多平台.html.vue"]]);export{g as default};

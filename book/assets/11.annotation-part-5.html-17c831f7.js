import{_ as d}from"./7.annotation-type-8860ced4.js";import{_ as p,Y as l,Z as i,$ as n,a0 as a,a1 as e,a2 as r,a3 as t,E as o}from"./framework-3d290349.js";const u={},k=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1),m=n("code",null,"Field",-1),h=n("code",null,"Part",-1),v=t('<p><img src="'+d+'" alt="annotation-type" loading="lazy"></p><p>从上图可以看出与 <code>Part</code> 相关的注解有：</p><ul><li><code>@Part</code></li><li><code>@PartMap</code></li></ul><h2 id="multipart-form-data" tabindex="-1"><a class="header-anchor" href="#multipart-form-data" aria-hidden="true">#</a> <code>multipart/form-data</code></h2><p>在 Retrofit 中与 <code>@Part</code> 注解相关的是 <code>@Multipart</code> 注解，在 HTTP 中与 <code>@Multipart</code> 注解相关的是 <code>multipart/form-data</code> 编码方式，所以我们先简单学习下 <code>multipart/form-data</code> 相关的知识，来更好的理解 <code>@Part</code> 注解的作用。</p>',5),f=n("code",null,"multipart/form-data",-1),b={href:"https://datatracker.ietf.org/doc/html/rfc7578#section-4",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"multipart/form-data",-1),P=n("code",null,"Part",-1),_=n("code",null,"Part",-1),y=n("code",null,"boundary",-1),q=t(`<p>以下是一个简单的 <code>multipart/form-data</code> 请求示例：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/user/upload</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">multipart/form-data; boundary=123456</span></span>
 
--123456
<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name=&quot;username&quot;</span></span>
guodongAndroid
--123456
<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name=&quot;file&quot;; filename=&quot;水墨西湖.jpg&quot;;</span></span>
&lt;水墨西湖.jpg&gt;
--123456--
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第2行：<code>Content-Type</code> 请求头的值是我们设置的 <code>multipart/form-data</code> 编码方式，它有一个必选参数 <code>boundary</code>，用于分隔每个 <code>Part</code>，</li><li>第3行：空白行，</li><li>第4行：<code>Part</code> 的分隔符，格式为：<code>--&lt;boundary&gt;</code>，</li><li>第5行：<code>Part</code> 部分的必选头字段：<code>Content-Disposition</code>，其值必须为：<code>form-data</code>，必须包含一个 <code>name</code> 的参数，</li><li>第6行：<code>Part</code> 部分的内容（body）</li><li>第7行：<code>Part</code> 的分隔符，格式为：<code>--&lt;boundary&gt;</code>，</li><li>第8行：<code>Part</code> 部分的必选头字段：<code>Content-Disposition</code>，其值必须为：<code>form-data</code>，必须包含一个 <code>name</code> 的参数，如果是文件，还可以包含一个 <code>filename</code> 参数，</li><li>第9行：文件的二进制数据，此处以文字代替，</li><li>第10行：最后一个 <code>Part</code> 结尾符，格式为：<code>--&lt;boundary&gt;--</code>，</li></ul><p>通过上述示例，对于 <code>Part</code> 我们可以简单理解：就是我们需要传入的数据。</p>`,4),M=n("code",null,"Part",-1),T={href:"https://datatracker.ietf.org/doc/html/rfc2046#section-5.1",target:"_blank",rel:"noopener noreferrer"},x=t(`<h2 id="part" tabindex="-1"><a class="header-anchor" href="#part" aria-hidden="true">#</a> <code>@Part</code></h2><p><code>@Part</code> 注解标记HTTP接口方法中的一个参数，表示这个参数是 <code>Form</code> 表单里的一个 <code>Part</code>。</p><p><code>@Part</code> 注解有两个参数，分别为：</p><ol><li><p><code>value</code>：可选参数，表示 <code>Part</code> 中 <code>name</code> 参数的值，</p></li><li><p><code>encoding</code>：可选参数，表示 <code>Part</code> 中的可选头字段 <code>Content-Transfer-Encoding</code> 的值，Retrofit 默认：<code>binary</code>，HTTP协议默认：<code>7-bit</code>,</p></li></ol><p>简单使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Multipart</span>
	<span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> lang<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Service</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">&quot;zh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Part</code> 注解使用时有以下几点需要注意：</p><ol><li><p><code>@Part</code> 注解仅能在被 <code>@Multipart</code> 注解标注的方法中使用，否则抛出异常，</p></li><li><p>如果注解标记的参数类型是 <code>okhttp3.MultipartBody.Part</code>，<code>value</code> 参数的值取自 <code>okhttp3.MultipartBody.Part</code> 中，<code>value</code> 参数不可填充值，否则抛出异常，</p><ol><li>可以标记 <code>okhttp3.MultipartBody.Part</code> 的集合和数组类型，</li></ol></li><li><p>如果注解标记的参数类型是其他类型，<code>value</code> 参数必须填充值，否则抛出异常，</p><ol><li>其他类型的参数值会经过 <code>Retrofit#requestBodyConverter(Type, Annotation[], Annotation[])</code> 转换，</li></ol></li><li><p>如果参数值为 <code>null</code>，则会被忽略，</p></li></ol><table><thead><tr><th style="text-align:left;">标记参数类型</th><th><code>value</code> 是否填充</th><th><code>encoding</code> 是否有效</th></tr></thead><tbody><tr><td style="text-align:left;"><code>okhttp3.MultipartBody.Part</code></td><td>必须为空</td><td>无效</td></tr><tr><td style="text-align:left;">其他类型</td><td>必须填充</td><td>有效</td></tr></tbody></table><h2 id="partmap" tabindex="-1"><a class="header-anchor" href="#partmap" aria-hidden="true">#</a> <code>@PartMap</code></h2><p><code>@PartMap</code> 注解标记HTTP接口方法中的一个参数，表示这个参数是 <code>Form</code> 表单里的一个或多个 <code>Part</code>。</p><p><code>@PartMap</code> 注解目前只有一个参数：</p><ol><li><code>encoding</code>：可选参数，表示 <code>Part</code> 中的可选头字段 <code>Content-Transfer-Encoding</code> 的值，Retrofit 默认：<code>binary</code>，HTTP协议默认：<code>7-bit</code>,</li></ol><p>简单使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Multipart</span>
	<span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> lang<span class="token punctuation">,</span> <span class="token annotation punctuation">@PartMap</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Service</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">&quot;zh&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ImmutableMap</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@PartMap</code> 注解使用时有以下几点需要注意：</p><ol><li><code>@PartMap</code> 注解仅能在被 <code>@Multipart</code> 注解标注的方法中使用，否则抛出异常，</li><li>被标注的参数类型必须是 <code>Map</code>，否则抛出异常，</li><li><code>Map</code> 中键的类型必须是 <code>String</code> 类型，否则抛出异常，如果键的值为 <code>null</code>，则抛出异常，</li><li><code>Map</code> 中值的类型不能是 <code>okhttp3.MultipartBody.Part</code> ，否则抛出异常，</li><li><code>Map</code> 中值如果值为 <code>null</code> ，则抛出异常，</li><li><code>Map</code> 中值会经过 <code>Retrofit#requestBodyConverter(Type, Annotation[], Annotation[])</code> 转换，如果转换后的值为 <code>null</code>，则抛出异常，</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>@Part</code> 和 <code>@PartMap</code> 注解与 <code>@Field</code> 和 <code>@FieldMap</code> 注解在类型和适用场景方面非常类似：</p><table><thead><tr><th>注解</th><th>类型</th><th>适用场景</th></tr></thead><tbody><tr><td><code>@Part</code></td><td>动态</td><td>明确 <code>name</code> 参数值，不明确 <code>Part</code> 内容</td></tr><tr><td><code>@PartMap</code></td><td>动态</td><td><code>name</code> 参数值和 <code>Part</code> 内容都不明确</td></tr></tbody></table><p>但是，在功能支持方面，<code>@Part</code> 和 <code>@PartMap</code> 注解相当于 <code>@Field</code> 和 <code>@FieldMap</code> 注解要强大一些：前者支持文件上传，由于文件上传较为复杂，操作步骤较多，那么前者的易用性自然就有所降低。</p><p>总之，<code>@Part</code> 和 <code>@PartMap</code> 注解在使用时还是需要多多注意的。</p><p>希望可以帮你更好的使用 Retrofit，happy~</p>`,23);function C(S,R){const c=o("RouterLink"),s=o("ExternalLinkIcon");return l(),i("div",null,[k,n("p",null,[a("在上一篇文章 "),e(c,{to:"/SourceCodeAnalysis/Retrofit/10.annotation-part-4.html"},{default:r(()=>[a("请求参数注解(三)")]),_:1}),a(" 中我们学习了 "),m,a(" 注解，本篇文章我们学习了 "),h,a(" 相关的注解。")]),v,n("p",null,[f,a(" 是表单提交中的一种编码方式，它的定义可以参考 "),n("a",b,[a("RFC-7578 4.1章节"),e(s)]),a("，简单理解："),g,a(" 可以包含一个或多个 "),P,a("，每个 "),_,a(" 之间由 "),y,a(" 参数分隔。")]),q,n("blockquote",null,[n("p",null,[a("有关 "),M,a(" 的详细信息可以参考 "),n("a",T,[a("RFC-2046 5.1章节"),e(s)]),a("。")])]),x])}const j=p(u,[["render",C],["__file","11.annotation-part-5.html.vue"]]);export{j as default};

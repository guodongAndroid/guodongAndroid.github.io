import{_ as n,Y as a,Z as e,a3 as s}from"./framework-3d290349.js";const t={},o=s(`<h1 id="协程的历史演进" tabindex="-1"><a class="header-anchor" href="#协程的历史演进" aria-hidden="true">#</a> 协程的历史演进</h1><p>如前所述，协程是一个过时但功能强大的概念。多年以来，有几种编程语言已经发展了它们自己的协程实现版本。例如，在 Python 和 Smalltalk 等语言中，协程是一等公民，无需外部库即可使用。</p><p>Python 中的生成器如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">coroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        value <span class="token operator">=</span> <span class="token keyword">yield</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>’Received a value<span class="token punctuation">:</span>’<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上诉代码定义了一个函数，在函数中有一个死循环，在死循环中监听并打印你发送给它的任何参数。监听数据的死循环的逻辑称为生成器。关键字 <code>yield</code> 是触发生成器与接收值的关键。如你所见，函数中有一个 <code>while True</code> 语句。由于没有退出条件，在常规代码中，这将创建一个标准的死循环并阻塞程序运行。但这是一个基于协程的调用，所以它会在后台等待，直到你向函数发送一些值，因此它不会阻塞程序运行。</p><p>另一种把协程作为一等公民的语言是 C#。C# 与 Python 同样支持 <code>yield</code> 语句，但 C# 也支持 <code>async</code> 和 <code>await</code> 调用，如下所示：</p><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>MyResult result = await AsyncMethodThatReturnsAResult();
await AsyncMethodWithoutAResult();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过添加 <code>await</code> 关键字，你可以使用正常的代码顺序返回异步结果。这几乎和你在前面第一次了解协程时的示例一样。</p><p>Python 和 C# 都对协程提供一等公民的支持。通过把协程引入语言层面，这样你就无需引用任何第三方框架就可以编写异步程序。很多其他的语言通过第三方库来支持使用协程进行编程。Kotlin 同样有协程标准库支持。此外，Kotlin 协程还使用全局和扩展函数与接收者构建的方式，使得它们非常容易扩展。你也可以在现有函数的基础上构建自己的 API。</p><p>你将在本书的后续章节中看到如何实现这一点。</p>`,10),c=[o];function i(l,d){return a(),e("div",null,c)}const r=n(t,[["render",i],["__file","09.variations-through-history.html.vue"]]);export{r as default};

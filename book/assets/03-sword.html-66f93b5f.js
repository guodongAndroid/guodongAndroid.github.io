import{_ as i,Y as l,Z as r,$ as n,a1 as a,a2 as t,a0 as s,a3 as p,E as o}from"./framework-3d290349.js";const u={},d=n("h1",{id:"sword-为-kotlin-函数增加代理功能-四-kotlin-ir",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sword-为-kotlin-函数增加代理功能-四-kotlin-ir","aria-hidden":"true"},"#"),s(" Sword - 为 Kotlin 函数增加代理功能(四) - Kotlin IR")],-1),k=n("h2",{id:"简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),s(" 简介")],-1),v=n("p",null,"Sword：一个可以给 Kotlin 函数增加代理的第三方库，基于 KCP 实现。",-1),m=p(`<p>前面三篇文章笔者记录了 <code>Sword</code> 的实现过程，如何使用 <code>Sword</code> 以及如何通过 <code>KSP</code> 为 <code>InvocationHandler</code> 生成 <code>FqName</code> 索引类 <code>HandlerFqName</code>。</p><p>在第三篇文章的最后笔者有一个新的想法：通过 <code>Kotlin IR</code> 重新实现 <code>Sword</code> 的功能。经过最近几天晚上和早晨的努力，笔者初步实现了 <code>Sword</code> 的功能，可能还有一些问题，但是效果已经达到了笔者的预期，遂本篇文章记录下笔者的实现过程。</p><p><code>Kotlin IR</code> 是什么以及可以做什么，本文不再赘述，网上有不少资料，读者可以自行参考。</p><h2 id="预期效果" tabindex="-1"><a class="header-anchor" href="#预期效果" aria-hidden="true">#</a> 预期效果</h2><p>假设有以下类(<code>GetTextNoArgInvocationHandler</code>)和函数(<code>getTextNoArg()</code>)：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@ProxyHandler</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;GET_TEXT_NO_ARG&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">class</span> GetTextNoArgInvocationHandler <span class="token operator">:</span> InvocationHandler <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> GetTextNoArgInvocationHandler<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>simpleName

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>className<span class="token operator">:</span> String<span class="token punctuation">,</span> methodName<span class="token operator">:</span> String<span class="token punctuation">,</span> args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Any<span class="token operator">?</span> <span class="token punctuation">{</span>
        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;invoke: className = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">className</span></span><span class="token string">, methodName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">methodName</span></span><span class="token string">, args(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">args<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">args<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;guodongAndroid-Debug&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// -----------------------------------------------------------------------------------------------------------------------</span>

<span class="token annotation builtin">@Proxy</span><span class="token punctuation">(</span>
    enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    handler <span class="token operator">=</span> HandlerFqName<span class="token punctuation">.</span>GET_TEXT_NO_ARG
<span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">getTextNoArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;guodongAndroid&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>Kotlin IR</code> 编译和 <code>Sword</code> 代理后，笔者期望 <code>getTextNoArg</code> 函数转换成类似下面的伪代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Proxy</span><span class="token punctuation">(</span>
    enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    handler <span class="token operator">=</span> HandlerFqName<span class="token punctuation">.</span>GET_TEXT_NO_ARG
<span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">getTextNoArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">GetTextNoArgInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Test&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;getTextNoArg&quot;</span></span><span class="token punctuation">,</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> String
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="swordcomponentregistrar" tabindex="-1"><a class="header-anchor" href="#swordcomponentregistrar" aria-hidden="true">#</a> SwordComponentRegistrar</h2><p>要使用 <code>IR</code> 首先需要注册 <code>IrGenerationExtension</code> 扩展，修改之前 <code>SwordComponentRegistrar</code> 中的代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> SwordComponentRegistrar <span class="token operator">:</span> ComponentRegistrar <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">registerProjectComponents</span><span class="token punctuation">(</span>
        project<span class="token operator">:</span> MockProject<span class="token punctuation">,</span>
        configuration<span class="token operator">:</span> CompilerConfiguration
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> messageCollector <span class="token operator">=</span>
	        configuration<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>CLIConfigurationKeys<span class="token punctuation">.</span>MESSAGE_COLLECTOR_KEY<span class="token punctuation">,</span> MessageCollector<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span>

        <span class="token comment">/*ClassBuilderInterceptorExtension.registerExtension(
            project,
            SwordClassGenerationInterceptor(messageCollector)
        )*/</span>

        IrGenerationExtension<span class="token punctuation">.</span><span class="token function">registerExtension</span><span class="token punctuation">(</span>
            project<span class="token punctuation">,</span>
            <span class="token function">SwordIrGenerationExtension</span><span class="token punctuation">(</span>messageCollector<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中：</p><ol><li>注释掉之前通过 <code>ASM</code> 修改字节码的 <code>ClassBuilderInterceptorExtension</code> 扩展，</li><li>新增 <code>IrGenerationExtension</code> 扩展。</li></ol><h2 id="dump" tabindex="-1"><a class="header-anchor" href="#dump" aria-hidden="true">#</a> Dump</h2><p>在 <code>IR</code> 语法树中，所有的节点都实现了 <code>IrElement</code> 接口，这些节点可以是模块，包，文件，类，属性，函数，参数，表达式，函数调用、函数体等等。</p><p>那么这些节点是什么样子的呢？实现我们的 <code>SwordIrGenerationExtension</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">SwordIrGenerationExtension</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> messageCollector<span class="token operator">:</span> MessageCollector<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">:</span> IrGenerationExtension <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">generate</span><span class="token punctuation">(</span>moduleFragment<span class="token operator">:</span> IrModuleFragment<span class="token punctuation">,</span> pluginContext<span class="token operator">:</span> IrPluginContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
            CompilerMessageSeverity<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span>
            moduleFragment<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>IrElement</code> 的扩展函数 <code>dump</code> 可以输出这些节点的语法树信息。</p><p>在上面的代码中，我们输出了整个模块节点的语法树信息，如果模块中有许多文件，类，那么这些信息是相当庞大的，<code>Sword</code> 的目标是 <code>Kotlin</code> 函数，所以此处笔者不再贴出模块节点的语法树信息，等到我们转换函数时，再看看函数节点的语法树信息。</p><p>假设我们不知道如何编写 <code>IR</code> 编译器插件的代码，我们可以先写出要实现效果的 <code>Kotlin</code> 代码，再借助 <code>dump</code> 函数输出 <code>IR</code> 语法树信息，参考且对比语法树信息进行开发 <code>IR</code> 编译器插件，所以 <code>dump</code> 在开发 <code>IR</code> 编译器插件时非常有用。</p><h2 id="irelement" tabindex="-1"><a class="header-anchor" href="#irelement" aria-hidden="true">#</a> IrElement</h2><p>前面说了很多 <code>IrElement</code> 接口，目前我们还不知道它的真面目，接下来让我们看看它吧：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> IrElement <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>

    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>R<span class="token punctuation">,</span> D<span class="token operator">&gt;</span> <span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token operator">:</span> IrElementVisitor<span class="token operator">&lt;</span>R<span class="token punctuation">,</span> D<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span><span class="token operator">:</span> R
    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>D<span class="token operator">&gt;</span> <span class="token function">acceptChildren</span><span class="token punctuation">(</span>visitor<span class="token operator">:</span> IrElementVisitor<span class="token operator">&lt;</span>Unit<span class="token punctuation">,</span> D<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span>

    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>D<span class="token operator">&gt;</span> <span class="token function">transform</span><span class="token punctuation">(</span>transformer<span class="token operator">:</span> IrElementTransformer<span class="token operator">&lt;</span>D<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span><span class="token operator">:</span> IrElement
    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>D<span class="token operator">&gt;</span> <span class="token function">transformChildren</span><span class="token punctuation">(</span>transformer<span class="token operator">:</span> IrElementTransformer<span class="token operator">&lt;</span>D<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>IrElement</code> 中有四个接口函数，其中 <code>accept</code> 函数基于访问者模式访问各个节点，<code>transform</code> 函数又是基于 <code>accept</code> 函数提供修改节点语法树的能力。</p><p><code>accept</code> 函数中的参数 <code>IrElementVisitor</code> 接口提供了访问各个节点的函数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> IrElementVisitor<span class="token operator">&lt;</span><span class="token keyword">out</span> R<span class="token punctuation">,</span> <span class="token keyword">in</span> D<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">fun</span> <span class="token function">visitElement</span><span class="token punctuation">(</span>element<span class="token operator">:</span> IrElement<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span><span class="token operator">:</span> R
    <span class="token keyword">fun</span> <span class="token function">visitModuleFragment</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrModuleFragment<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">visitElement</span><span class="token punctuation">(</span>declaration<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">visitPackageFragment</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrPackageFragment<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">visitElement</span><span class="token punctuation">(</span>declaration<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">visitFile</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrFile<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">visitPackageFragment</span><span class="token punctuation">(</span>declaration<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>
    
    <span class="token keyword">fun</span> <span class="token function">visitDeclaration</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrDeclarationBase<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">visitElement</span><span class="token punctuation">(</span>declaration<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">visitClass</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrClass<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">visitDeclaration</span><span class="token punctuation">(</span>declaration<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">visitFunction</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrFunction<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">visitDeclaration</span><span class="token punctuation">(</span>declaration<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>IrElementVisitor</code> 中有非常多接口函数，上面代码片段列举了一些接口函数，这些接口函数大多数都有默认实现，仔细观察这些函数的默认实现，最后都直接或间接的调用到 <code>visitElement</code> 函数。</p><p><code>transform</code> 函数中的参数 <code>IrElementTransformer</code> 接口继承自 <code>IrElementVisitor</code> 接口，<code>IrElementTransformer</code> 接口主要是实现了 <code>IrElementVisitor</code> 的接口函数并调用 <code>IrElement.transformChildren</code> 函数遍历节点修改节点的语法树：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> IrElementTransformer<span class="token operator">&lt;</span><span class="token keyword">in</span> D<span class="token operator">&gt;</span> <span class="token operator">:</span> IrElementVisitor<span class="token operator">&lt;</span>IrElement<span class="token punctuation">,</span> D<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitElement</span><span class="token punctuation">(</span>element<span class="token operator">:</span> IrElement<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span><span class="token operator">:</span> IrElement <span class="token punctuation">{</span>
        element<span class="token punctuation">.</span><span class="token function">transformChildren</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> element
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitModuleFragment</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrModuleFragment<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span><span class="token operator">:</span> IrModuleFragment <span class="token punctuation">{</span>
        declaration<span class="token punctuation">.</span><span class="token function">transformChildren</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> declaration
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitFile</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrFile<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> D<span class="token punctuation">)</span><span class="token operator">:</span> IrFile <span class="token punctuation">{</span>
        declaration<span class="token punctuation">.</span><span class="token function">transformChildren</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> declaration
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Sword</code> 中，我们主要利用 <code>transform</code> 函数修改节点语法树的能力来实现为 <code>Kotlin</code> 函数增加代理功能。</p><h2 id="irtype-irsymbol" tabindex="-1"><a class="header-anchor" href="#irtype-irsymbol" aria-hidden="true">#</a> IrType &amp; IrSymbol</h2><p>在 <code>IR</code> 中不仅有 <code>IrElement</code> 还有 <code>IrType</code> 和 <code>IrSymbol</code> 。那么这两个有什么作用呢？</p><h3 id="irtype" tabindex="-1"><a class="header-anchor" href="#irtype" aria-hidden="true">#</a> IrType</h3><p><code>IrType</code> 可以说是 <code>KotlinType</code> 在 <code>IR</code> 中的另一种表现形式，表示 <code>Kotlin</code> 中的各种类型，比如 <code>Any</code>，<code>Boolean</code>，<code>Int</code>，<code>String</code> 等等。<code>IrType</code> 常用在比较函数参数类型，调用函数时传入参数类型等，举个 <code>Sword</code> 中的栗子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> anyNType <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span>irBuiltIns<span class="token punctuation">.</span>anyNType
<span class="token keyword">private</span> <span class="token keyword">val</span> stringType <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span>irBuiltIns<span class="token punctuation">.</span>stringType
<span class="token keyword">private</span> <span class="token keyword">val</span> arrayAnyNType <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span>irBuiltIns<span class="token punctuation">.</span>arrayClass<span class="token punctuation">.</span><span class="token function">typeWith</span><span class="token punctuation">(</span>anyNType<span class="token punctuation">)</span>

<span class="token comment">// \`InvocationHandler.invoke(className: String, methodName: String, args: Array&lt;Any?&gt;): Any?\`</span>
<span class="token keyword">val</span> invokeSymbol <span class="token operator">=</span>
	pluginContext<span class="token punctuation">.</span><span class="token function">referenceFunctions</span><span class="token punctuation">(</span><span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">param<span class="token punctuation">.</span>handler</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">INVOKE_METHOD_NAME</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">single</span> <span class="token punctuation">{</span>
    		<span class="token keyword">val</span> valueParameters <span class="token operator">=</span> it<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>valueParameters
    		valueParameters<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span>
    		valueParameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> stringType <span class="token operator">&amp;&amp;</span>
    		valueParameters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> stringType <span class="token operator">&amp;&amp;</span>
    		valueParameters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> arrayAnyNType
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码片段中 <code>pluginContext</code> 是 <code>IrGenerationExtension.generate</code> 函数中的第二个参数，通过它的 <code>irBuiltIns</code> 字段我们获取一些 <code>Kotlin</code> 内置的 <code>IrType</code>。</p><ul><li><code>anyNType</code> 表示 <code>Kotlin</code> 中的 <code>Any?</code> 类型，</li><li><code>stringType</code> 表示 <code>String</code> 类型，如果想获取 <code>String?</code> 类型，则需要调用 <code>stringType.makeNullable()</code> ，</li><li><code>arrayAnyNType</code> 表示 <code>Array&lt;Any?&gt;</code> 类型，<code>Array</code> 没有对应的 <code>IrType</code> 表示，我们需要先获取 <code>Array</code> 对应的 <code>IrSymbol</code>，再调用 <code>typeWith</code> 扩展函数传入所需泛型的 <code>IrType</code> 即可获取 <code>Array&lt;Any?&gt;</code> 的 <code>IrType</code>。</li></ul><p>在上面代码片段的最后，笔者的目标是获取 <code>InvocationHandler.invoke</code> 函数的 <code>IrSymbol</code>，考虑到开发者可能会重载 <code>invoke</code> 函数，所以笔者增加了以下判断逻辑：</p><ol><li>函数中有且仅有三个参数，</li><li>第一个参数的类型必须是 <code>String</code> 类型，</li><li>第二个参数的类型必须是 <code>String</code> 类型，</li><li>第三个参数的类型必须是 <code>Array&lt;Any?&gt;</code> 类型。</li></ol><p>满足以上几个条件的函数笔者才认为是 <code>InvocationHandler.invoke</code> 函数。</p><h3 id="irsymbol" tabindex="-1"><a class="header-anchor" href="#irsymbol" aria-hidden="true">#</a> IrSymbol</h3><p><code>IrSymbol</code> 在 <code>Kotlin IR</code> 中可以算是比较重要的一个接口了。它以「符号」的形式描述了 <code>Kotlin</code> 的包、文件、类、函数、属性、字段等，笔者把它理解为 Java 字节码中的描述符，所以 <code>IrSymbol</code> 常用在创建类、函数、属性，函数调用等，举个 <code>Sword</code> 中的栗子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> anyNType <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span>irBuiltIns<span class="token punctuation">.</span>anyNType
<span class="token keyword">private</span> <span class="token keyword">val</span> emptyArraySymbol <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span><span class="token function">referenceFunctions</span><span class="token punctuation">(</span><span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;kotlin.emptyArray&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">irCall</span><span class="token punctuation">(</span>emptyArraySymbol<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>
    it<span class="token punctuation">.</span><span class="token function">putTypeArgument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> anyNType<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>anyNType</code> 在上节中出现过，它表示 <code>Any?</code> 类型，</li><li><code>emptyArraySymbol</code> 是 <code>emptyArray()</code> 函数在 <code>IR</code> 中的符号，我们同样可以通过 <code>irBuiltIns</code> 获取一些 <code>Kotlin</code> 内置的 <code>IrSymbol</code>，<strong>其他的符号可以通过 <code>pluginContext.referenceXXX()</code> 的一系列函数查找</strong>。</li><li>接下来调用 <code>irCall</code> 函数并传入 <code>emptyArraySymbol</code>，最后调用 <code>putTypeArgument()</code> 函数设置 <code>emptyArray()</code> 函数的泛型。</li></ul><p>所以上面的代码片段其实是调用 <code>Kotlin</code> 中的 <code>emptyArray&lt;Any?&gt;()</code> 函数。</p><h2 id="sword" tabindex="-1"><a class="header-anchor" href="#sword" aria-hidden="true">#</a> Sword</h2><h3 id="swordirgenerationextension" tabindex="-1"><a class="header-anchor" href="#swordirgenerationextension" aria-hidden="true">#</a> SwordIrGenerationExtension</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">SwordIrGenerationExtension</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> messageCollector<span class="token operator">:</span> MessageCollector<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">:</span> IrGenerationExtension <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">val</span> proxyAnnotationFqName <span class="token operator">=</span> <span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.sword.api.kt.Proxy&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">generate</span><span class="token punctuation">(</span>moduleFragment<span class="token operator">:</span> IrModuleFragment<span class="token punctuation">,</span> pluginContext<span class="token operator">:</span> IrPluginContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 输出日志</span>
        messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
            CompilerMessageSeverity<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span>
            <span class="token string-literal singleline"><span class="token string">&quot;Welcome to guodongAndroid sword kcp kotlin ir plugin&quot;</span></span>
        <span class="token punctuation">)</span>

        <span class="token comment">// 判断当前模块是否存在 \`Proxy\` 注解</span>
        <span class="token keyword">val</span> proxyAnnotation <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span><span class="token function">referenceClass</span><span class="token punctuation">(</span>proxyAnnotationFqName<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyAnnotation <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
                CompilerMessageSeverity<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>
                <span class="token string-literal singleline"><span class="token string">&quot;Not found \`Proxy\` annotation, make sure to add the \\&quot;sword-api-kt\\&quot; library to your dependencies&quot;</span></span>
            <span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 开始转换</span>
        moduleFragment<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>
            <span class="token function">SwordTransformer</span><span class="token punctuation">(</span>pluginContext<span class="token punctuation">,</span> proxyAnnotation<span class="token punctuation">,</span> messageCollector<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">null</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过前面的知识铺垫， <code>SwordIrGenerationExtension</code> 中的代码逻辑相信读者应该能理解了，笔者这里就不再赘述了，没有理解的读者可以再回顾下前面的内容。</p><p>接下来我们主要看看 <code>SwordTransformer</code> 中的逻辑。</p><h3 id="swordtransformer" tabindex="-1"><a class="header-anchor" href="#swordtransformer" aria-hidden="true">#</a> SwordTransformer</h3><p>因为 <code>Sword</code> 的功能是为 <code>Kotlin</code> 函数增加代理功能，所以在 <code>SwordTransformer</code> 中我们仅关注与函数相关的转换函数，即：<code>visitFunctionNew(declaration: IrFunction)</code> 函数。</p><p>首先声明一些变量和常量，其中一些变量前面笔者已经介绍过：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
    <span class="token comment">// \`InvocationHandler\` 中的 \`invoke\` 函数名称</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> INVOKE_METHOD_NAME <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;invoke&quot;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">val</span> anyNType <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span>irBuiltIns<span class="token punctuation">.</span>anyNType
<span class="token keyword">private</span> <span class="token keyword">val</span> stringType <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span>irBuiltIns<span class="token punctuation">.</span>stringType
<span class="token keyword">private</span> <span class="token keyword">val</span> arrayAnyNType <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span>irBuiltIns<span class="token punctuation">.</span>arrayClass<span class="token punctuation">.</span><span class="token function">typeWith</span><span class="token punctuation">(</span>anyNType<span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">val</span> emptyArraySymbol <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span><span class="token function">referenceFunctions</span><span class="token punctuation">(</span><span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;kotlin.emptyArray&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">val</span> arrayOfSymbol <span class="token operator">=</span> pluginContext<span class="token punctuation">.</span>irBuiltIns<span class="token punctuation">.</span>arrayOf

<span class="token comment">// @JvmName 注解完全限定名</span>
<span class="token keyword">private</span> <span class="token keyword">val</span> jvmNameAnnotationFqName <span class="token operator">=</span> <span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;kotlin.jvm.JvmName&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment">// @Proxy 注解完全限定名</span>
<span class="token keyword">private</span> <span class="token keyword">val</span> proxyAnnotationFqName <span class="token operator">=</span> <span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.sword.api.kt.Proxy&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们就覆写 <code>visitFunctionNew()</code> 函数，在覆写的 <code>visitFunctionNew()</code> 函数中有较多的代码逻辑，还是老习惯，笔者先描述下自己的实现思路，然后再根据实现思路依次进行代码实现：</p><ol><li>过滤一些笔者认为不需要处理的函数，读者可以自行斟酌；过滤不包含 <code>Proxy</code> 注解的函数，</li><li>获取 <code>Proxy</code> 注解里的数据存储于第二篇文章中的 <code>SwordParam</code> 中，</li><li>获取当前类名和函数名，判断当前函数是否启用代理，如果启用了代理但是 <code>handler</code> 为空则抛出异常，</li><li>启用代理后，我们直接抛弃原函数体，生成新的代理函数体。</li></ol><h4 id="_1-过滤" tabindex="-1"><a class="header-anchor" href="#_1-过滤" aria-hidden="true">#</a> 1.过滤</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitFunctionNew</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrFunction<span class="token punctuation">)</span><span class="token operator">:</span> IrStatement <span class="token punctuation">{</span>
    <span class="token comment">// 过滤挂起函数，内联函数，多平台声明函数，外部函数(JNI)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>declaration<span class="token punctuation">.</span>isSuspend <span class="token operator">||</span> declaration<span class="token punctuation">.</span>isInline <span class="token operator">||</span> declaration<span class="token punctuation">.</span>isExpect <span class="token operator">||</span> declaration<span class="token punctuation">.</span>isExternal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFunctionNew</span><span class="token punctuation">(</span>declaration<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>declaration <span class="token keyword">is</span> IrSimpleFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 过滤中缀函数，尾递归函数，操作符函数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>declaration<span class="token punctuation">.</span>isInfix <span class="token operator">||</span> declaration<span class="token punctuation">.</span>isTailrec <span class="token operator">||</span> declaration<span class="token punctuation">.</span>isOperator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFunctionNew</span><span class="token punctuation">(</span>declaration<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 过滤函数体为空的函数，不包含 \`Proxy\` 注解的函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>declaration<span class="token punctuation">.</span>body <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>declaration<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>annotationClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFunctionNew</span><span class="token punctuation">(</span>declaration<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token operator">..</span><span class="token operator">..</span><span class="token operator">..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>过滤挂起函数，内联函数，多平台声明函数，外部函数(JNI)，</li><li>过滤中缀函数，尾递归函数，操作符函数，</li><li>过滤函数体为空的函数，不包含 <code>Proxy</code> 注解的函数。</li></ol><h4 id="_2-获取" tabindex="-1"><a class="header-anchor" href="#_2-获取" aria-hidden="true">#</a> 2.获取</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitFunctionNew</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrFunction<span class="token punctuation">)</span><span class="token operator">:</span> IrStatement <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token operator">..</span><span class="token operator">..</span>

    <span class="token keyword">val</span> param <span class="token operator">=</span> <span class="token function">SwordParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    param<span class="token punctuation">.</span>hasProxyAnnotation <span class="token operator">=</span> <span class="token boolean">true</span>

    <span class="token comment">// 获取函数上 \`Proxy\` 注解的 \`IrElement\`, 返回 \`IrConstructorCall\`</span>
    <span class="token keyword">val</span> irProxyConstructorCall <span class="token operator">=</span> declaration<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span>
        it<span class="token punctuation">.</span><span class="token function">isAnnotation</span><span class="token punctuation">(</span>proxyAnnotationFqName<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 获取 \`Proxy.enable\` 属性的值并存储</span>
    <span class="token keyword">val</span> enableParam <span class="token operator">=</span> irProxyConstructorCall<span class="token punctuation">.</span><span class="token function">getValueArgument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    enableParam<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token keyword">is</span> IrConst<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            param<span class="token punctuation">.</span>enable <span class="token operator">=</span> it<span class="token punctuation">.</span>value <span class="token keyword">as</span> Boolean
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取 \`Proxy.handler\` 属性的值并存储</span>
    <span class="token keyword">val</span> handlerParam <span class="token operator">=</span> irProxyConstructorCall<span class="token punctuation">.</span><span class="token function">getValueArgument</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    handlerParam<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token keyword">is</span> IrConst<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            param<span class="token punctuation">.</span>handler <span class="token operator">=</span> it<span class="token punctuation">.</span>value <span class="token keyword">as</span> String
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">..</span><span class="token operator">..</span><span class="token operator">..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 <code>Proxy</code> 注解中的数据，比较麻烦一些，一开始笔者认为获取到的注解可能类似于 <code>IrAnnotation</code>，然而发现却是 <code>IrConstructorCall</code>，后面仔细想来注解不就是通过构造函数构建一个注解实例么？我们在注解中传入的参数都是赋值给了其构造函数的属性。</p><p>通过 <code>getValueArgument()</code> 函数根据注解中声明属性的顺序获取其对应的属性，因为属性可能有默认值，我们在使用时可以不传入某个属性，比如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Proxy</span><span class="token punctuation">(</span>
    <span class="token comment">// enable = true,</span>
    handler <span class="token operator">=</span> HandlerFqName<span class="token punctuation">.</span>GET_TEXT_NO_ARG
<span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">getTextNoArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;guodongAndroid&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Proxy</code> 注解中 <code>enable</code> 默认为 <code>True</code>，所以我们在使用时可以不传入 <code>enable</code> 的值，使其使用默认值，但是对于 <code>kotlin IR</code> 来说，没有明确使用的属性，通过 <code>getValueArgument()</code> 函数获取到的为 <code>null</code>，因为在 <code>Kotlin IR</code> 语法树中找不到这个属性。</p><p>由于注解中的属性值必须是编译期常量，所以我们可以把 <code>handlerParam</code> 转换为 <code>IrConst</code> 并获取它的值。</p><h4 id="_3-校验" tabindex="-1"><a class="header-anchor" href="#_3-校验" aria-hidden="true">#</a> 3.校验</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitFunctionNew</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrFunction<span class="token punctuation">)</span><span class="token operator">:</span> IrStatement <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token operator">..</span><span class="token operator">..</span>

    <span class="token comment">// 获取 ClassName</span>
    <span class="token keyword">val</span> className<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token function">getClassName</span><span class="token punctuation">(</span>declaration<span class="token punctuation">)</span>
    
    <span class="token comment">// 获取 MethodName</span>
    <span class="token keyword">val</span> methodName <span class="token operator">=</span> declaration<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 校验 开启代理后是否注入了 \`handler\`</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span>enable <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> param<span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
            CompilerMessageSeverity<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>
            <span class="token string-literal singleline"><span class="token string">&quot;[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">className</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">methodName</span></span><span class="token string">]启用代理后请注入\`handler\`&quot;</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token operator">..</span><span class="token operator">..</span><span class="token operator">..</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getClassName</span><span class="token punctuation">(</span>
    declaration<span class="token operator">:</span> IrFunction<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
    <span class="token keyword">val</span> parentClassOrNull <span class="token operator">=</span> declaration<span class="token punctuation">.</span>parentClassOrNull
    <span class="token keyword">val</span> fileOrNull <span class="token operator">=</span> declaration<span class="token punctuation">.</span>fileOrNull

    <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">{</span>
        declaration<span class="token punctuation">.</span>isLocal <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 本地方法: 类名.函数名.&lt;anonymous&gt;</span>
            <span class="token comment">// 源码中有此逻辑, 逻辑较为繁琐，且不是 \`Sword\` 的核心逻辑，本文就不记录了</span>
        <span class="token punctuation">}</span>
        parentClassOrNull <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取类名</span>
            parentClassOrNull<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        fileOrNull <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是顶级函数，获取文件名或\`JvmName\`注解指定的名字</span>
            <span class="token keyword">val</span> annotations <span class="token operator">=</span> fileOrNull<span class="token punctuation">.</span>annotations
            <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>jvmNameAnnotationFqName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">val</span> <span class="token keyword">annotation</span> <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>jvmNameAnnotationFqName<span class="token punctuation">)</span><span class="token operator">!!</span>
                <span class="token keyword">val</span> expression <span class="token operator">=</span> <span class="token keyword">annotation</span><span class="token punctuation">.</span><span class="token function">getValueArgument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>expression <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> expression <span class="token keyword">is</span> IrConst<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    expression<span class="token punctuation">.</span>value <span class="token keyword">as</span> String
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    fileOrNull<span class="token punctuation">.</span>name
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                fileOrNull<span class="token punctuation">.</span>name
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Unknown&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 <code>ClassName</code> 时有以下几点考虑：</p><ol><li>首先判断是否是本地方法，如果是本地方法则获取 <code>类名.方法名.[&lt;anonymous&gt;]</code>，</li><li>其次获取当前函数所在的父级 <code>IrClass</code>，如果不为 <code>null</code>，则使用类名，</li><li>最后获取函数所在的 <code>IrFile</code>，如果不为 <code>null</code>，再判断文件上是否有 <code>JvmName</code> 注解，有的话使用 <code>JvmName</code> 注解指定的名字，否则使用文件名。</li></ol><p>获取 <code>MethodName</code> 时直接使用了函数名称，此处没有判断函数上是否有 <code>JvmName</code> 注解逻辑，相信读者可以自行扩展。</p><p>下面就是一个开启代理后必须注入 <code>handler</code> 的校验逻辑。</p><h4 id="_4-转换" tabindex="-1"><a class="header-anchor" href="#_4-转换" aria-hidden="true">#</a> 4.转换</h4><p>在前面介绍 <code>dump</code> 函数时我们并没有实际上看看 <code>dump</code> 函数的输出内容，接下来让我们看看它输出的语法树信息。</p><p>以下面的函数为例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Proxy</span><span class="token punctuation">(</span>
    enable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    handler <span class="token operator">=</span> HandlerFqName<span class="token punctuation">.</span>GetTextArgInvocationHandler
<span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">testHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">GetTextArgInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Test&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;testHandler&quot;</span></span><span class="token punctuation">,</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> User
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dump</code> 函数的输出结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>FUN name:testHandler visibility:public modality:FINAL &lt;&gt; ($this:com.guodong.android.sword.app.Test) returnType:com.guodong.android.sword.app.User
  annotations:
    Proxy(enable = &#39;true&#39;, handler = &#39;com.guodong.android.sword.app.GetTextArgInvocationHandler&#39;)
  $this: VALUE_PARAMETER name:&lt;this&gt; type:com.guodong.android.sword.app.Test
  BLOCK_BODY
    RETURN type=kotlin.Nothing from=&#39;public final fun testHandler (): com.guodong.android.sword.app.User declared in com.guodong.android.sword.app.Test&#39;
      TYPE_OP type=com.guodong.android.sword.app.User origin=CAST typeOperand=com.guodong.android.sword.app.User
        CALL &#39;public open fun invoke (className: kotlin.String, methodName: kotlin.String, args: kotlin.Array&lt;kotlin.Any?&gt;): kotlin.Any? declared in com.guodong.android.sword.app.GetTextArgInvocationHandler&#39; type=kotlin.Any? origin=null
          $this: CONSTRUCTOR_CALL &#39;public constructor &lt;init&gt; () [primary] declared in com.guodong.android.sword.app.GetTextArgInvocationHandler&#39; type=com.guodong.android.sword.app.GetTextArgInvocationHandler origin=null
          className: CONST String type=kotlin.String value=&quot;Test&quot;
          methodName: CONST String type=kotlin.String value=&quot;testHandler&quot;
          args: CALL &#39;public final fun emptyArray &lt;T&gt; (): kotlin.Array&lt;T of kotlin.ArrayIntrinsicsKt.emptyArray&gt; [inline] declared in kotlin.ArrayIntrinsicsKt&#39; type=kotlin.Array&lt;kotlin.Any?&gt; origin=null
            &lt;T&gt;: kotlin.Any?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fun testHandler(): User</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>FUN name:testHandler visibility:public modality:FINAL &lt;&gt; ($this:com.guodong.android.sword.app.Test) returnType:com.guodong.android.sword.app.User
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是 <code>testHandler</code> 函数的定义。它定义了函数的名称，可见性，模态以及类型签名。我们可以清楚的看到它是一个 <code>public</code> 和 <code>final</code> 名为 <code>testHandler</code> 的函数，并且它有一个隐含的参数 <code>this</code>（<code>()</code>），但是没有类型参数（<code>&lt;&gt;</code>），最后返回值为 <code>com.guodong.android.sword.app.User</code>。</p><p>类中的非静态函数(构造函数除外)都有一个隐含的 <code>this</code> 参数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$this: VALUE_PARAMETER name:&lt;this&gt; type:com.guodong.android.sword.app.Test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>GetTextArgInvocationHandler()</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$this: CONSTRUCTOR_CALL &#39;public constructor &lt;init&gt; () [primary] declared in com.guodong.android.sword.app.GetTextArgInvocationHandler&#39; type=com.guodong.android.sword.app.GetTextArgInvocationHandler origin=null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用 <code>GetTextArgInvocationHandler</code> 的无参构造方法。</p><p><code>Test &amp; testHandler</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>className: CONST String type=kotlin.String value=&quot;Test&quot;
methodName: CONST String type=kotlin.String value=&quot;testHandler&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Test</code> 和 <code>testHandler</code> 作为一个常量字符串。</p><p><code>emptyArray()</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>args: CALL &#39;public final fun emptyArray &lt;T&gt; (): kotlin.Array&lt;T of kotlin.ArrayIntrinsicsKt.emptyArray&gt; [inline] declared in kotlin.ArrayIntrinsicsKt&#39; type=kotlin.Array&lt;kotlin.Any?&gt; origin=null
            &lt;T&gt;: kotlin.Any?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>emptyArray()</code> 函数是有类型参数的，因编译器推导我们在编写代码时可以省略，但是在 <code>Kotlin IR</code> 中明确显示了它的类型参数（<code>&lt;T&gt;: kotlin.Any?</code>），<strong>所以我们在转换代码时需要注意此处细节，否则转换代码在编译期不会报错，在运行时会抛出异常</strong>。</p><p><code>invoke(&quot;Test&quot;, &quot;testHandler&quot;, emptyArray())</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CALL &#39;public open fun invoke (className: kotlin.String, methodName: kotlin.String, args: kotlin.Array&lt;kotlin.Any?&gt;): kotlin.Any? declared in com.guodong.android.sword.app.GetTextArgInvocationHandler&#39; type=kotlin.Any? origin=null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是 <code>invoke</code> 函数的调用，清楚表示调用 <code>invoke</code> 函数需要三个参数以及参数的类型，同时函数返回值为 <code>kotlin.Any?</code></p><p><code>as String</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TYPE_OP type=com.guodong.android.sword.app.User origin=CAST typeOperand=com.guodong.android.sword.app.User
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是强转操作，<code>TYPE_OP</code> 表示一种类型操作，<code>origin=CAST</code> 表示类型操作符。</p><p><code>return</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>RETURN type=kotlin.Nothing from=&#39;public final fun testHandler (): com.guodong.android.sword.app.User declared in com.guodong.android.sword.app.Test&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,100),b=n("code",null,"Kotlin",-1),g=n("code",null,"return",-1),y={href:"https://kotlinlang.org/docs/returns.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"return",-1),f=n("code",null,"type",-1),h=n("code",null,"kotlin.Nothing",-1),x=p(`<p>通过上面 <code>dump</code> 函数输出语法树的分析，我们已经知道转换后函数体的语法信息，接下来让我们根据上面的分析依次来实现吧。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> handlerConstructorSymbol <span class="token operator">=</span>
	pluginContext<span class="token punctuation">.</span><span class="token function">referenceConstructors</span><span class="token punctuation">(</span><span class="token function">FqName</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">single</span> <span class="token punctuation">{</span>
	    it<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>valueParameters<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先通过 <code>pluginContext.referenceConstructors()</code> 查找 <code>Handler</code> 类的无参构造函数的符号。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>val invokeSymbol =
	pluginContext.referenceFunctions(FqName(&quot;\${param.handler}.$INVOKE_METHOD_NAME&quot;))
		.single {
			val valueParameters = it.owner.valueParameters
			valueParameters.size == 3 &amp;&amp;
					valueParameters[0].type == stringType &amp;&amp;
					valueParameters[1].type == stringType &amp;&amp;
					valueParameters[2].type == arrayAnyNType
		}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来通过 <code>pluginContext.referenceFunctions()</code> 查找 <code>Handler</code> 类的 <code>invoke</code> 函数，可能存在函数重载，需要通过 <code>single</code> 函数确定我们需要的函数，这个在前面 <code>IrType</code> 举过例子。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">fun</span> IrBuilderWithScope<span class="token punctuation">.</span><span class="token function">irSwordArrayParams</span><span class="token punctuation">(</span>function<span class="token operator">:</span> IrFunction<span class="token punctuation">)</span><span class="token operator">:</span> IrCall <span class="token punctuation">{</span>
    <span class="token keyword">val</span> parameters <span class="token operator">=</span> function<span class="token punctuation">.</span>valueParameters
    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parameters<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">irCall</span><span class="token punctuation">(</span>emptyArraySymbol<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>
            it<span class="token punctuation">.</span><span class="token function">putTypeArgument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> anyNType<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">irCall</span><span class="token punctuation">(</span>arrayOfSymbol<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> expressions <span class="token operator">=</span> parameters<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> parameter <span class="token operator">-&gt;</span> <span class="token function">irGet</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span> <span class="token punctuation">}</span>
            it<span class="token punctuation">.</span><span class="token function">putValueArgument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">irVararg</span><span class="token punctuation">(</span>anyNType<span class="token punctuation">,</span> expressions<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码是组装 <code>invoke</code> 函数的第三个参数 <code>args: Array&lt;Any?&gt;</code>，当前函数没有参数时使用 <code>emptyArray&lt;Any?&gt;()</code>，有参数时使用 <code>arrayOf(vararg elements: T)</code>。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> invokeCall <span class="token operator">=</span> <span class="token function">irCall</span><span class="token punctuation">(</span>invokeSymbol<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>
    dispatchReceiver <span class="token operator">=</span> <span class="token function">irCallConstructor</span><span class="token punctuation">(</span>handlerConstructorSymbol<span class="token punctuation">,</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">putValueArgument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">irString</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">putValueArgument</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">irString</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">putValueArgument</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">irSwordArrayParams</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造 <code>Handler</code> 实例并调用它的 <code>invoke</code> 函数。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> irReturn <span class="token operator">=</span> <span class="token function">irReturn</span><span class="token punctuation">(</span>
    <span class="token function">typeOperator</span><span class="token punctuation">(</span>
        resultType <span class="token operator">=</span> function<span class="token punctuation">.</span>returnType<span class="token punctuation">,</span>
        argument <span class="token operator">=</span> invokeCall<span class="token punctuation">,</span>
        typeOperator <span class="token operator">=</span> IrTypeOperator<span class="token punctuation">.</span>CAST<span class="token punctuation">,</span>
        typeOperand <span class="token operator">=</span> function<span class="token punctuation">.</span>returnType
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>typeOperator</code> 是语法树中的 <code>TYPE_OP</code>，就是强转操作，<code>irReturn</code> 表示 <code>Kotlin</code> 中的 <code>return</code> 表达式。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">irSword</span><span class="token punctuation">(</span>
    function<span class="token operator">:</span> IrFunction<span class="token punctuation">,</span>
    param<span class="token operator">:</span> SwordParam<span class="token punctuation">,</span>
    className<span class="token operator">:</span> String<span class="token punctuation">,</span>
    methodName<span class="token operator">:</span> String<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> IrBlockBody <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">DeclarationIrBuilder</span><span class="token punctuation">(</span>pluginContext<span class="token punctuation">,</span> function<span class="token punctuation">.</span>symbol<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">irBlockBody</span> <span class="token punctuation">{</span>
        <span class="token operator">..</span><span class="token operator">..</span><span class="token operator">..</span>
        
        <span class="token operator">+</span>irReturn
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>+</code> 操作符（<code>unaryPlus</code>）链接整个返回表达式到函数体，最后用新的函数体替换原函数体达到代理的功能：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitFunctionNew</span><span class="token punctuation">(</span>declaration<span class="token operator">:</span> IrFunction<span class="token punctuation">)</span><span class="token operator">:</span> IrStatement <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token operator">..</span><span class="token operator">..</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        declaration<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token function">irSword</span><span class="token punctuation">(</span>declaration<span class="token punctuation">,</span> param<span class="token punctuation">,</span> className<span class="token punctuation">,</span> methodName<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFunctionNew</span><span class="token punctuation">(</span>declaration<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，使用 <code>Kotlin IR</code> 为 <code>Kotlin</code> 函数增加代理功能完成。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文简单记录了通过 <code>Kotlin IR</code> 实现 <code>Sword</code> 代理功能的过程，同时简单介绍了一些 <code>Kotlin IR</code> 的 API 以及笔者对这些 API 的个人理解。</p><p>希望可以帮您开发自己的 <code>Kotlin</code> 编译器插件，happy~</p>`,18);function I(A,N){const e=o("RouterLink"),c=o("ExternalLinkIcon");return l(),r("div",null,[d,k,v,n("ol",null,[n("li",null,[a(e,{to:"/OpenSourceProject/Sword/00-sword.html"},{default:t(()=>[s("Sword - 为 Kotlin 函数增加代理功能(一)")]),_:1})]),n("li",null,[a(e,{to:"/OpenSourceProject/Sword/01-sword.html"},{default:t(()=>[s("Sword - 为 Kotlin 函数增加代理功能(二)")]),_:1})]),n("li",null,[a(e,{to:"/OpenSourceProject/Sword/02-sword.html"},{default:t(()=>[s("Sword - 为 Kotlin 函数增加代理功能(三)")]),_:1})])]),m,n("p",null,[s("在 "),b,s(" 中 "),g,s(),n("a",y,[s("其实是一个表达式"),a(c)]),s("，所以此处 "),w,s(" 的 "),f,s(" 是 "),h,s(" 。")]),x])}const S=i(u,[["render",I],["__file","03-sword.html.vue"]]);export{S as default};

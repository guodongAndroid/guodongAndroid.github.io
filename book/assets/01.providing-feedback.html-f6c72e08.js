import{_ as n,Y as s,Z as a,a3 as e}from"./framework-3d290349.js";const o={},p=e(`<h1 id="提供反馈" tabindex="-1"><a class="header-anchor" href="#提供反馈" aria-hidden="true">#</a> 提供反馈</h1><p>假设你有一个需要上传图片的函数。当用户点击上传按钮时，会出现加载进度条或者 <code>spinners</code>，这表明应用程序正在运行某些操作而不是停止工作。这对好的用户体验是至关重要的，没人喜欢无响应的应用程序。但是为用户提供反馈在代码中如何实现呢？</p><p>思考一下下面的任务，你要上传图片但是必须等待应用程序上传完成：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">uploadImage</span><span class="token punctuation">(</span>image<span class="token operator">:</span> Image<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showLoadingSpinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// Do some work</span>
    uploadService<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span>
    <span class="token comment">// Work’s done, hide the spinner</span>
    <span class="token function">hideLoadingSpinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码中，可以了解到以下信息：</p><ul><li>首先显示一个进度条。</li><li>接下来上传一张图片。</li><li>最后，当上传完成后，隐藏进度条。</li></ul><p>不幸的是，上面的代码并非如此简单，因为进度条是有动画的，并且必须有代码实现这个动画。<code>showLoadingSpinner</code> 必须包含以下代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">showLoadingSpinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showSpinnerView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rotateSpinnerImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>showSpinnerView</code> 用于显示真正的 UI 组件，下面的 <code>while</code> 循环用于处理动画。但是这个函数什么时候返回呢？</p><p>在 <code>uploadImage</code> 函数中，假设执行完 <code>showLoadingSpinner</code> 函数后进度条动画仍在运行，接下来就可以开始上传图片了。但是查看前面的代码，这是不可能的事情。</p><p>如果进度条动画在运行，就意味着 <code>showLoadingSpinner</code> 函数还没有返回。只要 <code>showLoadingSpinner</code> 返回，进度条动画就会停止并且将会开始上传图片。出现这种情况是因为阻塞调用 <code>showLoadingSpinner</code> 函数。</p><h1 id="阻塞调用" tabindex="-1"><a class="header-anchor" href="#阻塞调用" aria-hidden="true">#</a> 阻塞调用</h1><p>阻塞调用是一个仅在完成时返回的函数。在上面的示例中，因为 <code>showLoadingSpinner</code> 函数使主线程保存忙碌，所有导致无法上传图片。但是当它返回时(把 <code>running</code> 置为 false)，进度条动画就会停止。</p><p>那么如何解决在上传图片时进度条又有动画呢？</p><p>简而言之，你需要额外的线程来执行长时间运行的任务。</p><p>主线程也成为 UI 线程，因为它负责渲染屏幕上的所有内容，而这应该是它唯一的任务。这意味着它应该处理进度条的动画而不是上传图片，因为上传图片与 UI 无关。如果主线程不能做上传图片任务，那么谁可以执行上传图片任务呢？很简单，你需要一个新的线程来执行长时间运行的任务。</p><p>现在的计算机比 20 年、15 年甚至 10 年前要先进得多。那时，如果尝试同时执行多项操作，而计算机只能有一个执行线程，因此它们会死机。但是技术是进步的，现在的应用程序支持一种称为多线程的机制。每个线程都可以处理一个任务，共同完成所需的任务，这就是多线程的魅力。</p>`,17),i=[p];function c(t,l){return s(),a("div",null,i)}const u=n(o,[["render",c],["__file","01.providing-feedback.html.vue"]]);export{u as default};

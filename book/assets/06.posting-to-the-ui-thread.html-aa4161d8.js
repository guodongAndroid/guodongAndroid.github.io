import{_ as n,Y as s,Z as a,a3 as t}from"./framework-3d290349.js";const e={},i=t(`<h2 id="切换至-ui-线程" tabindex="-1"><a class="header-anchor" href="#切换至-ui-线程" aria-hidden="true">#</a> 切换至 UI 线程</h2><p>从你目前看到的情况来看，协程都是比较简单的，它们的大部分功能都内置在语言本身中。切换至 UI 线程也并不复杂，可以以 UI dispatcher 作为其线程上下文来启动一个新的协程。</p><p>由于我们讨论的是具有可见用户界面的应用程序，因此您可以发布到 Android、Swing 和 JavaFx 应用程序的主线程。您可以通过以下方式使用 Dispatchers.Main 作为上下文：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，上面的代码还不能运行。您需要设置以下依赖项之一：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>implementation <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.kotlinx:kotlinx-coroutinesandroid:...&quot;</span></span>
implementation <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.kotlinx:kotlinx-coroutinesswing:...&quot;</span></span>
implementation <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.kotlinx:kotlinx-coroutinesjavafx:...&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>否则，程序将会抛出以下异常：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Exception in thread &quot;DefaultDispatcher-worker-3&quot; java.lang.IllegalStateException: Module with the Main dispatcher is missing. Add dependency providing the Main dispatcher, e.g. ’kotlinx-coroutines-android’
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以通过一个简单的 Swing 示例来尝试上述代码。首先，您需要将此依赖项添加到 build.gradle：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>implementation <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-swing:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">kotlin_coroutines_version</span></span><span class="token string">&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过点击 Gradle 选项卡右上方的 Sync 按钮来同步并重新加载 Gradle 项目。然后，您可以将 <code>main</code> 函数替换为：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> bgThreadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I’m Job 1 in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">bgThreadName</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
        GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> uiThreadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I’m Job 2 in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">uiThreadName</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时并导入 Dispatchers 。外部协程打印执行它的线程的名称。经过短暂的延迟后，您使用 Dispatchers.Main 作为 CoroutineContext 启动另一个协程。这是您与主线程交互方式的其中一种。</p><p>运行上述代码，可能得到以下输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>I’m Job 1 in thread DefaultDispatcher-worker-1
I’m Job 2 in thread AWT-EventQueue-0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个 Job 由工作线程在后台执行。第二个由 Swing 中的主线程执行。很简单吧？</p><p>要查看本章中的示例，请使用 IntelliJ 打开本章的最终项目并导航到 getting-started-with-coroutines/projects/final 文件夹，选择getting_started_with_coroutines 项目。</p>`,17),o=[i];function p(l,c){return s(),a("div",null,o)}const r=n(e,[["render",p],["__file","06.posting-to-the-ui-thread.html.vue"]]);export{r as default};

import{_ as t,Y as o,Z as c,$ as n,a0 as s,a1 as p,a3 as a,E as i}from"./framework-3d290349.js";const l={},d=a(`<h1 id="linphone-sdk-android版本号生成分析" tabindex="-1"><a class="header-anchor" href="#linphone-sdk-android版本号生成分析" aria-hidden="true">#</a> linphone-sdk-android版本号生成分析</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>好久没写 <code>linphone-sdk-android</code> 相关的文章了，本文记录下笔者分析 <code>linphone-sdk</code> 版本号生成的过程。</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><blockquote><p>注：以下源码基于 linphone-sdk-android 4.5.26。</p></blockquote><p>修改完 <code>linphone-sdk</code> 的源码后总是要编译的，编译完成后我们就可以得到一个带有版本号的 <code>aar</code> 包，那么这个版本号是从哪里来的呢？</p><h3 id="编译产物" tabindex="-1"><a class="header-anchor" href="#编译产物" aria-hidden="true">#</a> 编译产物</h3><p>首先看下编译完成后 <code>build</code> 目录下的产物，会发现有两个 <code>gradle</code> 脚本文件：<code>build.gradle</code> 和 <code>upload.gradle</code>，打开 <code>upload.gradle</code> 脚本文件，在里面发现如下代码：<code>println(&quot;AAR artefact group is: &quot; + artefactGroupId + &quot;, SDK version 4.5.27&quot;)</code>，其中 <code>4.5.27</code> 就是 <code>linphone-sdk</code> 的版本号。</p><p>根据前面文章的分析，编译产物一般是自动生成的，所以笔者在 <code>linphone-sdk</code> 目录下搜索 <code>upload.gradle</code> ：<code>find . -name &#39;*upload.gradle*&#39;</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./cmake/Android/gradle/upload.gradle.cmake
./build/upload.gradle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>果然找到了，其中第2行是笔者刚才打开的文件，找到并打开第1行的文件 <code>upload.gradle.cmake</code>，与第2行的文件对比，发现前者就是后者的模板文件，在 <code>upload.gradle.cmake</code> 文件中发现：<code>println(&quot;AAR artefact group is: &quot; + artefactGroupId + &quot;, SDK version @LINPHONESDK_VERSION@&quot;)</code>，其中 <code>@LINPHONESDK_VERSION@</code> 就是 <code>linphone-sdk</code> 的版本号了。因为此文件后缀是 <code>.cmake</code>，那么联想 <code>@LINPHONESDK_VERSION@</code> 应该是个 cmake 参数。</p><p>接下来在 <code>linphone-sdk</code> 目录下搜索包含 <code>LINPHONESDK_VERSION</code> 字样的文件：<code>find . -type f | xargs grep &#39;LINPHONESDK_VERSION&#39;</code>，本次查找结果较多，就不贴出来了，经过笔者的对比分析，锁定了最后一行结果：<code>./CMakeLists.txt:bc_compute_full_version(LINPHONESDK_VERSION)</code>。</p><h3 id="cmake" tabindex="-1"><a class="header-anchor" href="#cmake" aria-hidden="true">#</a> CMake</h3><p>打开 <code>./CMakeLists.txt</code>，在前几行就可以找到如下代码：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">include</span><span class="token punctuation">(</span>bctoolbox/cmake/BcToolboxCMakeUtils.cmake<span class="token punctuation">)</span>
<span class="token function">bc_compute_full_version</span><span class="token punctuation">(</span><span class="token variable">LINPHONESDK_VERSION</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中第2行代码 <code>bc_compute_full_version</code> 就是计算 <code>linphone-sdk</code> 版本号的函数，其定义在第1行代码中的 <code>BcToolboxCMakeUtils.cmake</code> 中，打开 <code>BcToolboxCMakeUtils.cmake</code> 文件并找到 <code>bc_compute_full_version</code> 函数：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">function</span><span class="token punctuation">(</span>bc_compute_full_version <span class="token variable">OUTPUT_VERSION</span><span class="token punctuation">)</span>
	<span class="token comment"># 查找 Git 程序</span>
	<span class="token keyword">find_program</span><span class="token punctuation">(</span>GIT_EXECUTABLE git NAMES Git <span class="token variable">CMAKE_FIND_ROOT_PATH_BOTH</span><span class="token punctuation">)</span>
	<span class="token comment"># 如果找到 Git 程序</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>GIT_EXECUTABLE<span class="token punctuation">)</span>
		<span class="token comment"># 执行 git describe 命令</span>
		<span class="token keyword">execute_process</span><span class="token punctuation">(</span>
			COMMAND <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">GIT_EXECUTABLE</span><span class="token punctuation">}</span></span>&quot;</span> <span class="token string">&quot;describe&quot;</span>
			OUTPUT_VARIABLE <span class="token variable">GIT_DESCRIBE_VERSION</span>
			OUTPUT_STRIP_TRAILING_WHITESPACE
			ERROR_QUIET
			<span class="token property">WORKING_DIRECTORY</span> <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span></span>&quot;</span>
		<span class="token punctuation">)</span>

		<span class="token comment"># parse git describe version</span>
		<span class="token comment"># 解析 git describe 的返回值作为版本号, 通过正则表达式的分组匹配进行解析：4.5.26-alpha-9-gb342a93</span>
		<span class="token comment"># 如果没有解析到, 输出错误信息</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">NOT</span> <span class="token punctuation">(</span><span class="token variable">GIT_DESCRIBE_VERSION</span> <span class="token operator">MATCHES</span> <span class="token string">&quot;^([0-9]+)[.]([0-9]+)[.]([0-9]+)(-alpha|-beta)?(-[0-9]+)?(-g[0-9a-f]+)?$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">message</span><span class="token punctuation">(</span>FATAL_ERROR <span class="token string">&quot;invalid git describe version: &#39;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">GIT_DESCRIBE_VERSION</span><span class="token punctuation">}</span></span>&#39;&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		
		<span class="token comment"># 设置分组1为主要版本: ([0-9]+) -&gt; 4</span>
		<span class="token keyword">set</span><span class="token punctuation">(</span>version_major <span class="token punctuation">\${</span><span class="token variable">CMAKE_MATCH_1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		
		<span class="token comment"># 设置分组2为次要版本: ([0-9]+) -&gt; 5</span>
		<span class="token keyword">set</span><span class="token punctuation">(</span>version_minor <span class="token punctuation">\${</span><span class="token variable">CMAKE_MATCH_2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		
		<span class="token comment"># 设置分组3为补丁版本: ([0-9]+) -&gt; 26</span>
		<span class="token keyword">set</span><span class="token punctuation">(</span>version_patch <span class="token punctuation">\${</span><span class="token variable">CMAKE_MATCH_3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		
		<span class="token comment"># 如果解析到分组4: (-alpha|-beta)? -&gt; -alpha, 则去掉前面的‘-’, 得到后面的‘alpha|beta’, 赋值给 version_prerelease</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">CMAKE_MATCH_4</span><span class="token punctuation">)</span>
			<span class="token keyword">string</span><span class="token punctuation">(</span>SUBSTRING <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">CMAKE_MATCH_4</span><span class="token punctuation">}</span></span>&quot;</span> <span class="token number">1</span> -<span class="token number">1</span> version_prerelease<span class="token punctuation">)</span>
		<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		
		<span class="token comment"># 如果解析到分组5：(-[0-9]+)? -&gt; -9, 则去掉前面的‘-’, 得到后面的‘9’, 赋值给 version_commit</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">CMAKE_MATCH_5</span><span class="token punctuation">)</span>
			<span class="token keyword">string</span><span class="token punctuation">(</span>SUBSTRING <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">CMAKE_MATCH_5</span><span class="token punctuation">}</span></span>&quot;</span> <span class="token number">1</span> -<span class="token number">1</span> version_commit<span class="token punctuation">)</span>
		<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		
		<span class="token comment"># 如果解析到分组6: (-g[0-9a-f]+)? -&gt; -gb342a93, 则去掉前面的‘-g’, 得到后面的‘b342a93’, 赋值给 version_hash</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">CMAKE_MATCH_6</span><span class="token punctuation">)</span>
			<span class="token keyword">string</span><span class="token punctuation">(</span>SUBSTRING <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">CMAKE_MATCH_6</span><span class="token punctuation">}</span></span>&quot;</span> <span class="token number">2</span> -<span class="token number">1</span> version_hash<span class="token punctuation">)</span>
		<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment"># interpret untagged hotfixes as pre-releases of the next &quot;patch&quot; release</span>
		<span class="token comment"># 如果没有 version_prerelease, 但是有 version_commit, 认为是此补丁程序是下一个补丁版本的预发版本, 即将补丁版本号+1</span>
		<span class="token comment"># 并设置 version_prerelease 为 &quot;pre&quot;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">NOT</span> version_prerelease <span class="token operator">AND</span> version_commit<span class="token punctuation">)</span>
			<span class="token keyword">math</span><span class="token punctuation">(</span>EXPR version_patch <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">version_patch</span><span class="token punctuation">}</span></span> + 1&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">set</span><span class="token punctuation">(</span>version_prerelease <span class="token string">&quot;pre&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment"># format full version</span>
		<span class="token comment"># 拼接主、次、补丁版本号</span>
		<span class="token keyword">set</span><span class="token punctuation">(</span>full_version <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">version_major</span><span class="token punctuation">}</span></span>.<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">version_minor</span><span class="token punctuation">}</span></span>.<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">version_patch</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
		
		<span class="token comment"># 如果有 version_prerelease</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>version_prerelease<span class="token punctuation">)</span>
			<span class="token comment"># 版本号追加 &quot;-pre&quot;</span>
			<span class="token keyword">string</span><span class="token punctuation">(</span>APPEND full_version <span class="token string">&quot;-<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">version_prerelease</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>

			<span class="token comment"># 如果有 version_commit</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>version_commit<span class="token punctuation">)</span>
				<span class="token comment"># 版本号追加 &quot;.9+b342a93&quot;</span>
				<span class="token keyword">string</span><span class="token punctuation">(</span>APPEND full_version <span class="token string">&quot;.<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">version_commit</span><span class="token punctuation">}</span></span>+<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">version_hash</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment"># 省略其他检查逻辑</span>

		<span class="token comment"># 设置版本号为CMake缓存参数, 完整版本号: 4.5.27-pre.9+b342a93</span>
		<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">OUTPUT_VERSION</span><span class="token punctuation">}</span> <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">full_version</span><span class="token punctuation">}</span></span>&quot;</span> <span class="token variable">CACHE</span> STRING <span class="token string">&quot;&quot;</span> FORCE<span class="token punctuation">)</span>
	<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">endfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面就是分析 <code>bc_compute_full_version</code> 函数了。</p><p>首先查找 <code>Git</code> 程序，如果找到 <code>Git</code> 程序，函数才会继续，否则无法计算版本号。</p><p>找到 <code>Git</code> 程序后会执行 <code>git describe</code> 命令，此命令会基于当前可用的 ref 给一个人类可读的名称。</p>`,20),u=n("li",null,[n("p",null,[s("如果当前最新的 commit 上有 TAG，且 TAG 必须有描述信息或者带有 "),n("code",null,"-- tags"),s(" 参数，此命令则返回此 TAG 名称：4.5.26，")])],-1),r=n("li",null,[n("p",null,[s("否则返回离当前最近的 TAG 名称 + 此 TAG 之后的提交次数 + 当前的 commit hash 值前 7 位：4.5.26-9-gb342a93，其中 'g' 表示是 "),n("code",null,"Git"),s("，")])],-1),k={href:"https://git-scm.com/docs/git-describe",target:"_blank",rel:"noopener noreferrer"},v=a('<p>假设 <code>git describe</code> 命令返回的是：<code>4.5.26-alpha-9-gb342a93</code>，接下来通过正则表达式的分组匹配解析返回的结果。</p><p>正则表达式：<code>^([0-9]+)[.]([0-9]+)[.]([0-9]+)(-alpha|-beta)?(-[0-9]+)?(-g[0-9a-f]+)?$</code>，其分为以下 6 组：</p><ol><li><code>([0-9]+)</code> 为第一组 <code>CMAKE_MATCH_1</code>，对应 4，</li><li><code>([0-9]+)</code> 为第二组 <code>CMAKE_MATCH_2</code>，对应 5，</li><li><code>([0-9]+)</code> 为第三组 <code>CMAKE_MATCH_3</code>，对应 26，</li><li><code>(-alpha|-beta)?</code> 为第四组 <code>CMAKE_MATCH_4</code>，可为空，对应 -alpha，</li><li><code>(-[0-9]+)?</code> 为第五组 <code>CMAKE_MATCH_5</code>，可为空，对应 -9，</li><li><code>(-g[0-9a-f]+)?</code> 为第六组 <code>CMAKE_MATCH_6</code>，可为空，对应 gb342a93，</li></ol><p>分组一、分组二和分组三分别作为主要版本、次要版本和补丁版本：4.5.26。</p><p>如果解析到分组四: <code>-alpha</code>，则去掉前面的 <code>-</code>，得到后面的 <code>alpha</code>，并赋值给 <code>version_prerelease</code> 变量；如果解析到分组五: <code>-9</code>，则去掉前面的 <code>-</code>，得到后面的 <code>9</code>，并赋值给 <code>version_commit</code> 变量；如果解析到分组六: <code>-gb342a93</code>，则去掉前面的 <code>-g</code>，得到后面的 <code>b342a93</code>，并赋值给 <code>version_hash</code> 变量。</p><p>如果没有 <code>version_prerelease</code> 变量，但是有 <code>version_commit</code> 变量，则认为此补丁程序是下一个补丁版本的预发布版本，即将补丁版本号增加一个版本并赋值<code>version_prerelease</code> 变量为 <code>pre</code>。</p><p>拼接主要版本、次要版本和补丁版本为：<code>4.5.27</code>，并赋值给 <code>full_version</code> 变量。</p><p>如果有 <code>version_prerelease</code> 变量，则 <code>full_version</code> 变量追加 <code>-pre</code>，此时版本号为：<code>4.5.27-pre</code>；如果有 <code>version_commit</code> 变量，则版本号再追加 <code>version_commit</code> 和 <code>version_hash</code> 变量的值 <code>.9+b342a93</code>，得到版本号：<code>4.5.27-pre.9+b342a93</code>。</p><p>最终得到 <code>linphone-sdk</code> 的版本号：<code>4.5.27-pre.9+b342a93</code>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文记录了笔者查找 <code>linphone-sdk</code> 生成版本号的过程，同时分析了版本号的生成逻辑，<code>linphone-sdk</code> 通过获取 <code>Git</code> 提交记录和 TAG 来生成版本号：</p><ol><li>执行 <code>git describe</code> 命令获取可读 <code>Git</code> 提交信息，</li><li>通过正则表达式的分组配置模式解析得到的 <code>Git</code> 提交信息，</li><li>最后根据分组信息修正并拼接得到完整的版本号。</li></ol><p>利用 <code>Git</code> 提交信息来生成版本号这种方式，我们在写 SDK 时或许可以借鉴下。</p><p>希望可以帮到您，happy~</p>',14);function m(b,_){const e=i("ExternalLinkIcon");return o(),c("div",null,[d,n("ul",null,[u,r,n("li",null,[n("p",null,[s("具体可查看 "),n("a",k,[s("git-describe"),p(e)]),s("。")])])]),v])}const g=t(l,[["render",m],["__file","linphone-sdk-android版本号生成分析.html.vue"]]);export{g as default};

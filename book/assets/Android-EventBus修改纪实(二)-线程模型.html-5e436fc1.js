import{_ as e,Y as o,Z as c,$ as s,a0 as n,a1 as t,a3 as p,E as u}from"./framework-3d290349.js";const i={},l=s("h1",{id:"android-eventbus修改纪实-二",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#android-eventbus修改纪实-二","aria-hidden":"true"},"#"),n(" Android-EventBus修改纪实(二)")],-1),k=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),r={href:"https://juejin.cn/post/7104107150678917133",target:"_blank",rel:"noopener noreferrer"},d=p(`<ul><li>获取必达事件，</li><li>移除必达事件，</li><li>编写必达事件单元测试</li></ul><p>本篇文章补全上一篇文章未实现的部分，最后应上一篇文章中掘友的需求对 EventBus 的线程切换做下分析。</p><h2 id="纪实" tabindex="-1"><a class="header-anchor" href="#纪实" aria-hidden="true">#</a> 纪实</h2><h3 id="getrendezvousevent" tabindex="-1"><a class="header-anchor" href="#getrendezvousevent" aria-hidden="true">#</a> getRendezvousEvent</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 选择List存储必达事件，使用Pair封装必达事件的Key和Value</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> rendezvousEvents<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getRendezvousEvent</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对\`rendezvousEvents\`加锁</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>rendezvousEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历必达事件集合</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">:</span> rendezvousEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
            <span class="token comment">// 取出Key</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> next<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
            
            <span class="token comment">// 与入参进行比较</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                
                <span class="token comment">// 把Value转换为入参的类型</span>
                <span class="token keyword">return</span> eventType<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过仿照 EventBus 中获取黏性事件的实现来写出获取必达事件的实现，在源码实现中首先对存储必达事件的集合 <code>rendezvousEvents</code> 进行加锁，防止并发修改必达事件集合，其次遍历必达集合，取出必达事件的 Key，即必达事件的 Class 对象，与入参的 Class 对象进行比较，如果相等，则取出必达事件的 Value，强制转换为入参类型。</p><h3 id="removerendezvousevent" tabindex="-1"><a class="header-anchor" href="#removerendezvousevent" aria-hidden="true">#</a> removeRendezvousEvent</h3><p>有两个移除必达事件的方法，一个根据必达事件的 Class 对象进行移除，另外一个根据必达事件的实例进行移除，下面我们一一实现：</p><h4 id="removerendezvousevent-class-eventtype" tabindex="-1"><a class="header-anchor" href="#removerendezvousevent-class-eventtype" aria-hidden="true">#</a> removeRendezvousEvent(Class eventType)</h4><p>我们先实现根据必达事件的 Class 对象进行移除的方法，实现源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 选择List存储必达事件，使用Pair封装必达事件的Key和Value</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> rendezvousEvents<span class="token punctuation">;</span>

<span class="token comment">// 入参必达事件的 Class 对象</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">removeRendezvousEvent</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对\`rendezvousEvents\`加锁</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>rendezvousEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> rendezvousEvents<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 使用普通的 for 循环，避免产生 ConcurrentModificationException</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> rendezvousEvents<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> pair<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
            <span class="token comment">// 比较必达事件的 Class 对象与入参是否相等</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                rendezvousEvents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> eventType<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
            size<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的源码中首先对 <code>rendezvousEvents</code> 进行加锁，在临界区内使用普通的 for 循环，而不使用增强的 forEach 循环遍历 <code>rendezvousEvents</code> 是避免发生同步修改异常 <code>ConcurrentModificationException</code>，虽然 <code>rendezvousEvents</code> 的实例是 <code>CopyOnWriteArrayList</code>。</p><p>在循环体内，取出存储必达事件的 Class 对象与入参比较，判断是否相等，相等即移除此必达事件，同时返回必达事件的实例。</p><p>不知读者有没有发现这里移除必达事件有什么问题？</p><p>我们的 <code>rendezvousEvents</code> 是 List 集合结构，上面的实现中，我们是不是只移除了第一个必达事件方法就返回了，如何实现根据必达事件的 Class 对象移除必达事件相信读者可以自行修改实现，笔者这里就不实现了。</p><h4 id="removerendezvousevent-object-event" tabindex="-1"><a class="header-anchor" href="#removerendezvousevent-object-event" aria-hidden="true">#</a> removeRendezvousEvent(Object event)</h4><p>接下来我们实现根据必达事件的实例进行移除，实现源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 选择List存储必达事件，使用Pair封装必达事件的Key和Value</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> rendezvousEvents<span class="token punctuation">;</span>

<span class="token comment">// 入参必达事件的实例</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeRendezvousEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 对\`rendezvousEvents\`加锁</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>rendezvousEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> rendezvousEvents<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 使用普通的 for 循环，避免产生 ConcurrentModificationException</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> rendezvousEvents<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> second <span class="token operator">=</span> pair<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
            
            <span class="token comment">// 比较必达事件的实例与入参是否相等</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                rendezvousEvents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
            size<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们根据 <code>removeRendezvousEvent(Class&lt;T&gt; eventType)</code> 的实现，很容易就可以实现根据必达事件的实例进行移除的逻辑，与 <code>removeRendezvousEvent(Class&lt;T&gt; eventType)</code> 的实现类似，首先对 <code>rendezvousEvents</code> 进行加锁，在临界区内使用普通的 for 循环，在循环体内，取出存储必达事件的实例与入参比较，判断是否相等，相等即移除此必达事件，同时把移除结果置为 True ，最后返回移除结果。</p><p>至此，我们终于完成了对 EventBus 增加必达事件的所有逻辑。</p><h3 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h3><p>接下来让我们编写单元测试逻辑来测试我们必达事件的逻辑正确性吧。</p><h4 id="eventbusstickyeventtest" tabindex="-1"><a class="header-anchor" href="#eventbusstickyeventtest" aria-hidden="true">#</a> EventBusStickyEventTest</h4><p>我们先看看 EventBus 中对黏性事件的单元测试用例，用例较多，笔者挑选几个：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventBusStickyEventTest</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractEventBusTest</span> <span class="token punctuation">{</span>

    <span class="token comment">// 测试发送黏性事件的逻辑</span>
    <span class="token comment">// 先发送黏性事件，再注册订阅者，然后断言最后一个事件与发送的黏性事件相等，最后断言最后一个订阅方法的线程是当前线程</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostSticky</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postSticky</span><span class="token punctuation">(</span><span class="token string">&quot;Sticky&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Sticky&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lastThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 测试没有黏性事件订阅方法时的逻辑</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostNonStickyRegisterSticky</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;NonSticky&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 测试注册与反注册订阅者对黏性事件的影响</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostStickyWithRegisterAndUnregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postSticky</span><span class="token punctuation">(</span><span class="token string">&quot;Sticky&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Sticky&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

        eventBus<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Sticky&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        eventBus<span class="token punctuation">.</span><span class="token function">postSticky</span><span class="token punctuation">(</span><span class="token string">&quot;NewSticky&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;NewSticky&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

        eventBus<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;NewSticky&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 测试获取黏性事件</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostStickyAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postSticky</span><span class="token punctuation">(</span><span class="token string">&quot;Sticky&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Sticky&quot;</span><span class="token punctuation">,</span> eventBus<span class="token punctuation">.</span><span class="token function">getStickyEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 测试移除黏性事件</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostStickyRemoveEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postSticky</span><span class="token punctuation">(</span><span class="token string">&quot;Sticky&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span>eventBus<span class="token punctuation">.</span><span class="token function">removeStickyEvent</span><span class="token punctuation">(</span><span class="token string">&quot;Sticky&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>eventBus<span class="token punctuation">.</span><span class="token function">getStickyEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventbusrendezvouseventtest" tabindex="-1"><a class="header-anchor" href="#eventbusrendezvouseventtest" aria-hidden="true">#</a> EventBusRendezvousEventTest</h4><p>我们可以根据 <code>EventBusStickyEventTest</code> 编写必达事件的测试用例，以下为笔者实现的测试用例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventBusRendezvousEventTest</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractEventBusTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRendezvousSticky</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lastThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostRendezvousTwoEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntTestEvent</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostRendezvousTwoSubscribers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntTestEvent</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RendezvousIntTestSubscriber</span> subscriber2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RendezvousIntTestSubscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>subscriber2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntTestEvent</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostRendezvousRegisterNonRendezvous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NonRendezvousSubscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostNonRendezvousRegisterRendezvous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;NonRendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostRendezvousTwice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;NewRendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;NewRendezvous&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostRendezvousThenPostNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;NonRendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostRendezvousWithRegisterAndUnregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

        eventBus<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;NewRendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;NewRendezvous&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

        eventBus<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;NewRendezvous&quot;</span><span class="token punctuation">,</span> lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostRendezvousAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">,</span> eventBus<span class="token punctuation">.</span><span class="token function">getRendezvousEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostRendezvousRemoveClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">removeRendezvousEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>eventBus<span class="token punctuation">.</span><span class="token function">getRendezvousEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostRendezvousRemoveEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span>eventBus<span class="token punctuation">.</span><span class="token function">removeRendezvousEvent</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>eventBus<span class="token punctuation">.</span><span class="token function">getRendezvousEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPostRendezvousRemoveAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntTestEvent</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">removeAllRendezvousEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>eventBus<span class="token punctuation">.</span><span class="token function">getRendezvousEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>eventBus<span class="token punctuation">.</span><span class="token function">getRendezvousEvent</span><span class="token punctuation">(</span><span class="token class-name">IntTestEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRemoveRendezvousEventInSubscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RendezvousStickySubscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">postRendezvous</span><span class="token punctuation">(</span><span class="token string">&quot;Rendezvous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>lastEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>eventBus<span class="token punctuation">.</span><span class="token function">getRendezvousEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>rendezvous <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trackEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>rendezvous <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">IntTestEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trackEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RendezvousStickySubscriber</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unused&quot;</span><span class="token punctuation">)</span>
        <span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>rendezvous <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            eventBus<span class="token punctuation">.</span><span class="token function">removeRendezvousEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonRendezvousSubscriber</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Subscribe</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">trackEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Subscribe</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">IntTestEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">trackEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RendezvousIntTestSubscriber</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>rendezvous <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">IntTestEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">trackEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的测试用例源码中，笔者编写了 13 个测试用例，涉及发送一个必达事件，发送两个必达事件，发送必达事件与普通事件，注册订阅者与反注册对必达事件的影响，获取和移除必达事件等。</p><h3 id="线程调度" tabindex="-1"><a class="header-anchor" href="#线程调度" aria-hidden="true">#</a> 线程调度</h3><h4 id="线程模型" tabindex="-1"><a class="header-anchor" href="#线程模型" aria-hidden="true">#</a> 线程模型</h4><p>目前 EventBus 对订阅方法支持 5 种线程模型的调度，分别是：</p><ol><li><code>ThreadMode.POSTING</code> // <strong>对于普通事件来说在事件发布线程来分发事件</strong></li><li><code>ThreadMode.MAIN</code> // 在主线程来分发事件，根据是否在 Android 上使用，处理逻辑不同</li><li><code>ThreadMode.MAIN_ORDERED</code> // 在主线程按顺序来分发事件</li><li><code>ThreadMode.BACKGROUND</code> // 在后台线程来分发事件，根据是否在 Android 上使用，处理逻辑不同。使用单线程处理，尽量不要进行耗时操作以免阻塞后台线程</li><li><code>ThreadMode.ASYNC</code> // 在异步线程来分发事件，使用线程池处理</li></ol><p>在上一篇文章中我们分析黏性事件发送的流程时，事件的发送都会调用 <code>postToSubscription</code> 方法，最终调用 <code>invokeSubscriber</code> 方法来反射调用订阅方法，下面再贴出 <code>postToSubscription</code> 的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postToSubscription</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription<span class="token punctuation">,</span> <span class="token class-name">Object</span> event<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>subscription<span class="token punctuation">.</span>subscriberMethod<span class="token punctuation">.</span>threadMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理POSTING</span>
        <span class="token keyword">case</span> <span class="token constant">POSTING</span><span class="token operator">:</span>
            <span class="token comment">// 直接分发事件</span>
            <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 处理MAIN</span>
        <span class="token keyword">case</span> <span class="token constant">MAIN</span><span class="token operator">:</span>
            <span class="token comment">// 是否是主线程，在非 Android 平台上时，isMainThread 也是 true</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 此时 mainThreadPoster != null，可以认为是在 Android 平台上</span>
                mainThreadPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理MAIN_ORDERED</span>
        <span class="token keyword">case</span> <span class="token constant">MAIN_ORDERED</span><span class="token operator">:</span>
            <span class="token comment">// 不管是否是主线程，总是先判断是否可以入队</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mainThreadPoster <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mainThreadPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// temporary: technically not correct as poster not decoupled from subscriber</span>
                <span class="token comment">// 否则直接分发事件</span>
                <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理BACKGROUND</span>
        <span class="token keyword">case</span> <span class="token constant">BACKGROUND</span><span class="token operator">:</span>
            <span class="token comment">// 如果是主线程则入队，backgroundPoster使用单个后台线程依次分发事件，订阅方法应尽快返回以免阻塞后台线程</span>
            <span class="token comment">// 在非 Android 平台上时，isMainThread 也是 true，即在非 Android 平台上时，始终在后台线程分发事件</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                backgroundPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 否则直接分发事件</span>
                <span class="token function">invokeSubscriber</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理ASYNC</span>
        <span class="token keyword">case</span> <span class="token constant">ASYNC</span><span class="token operator">:</span>
            <span class="token comment">// 始终异步分发事件</span>
            asyncPoster<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown thread mode: &quot;</span> <span class="token operator">+</span> subscription<span class="token punctuation">.</span>subscriberMethod<span class="token punctuation">.</span>threadMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="posting" tabindex="-1"><a class="header-anchor" href="#posting" aria-hidden="true">#</a> POSTING</h4><p>这是 <code>@Subscribe</code> 注解中线程模型的默认配置，对于该线程调度模型，这里需要注意：</p><ol><li><strong>对于普通事件来说，事件发布与订阅方法将在同一个线程，这是该线程调度模型的本意</strong></li><li><strong>但是对于黏性事件和必达事件来说，事件发布与订阅方法可能不在同一个线程</strong></li></ol><p>比如以下代码示例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// MainActivity.kt</span>

<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>
    
    thread <span class="token punctuation">{</span>
        <span class="token comment">// 在子线程中发布黏性事件</span>
        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postSticky</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Event-1&quot;</span></span><span class="token punctuation">)</span>
        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;onCreate: postSticky-1, ThreadName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

        runOnUiThread <span class="token punctuation">{</span>
            <span class="token comment">// 在主线程中注册订阅者</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;onCreate: register, ThreadName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>

            <span class="token comment">// 再在主线程发布一个黏性事件</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;onCreate: postSticky-2, ThreadName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postSticky</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Event-2&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 订阅方法 使用 POSTING 线程模型</span>
<span class="token annotation builtin">@Subscribe</span><span class="token punctuation">(</span>threadMode <span class="token operator">=</span> ThreadMode<span class="token punctuation">.</span>POSTING<span class="token punctuation">,</span> sticky <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">eventBusTest</span><span class="token punctuation">(</span>event<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;eventBusTest: event = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">event</span></span><span class="token string">, ThreadName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Logcat</span>
<span class="token operator">&gt;</span><span class="token operator">&gt;</span> onCreate<span class="token operator">:</span> postSticky<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ThreadName <span class="token operator">=</span> Thread<span class="token operator">-</span><span class="token number">290</span>   ①
<span class="token operator">&gt;</span><span class="token operator">&gt;</span> onCreate<span class="token operator">:</span> register<span class="token punctuation">,</span> ThreadName <span class="token operator">=</span> main             ②
<span class="token operator">&gt;</span><span class="token operator">&gt;</span> eventBusTest<span class="token operator">:</span> event <span class="token operator">=</span> Event<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ThreadName <span class="token operator">=</span> main  ③
<span class="token operator">&gt;</span><span class="token operator">&gt;</span> onCreate<span class="token operator">:</span> postSticky<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> ThreadName <span class="token operator">=</span> main         ④
<span class="token operator">&gt;</span><span class="token operator">&gt;</span> eventBusTest<span class="token operator">:</span> event <span class="token operator">=</span> Event<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> ThreadName <span class="token operator">=</span> main  ⑤
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码示例中，有一个使用 <code>POSTING</code> 线程模型的订阅方法，我们分析下示例代码：</p><ol><li>我们先在子线程中发布一个黏性事件 <code>Event-1</code>，</li><li>然后切换到主线程去注册订阅者，</li><li>最后在主线程再发布一个黏性事件 <code>Event-2</code>。</li></ol><p>接下来我们分析下 Logcat 的输出，一共 5 条日志输出，我们一一分析：</p><ol><li>第一条日志是在子线程发布第一个黏性事件时输出的，标识事件发布是在子线程：<strong>Thread-290</strong></li><li>第二条日志是在主线程中注册订阅者时输出的，标识注册订阅者是在主线程</li><li>第三条日志是订阅方法收到第一个黏性事件时输出的，标识订阅方法此时是在主线程</li><li>第四条日志是在主线程中发布第二个黏性事件时输出的，标识事件发布是在主线程</li><li>第五条日志是订阅方法收到第二个黏性事件时输出的，标识订阅方法此时是在主线程</li></ol><p>我们根据 Logcat 的日志输出发现订阅方法收到 <code>Event-1</code> 黏性事件是在 <code>main</code> 线程，这与 <code>POSTING</code> 线程模型的描述不符，再往下看收到 <code>Event-2</code> 黏性事件是在 <code>main</code> 线程，与 <code>POSTING</code> 线程模型的描述符合。</p>`,45),v={href:"https://juejin.cn/post/7104107150678917133",target:"_blank",rel:"noopener noreferrer"},m=p('<ol><li>黏性事件发布时如果没有订阅者，那么黏性事件的发送将在订阅者 <code>register</code> 时发送</li><li>黏性事件发布时有订阅者，那么已有的订阅者会收到黏性事件，发布后注册的订阅者会在 <code>register</code> 时收到</li></ol><p>最后得出结论：</p><ol><li><strong>谨慎把 <code>POSTING</code> 线程模型用于黏性事件和必达事件，此时 <code>POSTING</code> 线程模型将失效，订阅方法将在订阅者注册的线程中调用</strong></li><li><strong>对于普通事件，使用 <code>POSTING</code> 线程模型时，最好不用进行耗时操作，以免阻塞事件发布线程</strong></li></ol><h4 id="main和main-ordered" tabindex="-1"><a class="header-anchor" href="#main和main-ordered" aria-hidden="true">#</a> MAIN和MAIN_ORDERED</h4><p><code>MAIN</code> 和 <code>MAIN_ORDERED</code> 线程模型都会在主线程分发事件，后者有个排序作用：</p><ol><li><code>MAIN</code> 线程模型首先尝试直接在主线程分发事件(这可能会阻塞事件发布线程)，如果不行再切换至主线程分发，</li><li><code>MAIN_ORDERED</code> 线程模型不管当前线程是否是主线程，始终会切换至主线程依次分发，这保证不会阻塞事件发布线程。</li></ol><p><strong>不管使用哪种线程模型都不应在订阅方法中进行耗时操作。</strong></p><h4 id="background" tabindex="-1"><a class="header-anchor" href="#background" aria-hidden="true">#</a> BACKGROUND</h4><p><code>BACKGROUND</code> 线程模式也需要注意普通事件与黏性事件和必达事件不同的分发逻辑：</p><ol><li>如果是普通事件，事件将始终在 EventBus 的单个后台线程中依次分发，</li><li>如果是黏性事件或必达事件，事件可能不在 EventBus 的单个后台线程中依次分发，原因见 <code>POSTING</code> 线程模型。</li></ol><h4 id="async" tabindex="-1"><a class="header-anchor" href="#async" aria-hidden="true">#</a> ASYNC</h4><p><code>ASYNC</code> 线程模型都将异步的分发事件，在此线程模型下可以执行耗时操作，但也应该避免触发大量耗时操作，以限制并发线程数。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本篇文章提供了一版在上一篇文章中必达事件未实现方法的实现，并对必达事件编写了单元测试，最后通过分析 EventBus 提供的 5 种线程模型，明白了 EventBus 是如何实现线程切换的。</p><p>EventBus 对外提供了 5 种线程模型，方便使用者做事件的线程调度，但无论使用哪种线程模型，在订阅方法中都应该尽量避免进行耗时操作。</p><p>不过我们最后没有分析线程切换的具体源码，下篇一定~~</p><p>happy~~，希望可以帮你更好的使用 EventBus</p>',17);function b(f,y){const a=u("ExternalLinkIcon");return o(),c("div",null,[l,k,s("p",null,[n("在上一篇 "),s("a",r,[n("Android-EventBus修改纪实"),t(a)]),n(" 中笔者分析了 EventBus 黏性事件的发送流程并对 EventBus 进行增强实现了必达事件的支持，上一篇文章最后笔者没有实现以下方法：")]),d,s("p",null,[n("以上发现与上一篇 "),s("a",v,[n("Android-EventBus修改纪实"),t(a)]),n(" 中黏性事件的发送流程分析吻合：")]),m])}const h=e(i,[["render",b],["__file","Android-EventBus修改纪实(二)-线程模型.html.vue"]]);export{h as default};

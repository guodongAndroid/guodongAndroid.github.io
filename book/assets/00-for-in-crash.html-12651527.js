import{_ as n,Y as s,Z as a,a3 as t}from"./framework-3d290349.js";const e={},p=t(`<h1 id="使用kotlin协程的崩溃纪实-一" tabindex="-1"><a class="header-anchor" href="#使用kotlin协程的崩溃纪实-一" aria-hidden="true">#</a> 使用Kotlin协程的崩溃纪实(一)</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>由于笔者对Kotlin协程缺乏深刻的理解以及充分的实践，导致在实际工作中使用Kotlin协程时遇到一些崩溃的问题。</p><p>那么本文主要记录遇到的这些崩溃问题，这是其中之一。</p><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>在Kotlin协程中如果不能合理的使用<code>for-in</code>循环，可能会抛出<code>ConcurrentModificationException</code>异常导致崩溃。</p><h2 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码" aria-hidden="true">#</a> 伪代码</h2><p>下面是符合背景中描述的伪代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> ml <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ml<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>ml<span class="token punctuation">)</span>

    <span class="token keyword">val</span> run <span class="token operator">=</span> RunSuspend<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">val</span> scope <span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>EmptyCoroutineContext<span class="token punctuation">)</span>
    scope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token comment">// 协程A</span>
		<span class="token keyword">try</span>	<span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> ml<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        		<span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">suspendWork</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			run<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            run<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">val</span> await <span class="token operator">=</span> RunSuspend<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	await<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">1_000L</span><span class="token punctuation">)</span>
    
    scope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token comment">// 协程B</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Add 11: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">ml<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">val</span> code <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Finish with [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">code</span></span><span class="token string">]&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">suspendWork</span><span class="token punctuation">(</span>timeout<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">=</span> suspendCoroutine<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span> <span class="token punctuation">{</span> continuation <span class="token operator">-&gt;</span>
    thread <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
        continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>Random<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">val</span> DF <span class="token operator">=</span> <span class="token function">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;HH:mm:ss.SSS&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">log</span><span class="token punctuation">(</span>any<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">DF<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">any</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的伪代码大致的逻辑如下：</p><ol><li>创建一个可变列表<code>ml</code>并添加[0, 10]这11条数据，</li><li>创建一个<code>RunSuspend</code>的实例<code>run</code>，用于主线程等待协程执行完毕，否则主线程退出，协程无法执行完毕，</li><li>创建一个协程作用域<code>scope，</code>启动一个协程A，在协程中执行<code>for-in</code>循环，在循环中调用挂起函数<code>suspendWork</code>模拟执行耗时任务，其每500ms输出一条日志，循环执行完毕后或抛出异常时调用<code>run.resumeWith</code>通知协程执行完毕并停止阻塞主线程，</li><li>再创建一个<code>RunSuspend</code>的实例<code>await</code>，用于阻塞主线程1000ms，然后启动一个新的协程B为可变列表<code>ml</code>新增一条数据，</li><li>调用<code>run.await</code>阻塞主线程并等待协程A执行完毕。</li></ol><p>伪代码执行的期望结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">6</span>, <span class="token number">7</span>, <span class="token number">8</span>, <span class="token number">9</span>, <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:39.588 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: true: <span class="token number">0</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:40.085 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: Add <span class="token number">11</span>: <span class="token boolean">true</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:40.095 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: false: <span class="token number">1</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:40.598 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: true: <span class="token number">2</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:41.104 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: true: <span class="token number">3</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:41.610 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: true: <span class="token number">4</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:42.114 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: false: <span class="token number">5</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:42.619 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: false: <span class="token number">6</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:43.122 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: false: <span class="token number">7</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:43.628 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: false: <span class="token number">8</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:44.132 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: true: <span class="token number">9</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:44.637 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: false: <span class="token number">10</span>
<span class="token punctuation">[</span><span class="token number">22</span>:10:44.638 main<span class="token punctuation">]</span>: Finish with <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>笔者期望伪代码可以正常的执行完毕。</p><p>但是，实际上伪代码执行的结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">6</span>, <span class="token number">7</span>, <span class="token number">8</span>, <span class="token number">9</span>, <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">22</span>:11:34.338 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: false: <span class="token number">0</span>
<span class="token punctuation">[</span><span class="token number">22</span>:11:34.836 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: Add <span class="token number">11</span>: <span class="token boolean">true</span>
<span class="token punctuation">[</span><span class="token number">22</span>:11:34.839 DefaultDispatcher-worker-1<span class="token punctuation">]</span>: true: <span class="token number">1</span>
<span class="token punctuation">[</span><span class="token number">22</span>:11:34.840 main<span class="token punctuation">]</span>: Finish with <span class="token punctuation">[</span>-1<span class="token punctuation">]</span>
java.util.ConcurrentModificationException
	at java.util.ArrayList<span class="token variable">$Itr</span>.checkForComodification<span class="token punctuation">(</span>ArrayList.java:901<span class="token punctuation">)</span>
	at java.util.ArrayList<span class="token variable">$Itr</span>.next<span class="token punctuation">(</span>ArrayList.java:851<span class="token punctuation">)</span>
	at CoroutinesKt.case1<span class="token punctuation">(</span>Coroutines.kt:56<span class="token punctuation">)</span>
	at CoroutinesKt.access<span class="token variable">$case1</span><span class="token punctuation">(</span>Coroutines.kt:1<span class="token punctuation">)</span>
	at CoroutinesKt<span class="token variable">$case1</span><span class="token variable">$1</span>.invokeSuspend<span class="token punctuation">(</span>Coroutines.kt<span class="token punctuation">)</span>
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith<span class="token punctuation">(</span>ContinuationImpl.kt:33<span class="token punctuation">)</span>
	at kotlinx.coroutines.DispatchedTask.run<span class="token punctuation">(</span>DispatchedTask.kt:106<span class="token punctuation">)</span>
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely<span class="token punctuation">(</span>CoroutineScheduler.kt:571<span class="token punctuation">)</span>
	at kotlinx.coroutines.scheduling.CoroutineScheduler<span class="token variable">$Worker</span>.executeTask<span class="token punctuation">(</span>CoroutineScheduler.kt:750<span class="token punctuation">)</span>
	at kotlinx.coroutines.scheduling.CoroutineScheduler<span class="token variable">$Worker</span>.runWorker<span class="token punctuation">(</span>CoroutineScheduler.kt:678<span class="token punctuation">)</span>
	at kotlinx.coroutines.scheduling.CoroutineScheduler<span class="token variable">$Worker</span>.run<span class="token punctuation">(</span>CoroutineScheduler.kt:665<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果分析：</p><ol><li>协程中的<code>for-in</code>循环输出了2条日志，每次输出日志时，其实已经是每次遍历执行500ms之后了，</li><li>阻塞主线程1000ms后，我们在启动的协程B中为可变列表<code>ml</code>新增了一条数据：11，</li><li>在第三次遍历时协程A中抛出了一个异常：<code>java.util.ConcurrentModificationException</code>。</li></ol><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>为什么执行结果会与我们期望的结果不同呢？接下来我们分析下原因。</p><p>首先我们再仔细观察下协程中的代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>scope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span>	<span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> ml<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">suspendWork</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        run<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        run<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照笔者的想法，<code>for-in</code>循环的执行逻辑如下：</p><ol><li>循环体是在同一个线程中执行，</li><li>循环体是同步且顺序执行的，</li></ol><p>可以简单理解循环体的执行是线程安全的。</p><h3 id="真的线程安全么" tabindex="-1"><a class="header-anchor" href="#真的线程安全么" aria-hidden="true">#</a> 真的线程安全么？</h3><p>针对第一点，目前的<code>scope</code>没有指定运行的线程，那么协程默认是在<code>Default</code>线程池中执行，同时循环体的每次执行都会触发两次线程切换，其一是从<code>launch</code>协程体执行的线程切换至<code>suspendWork</code>挂起函数执行的线程，其二是<code>suspendWork</code>挂起函数执行完毕后，从<code>suspendWork</code>挂断函数执行线程切换回<code>launch</code>协程体执行的线程，而<code>launch</code>协程体执行的线程由<code>Default</code>线程池分配，线程池分配线程存在不固定性，所以循环体在同一个线程中执行不能成立，自然不能称为是线程安全的。</p><h3 id="为什么会有这样的想法呢" tabindex="-1"><a class="header-anchor" href="#为什么会有这样的想法呢" aria-hidden="true">#</a> 为什么会有这样的想法呢？</h3><p>正如前言中所说，笔者对协程缺乏深刻的理解以及充分的实践，而协程的一大特点是：使用「同步代码」写出异步程序。</p><p>其实笔者就是被「同步代码」这一表象所“欺骗”，这也是笔者对协程缺乏深刻理解的佐证。</p><p>使用「同步代码」写出异步程序，对程序猿来说这是多么美好的事情，但是如果对协程理解的不够深入，不清楚它背后的逻辑，那么很容易就像笔者一样被它简单的表象所“欺骗”。</p><p>针对第二点，协程的特点是使用「同步代码」写出异步程序，在循环体中调用了挂起函数，那么循环逻辑必然是异步程序，所以第二点也不成立。</p><h3 id="异常原因" tabindex="-1"><a class="header-anchor" href="#异常原因" aria-hidden="true">#</a> 异常原因</h3><p><code>in</code>在集合遍历时是一个操作符重载关键字，我们把鼠标放在<code>in</code>关键字上，然后按住<code>ctrl(windows)</code>或<code>command(macos)</code>键，再点击鼠标左键，会看到它其实重载的是<code>Iterator</code>的<code>next()</code>和<code>hasNext()</code>方法，所以<code>for-in</code>循环其实是通过<code>Iterator</code>来使用的。</p><p>在<code>Iterator</code>的<code>next()</code>方法中会检查集合是否被修改，如果被修改则抛出<code>java.util.ConcurrentModificationException</code>异常。</p><h3 id="如何修复" tabindex="-1"><a class="header-anchor" href="#如何修复" aria-hidden="true">#</a> 如何修复？</h3><p>修复方案有多种，比如：</p><ol><li>在协程体中，先对<code>ml</code>集合进行一次浅拷贝赋值给<code>ml2</code>，然后遍历<code>ml2</code>，如此便不会抛出上述异常，但是无法遍历<code>ml</code>中新增的元素，</li><li>使用加锁的方式，遍历<code>ml</code>集合时不允许其他线程对<code>ml</code>集合进行更新，</li><li>其他方式，</li></ol><p>具体选择哪种修复方案，这里可以根据业务场景的不同而选择不同的修复方案。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文记录的笔者在使用Kotlin协程过程中遇到的<code>for-in</code>崩溃问题，通过伪代码笔者复现了崩溃问题，并分析了问题产生的原因以及给出一些修复方案供选择参考。</p><p>其中最重要的是发现自身的不足，发现自己的不足也是一种进步。</p><p>总之就是：</p><blockquote><p>纸上得来终觉浅，绝知此事要躬行。</p></blockquote>`,44),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","00-for-in-crash.html.vue"]]);export{r as default};

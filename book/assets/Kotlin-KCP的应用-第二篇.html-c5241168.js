import{_ as t,Y as o,Z as p,$ as n,a0 as s,a1 as e,a3 as i,E as l}from"./framework-3d290349.js";const c="/book/assets/202205120932971-c1ba65b9.png",u="/book/assets/202205120959782-d8f17540.png",r={},d=n("h1",{id:"kotlin-kcp的应用-第二篇",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#kotlin-kcp的应用-第二篇","aria-hidden":"true"},"#"),s(" Kotlin-KCP的应用-第二篇")],-1),k=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),v={href:"https://juejin.cn/post/7095248182912745502",target:"_blank",rel:"noopener noreferrer"},m=n("ol",null,[n("li",null,"记录如何简单搭建 KCP 开发环境"),n("li",null,"使用 KCP 解决第一篇中的问题")],-1),g=n("h2",{id:"何为kcp-为何不使用ksp",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#何为kcp-为何不使用ksp","aria-hidden":"true"},"#"),s(" 何为KCP？为何不使用KSP？")],-1),b=n("h3",{id:"ksp",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ksp","aria-hidden":"true"},"#"),s(" KSP")],-1),h=n("code",null,"KSP",-1),f={href:"https://github.com/google/ksp",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"Kotlin Symbol Processing(Kotlin符号处理器)",-1),y=i('<h3 id="kcp" tabindex="-1"><a class="header-anchor" href="#kcp" aria-hidden="true">#</a> KCP</h3><p><code>KCP</code> 即 <code>Kotlin Compiler Plugin(Kotlin编译器插件)</code>，在 <code>kotlinc </code> 过程中提供 hook 时机，在此期间可以生成代码、修改字节码等</p><p>标准的 KCP 架构如下<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>：</p><p><img src="'+c+'" alt="KCP架构" loading="lazy"></p><h3 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> Plugin</h3><ul><li>Gradle 插件，与 Kotlin 无关，在 build.gradle 脚本中提供一个入口</li><li>通过 Gradle 扩展设置配置信息</li></ul><h3 id="subplugin" tabindex="-1"><a class="header-anchor" href="#subplugin" aria-hidden="true">#</a> Subplugin</h3><ul><li>介于 Gradle 和 Kotlin 直接的 APIs 接口</li><li>读取 Gradle 扩展配置信息并写入 <code>SubpluginOptions</code></li><li>定义编译器插件的唯一<code>ID</code></li><li>定义 Kotlin 插件的 Maven 坐标信息，便于编译器下载它</li></ul><h3 id="commandlinprocessor" tabindex="-1"><a class="header-anchor" href="#commandlinprocessor" aria-hidden="true">#</a> CommandLinProcessor</h3><ul><li>设置 Kotlin 插件唯一 ID</li><li>读取 kotlinc -Xplugin 参数</li><li>读取 <code>SubpluginOptions</code> 配置信息，并写入 <code>CompilerConfigurationKeys</code></li></ul><h3 id="componentregistrar" tabindex="-1"><a class="header-anchor" href="#componentregistrar" aria-hidden="true">#</a> ComponentRegistrar</h3><ul><li>读取 <code>CompilerConfigurationKeys</code></li><li>注册 <code>Extension</code> 到各编译流程</li></ul><h3 id="extension" tabindex="-1"><a class="header-anchor" href="#extension" aria-hidden="true">#</a> Extension</h3><ul><li>生成代码</li><li>修改字节码</li><li>多种类型的扩展，比如 <ul><li>ExpressionCodegenExtension</li><li>ClassBuilderInterceptorExtension</li><li>StorageComponentContainerContributor</li><li>IrGenerationExtension</li></ul></li></ul><h2 id="实现kcp" tabindex="-1"><a class="header-anchor" href="#实现kcp" aria-hidden="true">#</a> 实现KCP</h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h3><p>根据 KCP 的架构，下面一一进行实现</p><p><img src="'+u+`" alt="项目架构" loading="lazy"></p><p>上图是本仓库架构，旨在通过 KCP 在 Java 字节码中 <code>@Hide</code> 注解目标上设置 <code>ACC_SYNTHETIC</code> 标识，使其在 Java 中不能正常调用，达到隐藏 API 的效果</p><h3 id="build-gradle-project-level" tabindex="-1"><a class="header-anchor" href="#build-gradle-project-level" aria-hidden="true">#</a> build.gradle - project level</h3><p>在项目级别的 build.gradle 脚本中配置插件依赖</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>buildscript <span class="token punctuation">{</span>
    <span class="token comment">// 配置 Kotlin 插件唯一ID</span>
    ext<span class="token punctuation">.</span>kotlin_plugin_id <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;com.guodong.android.mask.kcp&quot;</span></span>
    
    <span class="token comment">// 配置 Kotlin 插件版本</span>
    ext<span class="token punctuation">.</span>plugin_version <span class="token operator">=</span> <span class="token string">&#39;x.x.x&#39;</span>
<span class="token punctuation">}</span>

plugins <span class="token punctuation">{</span>
    <span class="token comment">// 配置 Gradle 发布插件，可以不再写 META-INF</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;com.gradle.plugin-publish&quot;</span></span><span class="token punctuation">)</span> version <span class="token interpolation-string"><span class="token string">&quot;0.16.0&quot;</span></span> apply <span class="token boolean">false</span>
    
    <span class="token comment">// 配置生成 BuildConfig 插件</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;com.github.gmazzo.buildconfig&quot;</span></span><span class="token punctuation">)</span> version <span class="token interpolation-string"><span class="token string">&quot;3.0.3&quot;</span></span> apply <span class="token boolean">false</span>
    id <span class="token string">&#39;org.jetbrains.kotlin.jvm&#39;</span> version <span class="token string">&#39;1.6.10&#39;</span> apply <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="plugin-gradle" tabindex="-1"><a class="header-anchor" href="#plugin-gradle" aria-hidden="true">#</a> plugin-gradle</h3><p>接下来编写 Gradle 插件，此插件对应 KCP 架构中的 <code>Plugin</code> 和 <code>Subplugin</code></p><p>首先配置下 build.gradle.kts 脚本</p><h4 id="build-gradle-kts-module-level" tabindex="-1"><a class="header-anchor" href="#build-gradle-kts-module-level" aria-hidden="true">#</a> build.gradle.kts - module level</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>plugins <span class="token punctuation">{</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;java-gradle-plugin&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;jvm&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.github.gmazzo.buildconfig&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;gradle-plugin-api&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

buildConfig <span class="token punctuation">{</span>
    <span class="token comment">// 配置 BuildConfig 的包名</span>
    <span class="token function">packageName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.mask.kcp.gradle&quot;</span></span><span class="token punctuation">)</span>
    
    <span class="token comment">// 设置 Kotlin 插件唯一 ID</span>
    <span class="token function">buildConfigField</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;String&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;KOTLIN_PLUGIN_ID&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;\\&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">rootProject<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;kotlin_plugin_id&quot;</span></span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\&quot;&quot;</span></span><span class="token punctuation">)</span>
    
    <span class="token comment">// 设置 Kotlin 插件 GroupId</span>
    <span class="token function">buildConfigField</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;String&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;KOTLIN_PLUGIN_GROUP&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;\\&quot;com.guodong.android\\&quot;&quot;</span></span><span class="token punctuation">)</span>
    
    <span class="token comment">// 设置 Kotlin 插件 ArtifactId</span>
    <span class="token function">buildConfigField</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;String&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;KOTLIN_PLUGIN_NAME&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;\\&quot;mask-kcp-kotlin-plugin\\&quot;&quot;</span></span><span class="token punctuation">)</span>
    
    <span class="token comment">// 设置 Kotlin 插件 Version</span>
    <span class="token function">buildConfigField</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;String&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;KOTLIN_PLUGIN_VERSION&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;\\&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">rootProject<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;PLUGIN_VERSION&quot;</span></span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\&quot;&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

gradlePlugin <span class="token punctuation">{</span>
    plugins <span class="token punctuation">{</span>
        <span class="token function">create</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Mask&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            id <span class="token operator">=</span> rootProject<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;kotlin_plugin_id&quot;</span></span><span class="token punctuation">]</span> <span class="token keyword">as</span> String <span class="token comment">// \`apply plugin: &quot;com.guodong.android.mask.kcp&quot;\`</span>
            displayName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Mask Kcp&quot;</span></span>
            description <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Mask Kcp&quot;</span></span>
            implementationClass <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.mask.kcp.gradle.MaskGradlePlugin&quot;</span></span> <span class="token comment">// 插件入口类</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span>withType<span class="token operator">&lt;</span>KotlinCompile<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    kotlinOptions<span class="token punctuation">.</span>jvmTarget <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.8&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="maskgradleplugin" tabindex="-1"><a class="header-anchor" href="#maskgradleplugin" aria-hidden="true">#</a> MaskGradlePlugin</h4><p>创建 <code>MaskGradlePlugin</code> 实现 <code>KotlinCompilerPluginSupportPlugin</code> 接口</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MaskGradlePlugin <span class="token operator">:</span> KotlinCompilerPluginSupportPlugin <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Project<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Welcome to guodongAndroid mask kcp gradle plugin.&quot;</span></span><span class="token punctuation">)</span>
        
        <span class="token comment">// 此处可以配置 Gradle 插件扩展</span>
        <span class="token comment">// 本插件没有配置项, 无需配置扩展</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 是否适用, 默认True</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">isApplicable</span><span class="token punctuation">(</span>kotlinCompilation<span class="token operator">:</span> KotlinCompilation<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span>

    <span class="token comment">// 获取 Kotlin 插件唯一ID</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getCompilerPluginId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>KOTLIN_PLUGIN_ID

    <span class="token comment">// 获取 Kotlin 插件 Maven 坐标信息</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getPluginArtifact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SubpluginArtifact <span class="token operator">=</span> <span class="token function">SubpluginArtifact</span><span class="token punctuation">(</span>
        groupId <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>KOTLIN_PLUGIN_GROUP<span class="token punctuation">,</span>
        artifactId <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>KOTLIN_PLUGIN_NAME<span class="token punctuation">,</span>
        version <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>KOTLIN_PLUGIN_VERSION<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    <span class="token comment">// 读取 Gradle 插件扩展信息并写入 SubpluginOption</span>
    <span class="token comment">// 本插件没有扩展信息，所以返回空集合</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">applyToCompilation</span><span class="token punctuation">(</span>kotlinCompilation<span class="token operator">:</span> KotlinCompilation<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Provider<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>SubpluginOption<span class="token operator">&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> project <span class="token operator">=</span> kotlinCompilation<span class="token punctuation">.</span>target<span class="token punctuation">.</span>project
        <span class="token keyword">return</span> project<span class="token punctuation">.</span><span class="token function">provider</span> <span class="token punctuation">{</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此 Gradle 插件编写完成，是不是很简单😄</p><h3 id="plugin-kotlin" tabindex="-1"><a class="header-anchor" href="#plugin-kotlin" aria-hidden="true">#</a> plugin-kotlin</h3><p>接下来编写 Kotlin 编译器插件，此插件对应 KCP 架构中的 <code>CommandLineProcessor</code> 、 <code>ComponentRegistrar</code> 和 <code>Extension</code></p><p>首先配置下 build.gradle.kts 脚本</p><h4 id="build-gradle-kts-module-level-1" tabindex="-1"><a class="header-anchor" href="#build-gradle-kts-module-level-1" aria-hidden="true">#</a> build.gradle.kts - module level</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>plugins <span class="token punctuation">{</span>
    <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;jvm&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;kapt&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.github.gmazzo.buildconfig&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    <span class="token comment">// 依赖 Kotlin 编译器库</span>
    <span class="token function">compileOnly</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;org.jetbrains.kotlin:kotlin-compiler-embeddable&quot;</span></span><span class="token punctuation">)</span>

    <span class="token comment">// 依赖 Google auto service</span>
    <span class="token function">kapt</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.google.auto.service:auto-service:1.0&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">compileOnly</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.google.auto.service:auto-service-annotations:1.0&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

buildConfig <span class="token punctuation">{</span>
    <span class="token comment">// 配置 BuildConfig 的包名</span>
    <span class="token function">packageName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.mask.kcp.kotlin&quot;</span></span><span class="token punctuation">)</span>
    
    <span class="token comment">// 设置 Kotlin 插件唯一 ID</span>
    <span class="token function">buildConfigField</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;String&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;KOTLIN_PLUGIN_ID&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;\\&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">rootProject<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;kotlin_plugin_id&quot;</span></span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\&quot;&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span>withType<span class="token operator">&lt;</span>KotlinCompile<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    kotlinOptions<span class="token punctuation">.</span>jvmTarget <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.8&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 KCP 架构，下面实现 <code>CommandLineProcessor</code></p><h4 id="maskcommandlineprocessor" tabindex="-1"><a class="header-anchor" href="#maskcommandlineprocessor" aria-hidden="true">#</a> MaskCommandLineProcessor</h4><p>创建 <code>MaskCommandLineProcessor</code> 实现 <code>CommandLineProcessor</code> 接口</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@AutoService</span><span class="token punctuation">(</span>CommandLineProcessor<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> MaskCommandLineProcessor <span class="token operator">:</span> CommandLineProcessor <span class="token punctuation">{</span>

    <span class="token comment">// 配置 Kotlin 插件唯一 ID</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> pluginId<span class="token operator">:</span> String <span class="token operator">=</span> BuildConfig<span class="token punctuation">.</span>KOTLIN_PLUGIN_ID

    <span class="token comment">// 读取 \`SubpluginOptions\` 参数，并写入 \`CliOption\`</span>
    <span class="token comment">// 本插件没有配置信息，返回空集合</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> pluginOptions<span class="token operator">:</span> Collection<span class="token operator">&lt;</span>AbstractCliOption<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 处理 \`CliOption\` 写入 \`CompilerConfiguration\`</span>
    <span class="token comment">// 本插件没有配置信息，此处没有实现</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">processOption</span><span class="token punctuation">(</span>
        option<span class="token operator">:</span> AbstractCliOption<span class="token punctuation">,</span>
        value<span class="token operator">:</span> String<span class="token punctuation">,</span>
        configuration<span class="token operator">:</span> CompilerConfiguration
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">processOption</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> value<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CommandLineProcessor</code> 编写完成</p><p>接下来实现 <code>ComponentRegistrar</code></p><h4 id="maskcomponentregistrar" tabindex="-1"><a class="header-anchor" href="#maskcomponentregistrar" aria-hidden="true">#</a> MaskComponentRegistrar</h4><p>创建 <code>MaskComponentRegistrar</code> 实现 <code>ComponentRegistrar</code> 接口</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@AutoService</span><span class="token punctuation">(</span>ComponentRegistrar<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> MaskComponentRegistrar <span class="token operator">:</span> ComponentRegistrar <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">registerProjectComponents</span><span class="token punctuation">(</span>
        project<span class="token operator">:</span> MockProject<span class="token punctuation">,</span>
        configuration<span class="token operator">:</span> CompilerConfiguration
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取日志收集器</span>
        <span class="token keyword">val</span> messageCollector <span class="token operator">=</span>
            configuration<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>CLIConfigurationKeys<span class="token punctuation">.</span>MESSAGE_COLLECTOR_KEY<span class="token punctuation">,</span> MessageCollector<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span>

        <span class="token comment">// 输出日志，查看是否执行</span>
        <span class="token comment">// CompilerMessageSeverity.INFO - 没有看到日志输出</span>
        <span class="token comment">// CompilerMessageSeverity.ERROR - 编译过程停止执行</span>
        messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
            CompilerMessageSeverity<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span>
            <span class="token string-literal singleline"><span class="token string">&quot;Welcome to guodongAndroid mask kcp kotlin plugin&quot;</span></span>
        <span class="token punctuation">)</span>

        <span class="token comment">// 此处在 \`ClassBuilderInterceptorExtension\` 中注册扩展</span>
        ClassBuilderInterceptorExtension<span class="token punctuation">.</span><span class="token function">registerExtension</span><span class="token punctuation">(</span>
            project<span class="token punctuation">,</span>
            <span class="token function">MaskClassGenerationInterceptor</span><span class="token punctuation">(</span>messageCollector<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后实现 <code>Extension</code></p><h4 id="maskclassgenerationinterceptor" tabindex="-1"><a class="header-anchor" href="#maskclassgenerationinterceptor" aria-hidden="true">#</a> MaskClassGenerationInterceptor</h4><p>创建 <code>MaskClassGenerationInterceptor</code> 实现 <code>ClassBuilderInterceptorExtension</code> 接口</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">MaskClassGenerationInterceptor</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> messageCollector<span class="token operator">:</span> MessageCollector<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">:</span> ClassBuilderInterceptorExtension <span class="token punctuation">{</span>

    <span class="token comment">// 拦截 ClassBuilderFactory</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">interceptClassBuilderFactory</span><span class="token punctuation">(</span>
        interceptedFactory<span class="token operator">:</span> ClassBuilderFactory<span class="token punctuation">,</span>
        bindingContext<span class="token operator">:</span> BindingContext<span class="token punctuation">,</span>
        diagnostics<span class="token operator">:</span> DiagnosticSink
        <span class="token comment">// 自定义 ClassBuilderFactory 委托给 源ClassBuilderFactory</span>
    <span class="token punctuation">)</span><span class="token operator">:</span> ClassBuilderFactory <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> ClassBuilderFactory <span class="token keyword">by</span> interceptedFactory <span class="token punctuation">{</span>
        
        <span class="token comment">// 复写 newClassBuilder，自定义 ClassBuilder</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">newClassBuilder</span><span class="token punctuation">(</span>origin<span class="token operator">:</span> JvmDeclarationOrigin<span class="token punctuation">)</span><span class="token operator">:</span> ClassBuilder <span class="token punctuation">{</span>
            <span class="token comment">// 传入源ClassBuilder</span>
            <span class="token keyword">return</span> <span class="token function">MaskClassBuilder</span><span class="token punctuation">(</span>messageCollector<span class="token punctuation">,</span> interceptedFactory<span class="token punctuation">.</span><span class="token function">newClassBuilder</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="maskclassbuilder" tabindex="-1"><a class="header-anchor" href="#maskclassbuilder" aria-hidden="true">#</a> MaskClassBuilder</h4><p>创建 <code>MaskClassBuilder</code> 继承 <code>DelegatingClassBuilder</code>，实现 <code>getDelegate</code> 方法，复写 <code>newField</code> 和 <code>newMethod</code> 方法</p><h6 id="getdelegate" tabindex="-1"><a class="header-anchor" href="#getdelegate" aria-hidden="true">#</a> getDelegate</h6><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">MaskClassBuilder</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> messageCollector<span class="token operator">:</span> MessageCollector<span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> delegate<span class="token operator">:</span> ClassBuilder
<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">DelegatingClassBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// @Hide注解的完全限定名(fully qualified name)</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> annotations<span class="token operator">:</span> List<span class="token operator">&lt;</span>FqName<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>
        <span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.mask.api.kt.Hide&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.mask.api.Hide&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

    <span class="token comment">// 返回代理</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ClassBuilder <span class="token operator">=</span> delegate
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="newfield" tabindex="-1"><a class="header-anchor" href="#newfield" aria-hidden="true">#</a> newField</h6><p>处理 <code>@Hide</code> 注解目标为字段</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">MaskClassBuilder</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> messageCollector<span class="token operator">:</span> MessageCollector<span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> delegate<span class="token operator">:</span> ClassBuilder
<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">DelegatingClassBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// @Hide注解的完全限定名(fully qualified name)</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> annotations<span class="token operator">:</span> List<span class="token operator">&lt;</span>FqName<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>
        <span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.mask.api.kt.Hide&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">FqName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.guodong.android.mask.api.Hide&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">newField</span><span class="token punctuation">(</span>
        origin<span class="token operator">:</span> JvmDeclarationOrigin<span class="token punctuation">,</span>
        access<span class="token operator">:</span> Int<span class="token punctuation">,</span>
        name<span class="token operator">:</span> String<span class="token punctuation">,</span>
        desc<span class="token operator">:</span> String<span class="token punctuation">,</span>
        signature<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> Any<span class="token operator">?</span>
    <span class="token punctuation">)</span><span class="token operator">:</span> FieldVisitor <span class="token punctuation">{</span>
        <span class="token comment">// 判断描述符是否是字段</span>
        <span class="token keyword">val</span> field <span class="token operator">=</span> origin<span class="token punctuation">.</span>descriptor <span class="token keyword">as</span><span class="token operator">?</span> FieldDescriptor
        	<span class="token operator">?:</span> <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">newField</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> value<span class="token punctuation">)</span>

        <span class="token comment">// 判断字段上是否有\`@Hide\`注解</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span><span class="token function">none</span> <span class="token punctuation">{</span> field<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">newField</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 输出字段源访问标志</span>
        messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
            CompilerMessageSeverity<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span>
            <span class="token string-literal singleline"><span class="token string">&quot;Mask Class = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">delegate<span class="token punctuation">.</span>thisName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, fieldName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, originalAccess = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">access</span></span><span class="token string">&quot;</span></span>
        <span class="token punctuation">)</span>

        <span class="token comment">// 增加\`ACC_SYNTHETIC\`标识</span>
        <span class="token keyword">val</span> maskAccess <span class="token operator">=</span> access <span class="token operator">+</span> Opcodes<span class="token punctuation">.</span>ACC_SYNTHETIC

        <span class="token comment">// 输出字段Mask后访问标志</span>
        messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
            CompilerMessageSeverity<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span>
            <span class="token string-literal singleline"><span class="token string">&quot;Mask Class = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">delegate<span class="token punctuation">.</span>thisName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, fieldName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, maskAccess = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">maskAccess</span></span><span class="token string">&quot;</span></span>
        <span class="token punctuation">)</span>

        <span class="token comment">// 传入Mask后访问标志</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">newField</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> maskAccess<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="newmethod" tabindex="-1"><a class="header-anchor" href="#newmethod" aria-hidden="true">#</a> newMethod</h6><p>处理 <code>@Hide</code> 注解目标为方法/函数，处理逻辑与字段类似</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">newMethod</span><span class="token punctuation">(</span>
    origin<span class="token operator">:</span> JvmDeclarationOrigin<span class="token punctuation">,</span>
    access<span class="token operator">:</span> Int<span class="token punctuation">,</span>
    name<span class="token operator">:</span> String<span class="token punctuation">,</span>
    desc<span class="token operator">:</span> String<span class="token punctuation">,</span>
    signature<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>
    exceptions<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> String<span class="token operator">&gt;</span><span class="token operator">?</span>
<span class="token punctuation">)</span><span class="token operator">:</span> MethodVisitor <span class="token punctuation">{</span>
    <span class="token comment">// 判断是否是方法/函数描述符</span>
    <span class="token keyword">val</span> function <span class="token operator">=</span> origin<span class="token punctuation">.</span>descriptor <span class="token keyword">as</span><span class="token operator">?</span> FunctionDescriptor
    	<span class="token operator">?:</span> <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">newMethod</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span>

    <span class="token comment">// 判断方法/函数上是否有\`@Hide\`注解</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span><span class="token function">none</span> <span class="token punctuation">{</span> function<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">newMethod</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 输出方法/函数源访问标志</span>
    messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
        CompilerMessageSeverity<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Mask Class = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">delegate<span class="token punctuation">.</span>thisName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, methodName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, originalAccess = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">access</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">)</span>

    <span class="token comment">// 增加\`ACC_SYNTHETIC\`标识</span>
    <span class="token keyword">val</span> maskAccess <span class="token operator">=</span> access <span class="token operator">+</span> Opcodes<span class="token punctuation">.</span>ACC_SYNTHETIC

    <span class="token comment">// 输出方法/函数Mask后访问标志</span>
    messageCollector<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>
        CompilerMessageSeverity<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Mask Class = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">delegate<span class="token punctuation">.</span>thisName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, methodName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, maskAccess = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">maskAccess</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">)</span>

    <span class="token comment">// 传入Mask后访问标志</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">newMethod</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> maskAccess<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此 Kotlin 编译器插件完成:happy:</p><h2 id="应用kcp" tabindex="-1"><a class="header-anchor" href="#应用kcp" aria-hidden="true">#</a> 应用KCP</h2><h3 id="build-gradle-project-level-1" tabindex="-1"><a class="header-anchor" href="#build-gradle-project-level-1" aria-hidden="true">#</a> build.gradle - project level</h3><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>buildscript <span class="token punctuation">{</span>
    ext<span class="token punctuation">.</span>plugin_version <span class="token operator">=</span> <span class="token string">&#39;x.x.x&#39;</span>
    dependencies <span class="token punctuation">{</span>
        classpath <span class="token interpolation-string"><span class="token string">&quot;com.guodong.android:mask-kcp-gradle-plugin:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">plugin_version</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lib-kotlin-build-gradle-module-level" tabindex="-1"><a class="header-anchor" href="#lib-kotlin-build-gradle-module-level" aria-hidden="true">#</a> lib-kotlin/build.gradle - module level</h3><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code># lib<span class="token operator">-</span>kotlin
plugins <span class="token punctuation">{</span>
    id <span class="token string">&#39;com.android.library&#39;</span>
    id <span class="token string">&#39;kotlin-android&#39;</span>
    id <span class="token string">&#39;kotlin-kapt&#39;</span>
    id <span class="token string">&#39;maven-publish&#39;</span>
    <span class="token comment">// id &#39;com.guodong.android.mask&#39; // use kcp</span>
    id <span class="token string">&#39;com.guodong.android.mask.kcp&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lib-kotlin" tabindex="-1"><a class="header-anchor" href="#lib-kotlin" aria-hidden="true">#</a> lib-kotlin</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> InterfaceTest <span class="token punctuation">{</span>

    <span class="token comment">// 使用api-kt中的注解</span>
    <span class="token annotation builtin">@Hide</span>
    <span class="token keyword">fun</span> <span class="token function">testInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">KotlinTest</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> InterfaceTest <span class="token punctuation">{</span>

    <span class="token comment">// 使用api-kt中的注解</span>
    <span class="token annotation builtin">@Hide</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>

        <span class="token annotation builtin">@JvmStatic</span>
        <span class="token keyword">fun</span> <span class="token function">newKotlinTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">KotlinTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">val</span> binding<span class="token operator">:</span> LayoutKotlinTestBinding<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token comment">// 使用api-kt中的注解</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> a
        <span class="token annotation builtin">@Hide</span> <span class="token keyword">get</span>
        <span class="token annotation builtin">@Hide</span> <span class="token keyword">set</span>

    <span class="token keyword">fun</span> <span class="token function">getA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">1000</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">testInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Interface function test&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="app" tabindex="-1"><a class="header-anchor" href="#app" aria-hidden="true">#</a> app</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># <span class="token class-name">MainActivity</span><span class="token punctuation">.</span>java

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testKotlinLib</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建对象时不能访问无参构造方法，可以访问有参构造方法或访问静态工厂方法</span>
    <span class="token class-name">KotlinTest</span> test <span class="token operator">=</span> <span class="token class-name">KotlinTest</span><span class="token punctuation">.</span><span class="token function">newKotlinTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用时不能访问\`test.getA()\`方法，仅能访问\`getA1()方法</span>
    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;testKotlinLib: before --&gt; &quot;</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">getA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;testKotlinLib: after --&gt; &quot;</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">getA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    test<span class="token punctuation">.</span><span class="token function">testInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">InterfaceTest</span> interfaceTest <span class="token operator">=</span> test<span class="token punctuation">;</span>
    <span class="token comment">// Error - cannot resolve method &#39;testInterface&#39; in &#39;InterfaceTest&#39;</span>
    interfaceTest<span class="token punctuation">.</span><span class="token function">testInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>happy:happy:</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>[Writing Your First Kotlin Compiler Plugin (jetbrains.com)](https://resources.jetbrains.com/storage/products/kotlinconf2018/slides/5_Writing Your First Kotlin Compiler Plugin.pdf) <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,74);function q(w,x){const a=l("ExternalLinkIcon");return o(),p("div",null,[d,k,n("p",null,[s("接"),n("a",v,[s("Kotlin-KCP的应用-第一篇"),e(a)]),s("，本文是第二篇，以下是本文的目标：")]),m,g,b,n("p",null,[h,s(" 即 "),n("a",f,[C,e(a)]),s("，KSP 目前只能生成代码，不能修改字节码，第一篇中的问题需要修改字节码，因此 KSP 不能满足需求")]),y])}const I=t(r,[["render",q],["__file","Kotlin-KCP的应用-第二篇.html.vue"]]);export{I as default};

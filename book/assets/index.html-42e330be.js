import{_ as a,Y as i,Z as n,$ as o,a0 as t,a1 as r,a3 as l,E as p}from"./framework-3d290349.js";const s="/book/assets/idea_download-3cff9d64.png",d="/book/assets/import_your_settings-2f10a50d.png",c="/book/assets/user_agreement-1796618a.png",_="/book/assets/idea_welcome-7647542b.png",h="/book/assets/new_project-e750667c.png",g="/book/assets/download_jdk-81b96a4b.png",m="/book/assets/new_project_config-9947d221.png",u="/book/assets/structure_of_project-a5acd6b3.png",f="/book/assets/download_as-34226e43.png",J="/book/assets/as_launcher-879a6f74.png",I="/book/assets/as_project_template-158350d1.png",A="/book/assets/as_project_details-562dcfe2.png",b="/book/assets/import_project_in_intellij-962759c9.png",D="/book/assets/select_project_foler_from_local_file_system-22e35845.png",y="/book/assets/trust_project-8658a29e.png",j={},S=l('<h1 id="第二章-配置编译环境" tabindex="-1"><a class="header-anchor" href="#第二章-配置编译环境" aria-hidden="true">#</a> 第二章: 配置编译环境</h1><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1.前言</h2><p>在开始学习协程和挂起函数之前，您需要一个工作的环境。在本书中，您将使用 IntelliJ IDEA 或者 Android Studio ，它们将作为本书所有项目和实战的工作站。</p><p>Android Studio 基于 IntelliJ IDEA，所以这两种工具的外观和功能都很相似。一旦您配置好其中一个工具的环境，另外一个工具的环境配置起来就很容易了。</p><h2 id="_2-如何选择编译环境" tabindex="-1"><a class="header-anchor" href="#_2-如何选择编译环境" aria-hidden="true">#</a> 2.如何选择编译环境</h2><p>当您有纯 Kotlin 或 Java 项目时，IntelliJ IDEA 对它们的支持是很棒的，但它也支持这些项目的各种插件，例如 Spring 框架。另一方面，Android Studio 是用于构建 Android 应用程序的主要工具，它对本书的最后一部分至关重要。</p><p>您还将使用 IntelliJ IDEA 的内部向导安装 Java 开发工具包 (JDK)，因此我们首先安装 IntelliJ。</p><h2 id="_3-安装-intellij-idea" tabindex="-1"><a class="header-anchor" href="#_3-安装-intellij-idea" aria-hidden="true">#</a> 3.安装 IntelliJ IDEA</h2><p>本书中的大多数项目都使用 IntelliJ 处理。它是由 Jetbrains 构建的强大工具，它使用智能补全、代码和项目模板等功能帮助提高生产力。</p><p>要安装它，可以前往 Jetbrains 的网站：https://www.jetbrains.com/idea/download/ 。</p><p><img src="'+s+'" alt="IntelliJ download" loading="lazy"></p><p>选择免费的社区版，因为它足以满足本身的项目需求。下载完成后运行安装程序。本章使用 Windows，如果您使用 MacOS 或者 Linux，请确保选择正确的版本。</p><p>安装程序的用户界面可能会有所不同，具体取决于您使用的操作系统。完成安装后，您可以运行该程序，它可能会提示您从以前的安装中导入配置。</p><p>如果您之前没有使用过 IntelliJ，您可以选择 <code>Do not import settings </code> 选项。如果您之前安装或使用过，您可以导入您之前的配置。</p><p>无论您选择哪个选项，您都可以通过 <strong>File ▸ Manage IDE Settings ▸ Import Settings</strong> 来手动导入设置，如下所示：</p><p><img src="'+d+'" alt="Import your settings if any.png" loading="lazy"></p><p>接下来，您可能会被要求通读并接受如下用户协议：</p><p><img src="'+c+'" alt="Read and accept JetBrains Privacy Policy" loading="lazy"></p><p>接受所有内容后，应该会打开工具主界面，主界面上有为您提供创建新项目或打开现有项目的选项。</p><h3 id="配置-java-开发工具包-jdk" tabindex="-1"><a class="header-anchor" href="#配置-java-开发工具包-jdk" aria-hidden="true">#</a> 配置 Java 开发工具包 (JDK)</h3><p>在您编写 Kotlin 时，依赖于 JVM 及其构建工具，除非您使用的是 Kotlin Multiplatform。 这意味着您必须配置 Java 开发工具包 (JDK)。</p><p>最简单的方法是使用 IntelliJ 启动一个新项目并使用新建项目向导。如果您已安装 IDE 并接受了所有许可证，您应该会看到以下启动屏幕。请注意，您的项目列表可能是空的！</p><p>现在单击 New Project 创建一个简单的 Kotlin JVM 项目，您应该会看到以下内容：</p><p><img src="'+_+'" alt="Create a new Project" loading="lazy"></p><p>您应该会看到一个询问您想要什么类型项目的窗口。确保在侧边栏菜单中选择 Java，并为项目选择 Kotlin/JVM 选项。</p><p><img src="'+h+'" alt="Select the Kotlin platform" loading="lazy"></p><p>请注意顶部的 Project SDK 选项卡。这包含您将用于代码的开发工具包，通常是 JDK。</p><p>如果您已经安装了 JDK，那么您应该很高兴。 如果没有，请单击下拉菜单并选择下载 JDK。 您应该看到以下一些选项：</p><p><img src="'+g+'" alt="Download JDK" loading="lazy"></p><p>根据您的项目和您要使用的语言功能，此版本会有所不同。对于本书，您可以选择 JDK 16 或 17。Oracle OpenJDK 是一个不错的选择，因此请下载该 JDK，您应该就可以开始使用了。</p><p>当您点击下一步时，您应该会看到一个项目概览窗口。 此窗口向您显示项目名称及其位置等详细信息。</p><p><img src="'+m+'" alt="Configure your project" loading="lazy"></p><p>最后，点击完成按钮，将启动您的 IntelliJ 项目。当项目打开后，您应该会看到 IntelliJ IDEA 项目的默认布局。</p><p><img src="'+u+'" alt="The structure of your project" loading="lazy"></p><p>在窗口左侧是项目结构视图。你可以在不同的视图类型之间切换，但是大多数时候你都将使用项目概览视图。在这里你可以浏览项目内所有的文件和项目中使用的库。</p><p>在窗口底部，需要注意一些事项，例如终端和事件日志。底部条为系统和构建消息、日志、终端和控制台保留。您可以在那里看到任何与输出相关的数据。在窗口顶部及项目名称的下方，还有另一个条带，这一个条带通常显示用于构建系统和调试的工具。</p><p>IntelliJ 有很多功能，您将在阅读本书时了解这些功能。您还可以通过查看官方文档了解 IDE 提供的所有内容。现在您已经配置好了 IntelliJ，剩下的就是 Android Studio 了！</p><h2 id="_4-安装-android-环境" tabindex="-1"><a class="header-anchor" href="#_4-安装-android-环境" aria-hidden="true">#</a> 4.安装 Android 环境</h2><p>在本书的后面部分，您将在一个 Android 项目上工作，以了解如何在 Android 等多线程环境中使用协程。为此，您首先需要 Android Studio。Android Studio 也是由 Jetbrains 构建的 IDE。</p><p>它同样包含非常多很棒的功能，比如自动补全和大量的模板。然而，主要的好处是由 Gradle 提供支持的端到端的 Android 构建系统。</p><p>要安装 Android Studio，请先访问它的下载页面：https://developer.android.com/studio/<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>。</p><p><img src="'+f+'" alt="Download Android Studio" loading="lazy"></p><p>选择下载最新稳定版本，下载完成后运行安装程序。在安装时，系统会提示您输入一些内容，例如您希望下载的 SDK 和模拟器配置。保持默认选项应该没问题，但是你也可以调整它们。</p><p>安装后，您应该会看到一个类似于此的窗口：</p><p><img src="'+J+'" alt="Android Studio Launcher" loading="lazy"></p><h3 id="创建一个新项目" tabindex="-1"><a class="header-anchor" href="#创建一个新项目" aria-hidden="true">#</a> 创建一个新项目</h3><p>现在您可以创建一个新项目了。首先单击 New Project，您将看到下面让您选择下面模板的菜单。</p><p><img src="'+I+'" alt="Android Studio Project Template" loading="lazy"></p><p>然后，在项目模板中选择 Empty Compose Activity。如果您使用 XML 和 View 工具包，您也可以选择 Empty Activity。点击下一步，在下一步中您将配置项目详细信息，如项目名称、包名和项目存储位置等。</p><p><img src="'+A+'" alt="Android Studio Project Details" loading="lazy"></p><p>就像 IntelliJ，在创建每个项目时，需要为它配置特别的信息。在这种情况下，以下信息需要配置：</p><ul><li>项目名称</li><li>项目包名</li><li>项目位置</li><li>项目语言</li><li>最低 SDK</li></ul><p>项目名称和项目位置是自解释的。包名是项目的唯一标识符，在您将应用程序推送到 Play 商店时，它将帮助您形成一个唯一的 URL 来查找应用程序。</p><p>项目语言标识项目主要使用 Kotlin 还是 Java。</p><p>最低 SDK 表示你的应用程序可以运行的最低 Android 版本。对于这个版本，选择 API 21 可以让你的应用程序覆盖大部分的用户。</p><p>最后，点击完成并等待项目构建完成。</p><p>这应该为您设置一个空的 Android 项目。稍后您将在本书的 Android 部分了解每个 Android 项目的设置。</p><p>如果构建完成且系统没有产生任何错误，意味着您成功配置了 Android Studio，并且您将在本书 Android 部分使用它。不用担心项目构建所需的时间；构建系统正在做大量工作，因此可能需要几分钟时间。</p><h2 id="_5-导入项目" tabindex="-1"><a class="header-anchor" href="#_5-导入项目" aria-hidden="true">#</a> 5.导入项目</h2><p>现在您需要了解的是如何导入项目。这意味着您将添加一个已经构建的项目到工作站。添加后，IDE 会构建它并连接任何应连接的模块以使项目正常工作。</p><p>例如，如果你导入一个 Gradle 项目，编译环境将连接这些脚本并加载所需的所有依赖。您将在接下来的章节中执行此操作，因此让我们通过示例项目来演示导入。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意：这只是导入项目的示例。您实际上还没有这个项目。您不必自己执行这些步骤，但请记住当您以后忘记如何导入项目时，可以再返回查看此步骤。</p></div><p>要在 IntelliJ 中导入项目，您必须打开 IntelliJ，然后单击 Open 按钮：</p><p><img src="'+b+'" alt="Import a Project in IntelliJ" loading="lazy"></p><p>单击 Open 按钮后，将出现一个询问您想打开哪个项目的弹窗。在弹窗中查找您想打开的项目 — 下图展示了本书下一章的项目：</p><p><img src="'+D+'" alt="Select the project folder from your local file system" loading="lazy"></p><p>选择项目后，按 OK 将其导入。通常，IDE 会了解它是哪种类型的项目，因此它应该知道这是一个 Gradle 项目并为您准备好一切。有时，您安装的 Kotlin 插件版本可能与项目使用的不同，因此您可能会收到更新插件的提示。</p><p>此外，您的系统可能会询问您是否信任该项目，或者您是否想以安全模式打开它。</p><p><img src="'+y+'" alt="Trust Project" loading="lazy"></p><p>由于我们非常信任改项目，您只需单击 Trust Project 就可以了。</p><p>对于本章，您没有创建项目。但是从下一章开始，您将为每一章创建项目，您准备好使用协程了么？</p><h2 id="_6-关键点" tabindex="-1"><a class="header-anchor" href="#_6-关键点" aria-hidden="true">#</a> 6.关键点</h2><ul><li>在本书中，Java 开发工具包 (JDK) 是必不可少的编译环境。</li><li>IntelliJ IDEA 是比较流行的 JVM 开发环境，它由 JetBrains 开发。</li><li>IntelliJ 由 IntelliJ 平台提供支持，支持自动补全、模板、预加载项目等功能。</li><li>对于 Android 项目，您将使用同样由 JetBrains 与 Google 合作开发的 Android Studio。</li><li>Android Studio 使用 Gradle 构建系统，完全集成到每个项目中。</li><li>导入项目连接了所有需要流畅运行以供您工作的部件。</li></ul><h2 id="_7-接下来做什么" tabindex="-1"><a class="header-anchor" href="#_7-接下来做什么" aria-hidden="true">#</a> 7.接下来做什么？</h2><p>现在，您已经配置好了编译环境，您可以在项目中编写一些 Kotlin 和协程代码了。本书中的某些章节可能会附带已经设置好的入门项目，因此您无需做任何额外的工作。其中一些可能需要您完成挑战。事不宜迟，是时候开始编写实战代码了！</p><hr class="footnotes-sep">',76),K={class:"footnotes"},k={class:"footnotes-list"},v={id:"footnote1",class:"footnote-item"},w={href:"https://developer.android.google.cn/studio",target:"_blank",rel:"noopener noreferrer"},x=o("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function E(z,P){const e=p("ExternalLinkIcon");return i(),n("div",null,[S,o("section",K,[o("ol",k,[o("li",v,[o("p",null,[t("国内开发者可以访问："),o("a",w,[t("Download Android Studio & App Tools - Android Developers (google.cn)"),r(e)]),t(),x])])])])])}const M=a(j,[["render",E],["__file","index.html.vue"]]);export{M as default};

import{_ as e}from"./7.annotation-type-8860ced4.js";import{_ as t,Y as o,Z as c,$ as a,a0 as n,a1 as p,a2 as l,a3 as i,E as d}from"./framework-3d290349.js";const u={},r=a("h2",{id:"前言",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),k=a("code",null,"Header",-1),m=a("code",null,"Field",-1),v=i('<p><img src="'+e+`" alt="annotation-type" loading="lazy"></p><p>从上图可以看出与 <code>Field</code> 相关的注解有：</p><ul><li><code>@Field</code></li><li><code>@FieldMap</code></li></ul><h2 id="field" tabindex="-1"><a class="header-anchor" href="#field" aria-hidden="true">#</a> <code>@Field</code></h2><p><code>@Field</code> 注解标记HTTP接口方法中的一个参数，表示这个参数是 <code>Form</code> 表单里的一个字段。参数的值、集合或数组中的子项会经过 <code>Retrofit#stringConverter(Type, Annotation[])</code> 转换，如果没有找到匹配的字符串转换器则使用 <code>Object#toString()</code>，然后再进过 URL 编码。</p><p><code>@Field</code> 注解有两个参数，分别为：</p><ol><li><code>value</code>：必选，表示字段名，</li><li><code>encoded</code>：可选，表示 <code>value</code> 对应的字段名和字段值是否已经经过 URL 编码，默认 <code>false</code>，</li></ol><p>简单使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@FormUrlEncoded</span>
	<span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> lang<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Service</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">&quot;zh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Field</code> 注解使用时有以下几点需要注意：</p><ol><li><p><code>@Field</code> 注解仅能在被 <code>@FormUrlEncoded</code> 注解标记的方法中使用，</p></li><li><p>参数值为 <code>null</code> 的话会被忽略，</p></li><li><p>参数值为集合或数组时，会忽略其为 <code>null</code> 的子项，如果集合类型且不是参数化类型，则抛出异常，即：不能直接使用原始类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 错误示例</span>
<span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@FormUrlEncoded</span>
	<span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span> lang<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="fieldmap" tabindex="-1"><a class="header-anchor" href="#fieldmap" aria-hidden="true">#</a> <code>@FieldMap</code></h2><p><code>@FieldMap</code> 注解标记HTTP接口方法中的一个参数，表示这个参数是 <code>Form</code> 表单里的一个或多个字段。</p><p><code>@FieldMap</code> 注解目前只有一个参数：</p><ol><li><code>encoded</code>：可选，表示字段名和字段值是否已经经过 URL 编码，默认 <code>false</code>，</li></ol><p>简单使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@FormUrlEncoded</span>
	<span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@FieldMap</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Service</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">ImmutableMap</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// request body: foo=bar&amp;kit=kat</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@FieldMap</code> 注解使用时有以下几点需要注意：</p><ol><li><code>@Field</code> 注解仅能在被 <code>@FormUrlEncoded</code> 注解标记的方法中使用，</li><li>被标注的参数类型必须是 <code>Map</code>，否则抛出异常，</li><li><code>Map</code> 中键的类型必须是 <code>String</code> 类型，否则抛出异常，如果键的值为 <code>null</code>，则抛出异常，</li><li><code>Map</code> 中值没有限定类型，如果值为 <code>null</code> ，则抛出异常，然后会经过 <code>Retrofit#stringConverter(Type, Annotation[])</code> 转换，如果没有找到匹配的字符串转换器，则使用 <code>Object#toString()</code>，如果转换后的值为 <code>null</code>，则抛出异常，</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>@Field</code> 和 <code>@FieldMap</code> 注解相对于 <code>Header</code> 相关的注解简单一些，在 <code>Header</code> 相关的注解中我们区分了静态和动态类型，那么本文学习的两个注解都应该属于动态类型，它俩的区别如下表所示：</p><table><thead><tr><th>注解</th><th>类型</th><th>适用场景</th></tr></thead><tbody><tr><td><code>@Field</code></td><td>动态</td><td>明确字段名，不明确字段值</td></tr><tr><td><code>@FieldMap</code></td><td>动态</td><td>字段名和字段值都不明确</td></tr></tbody></table><p>我们只要记住它俩仅能在 <code>@FormUrlEncoded</code> 注解标记的HTTP接口方法使用，一般就不会出错了。</p><p>希望可以帮你更好的使用 Retrofit，happy~</p>`,24);function h(b,g){const s=d("RouterLink");return o(),c("div",null,[r,a("p",null,[n("在上一篇文章 "),p(s,{to:"/SourceCodeAnalysis/Retrofit/9.annotation-part-3.html"},{default:l(()=>[n("请求参数注解(二)")]),_:1}),n(" 中我们学习了 "),k,n(" 注解，本篇文章我们学习了 "),m,n(" 相关的注解。")]),v])}const _=t(u,[["render",h],["__file","10.annotation-part-4.html.vue"]]);export{_ as default};

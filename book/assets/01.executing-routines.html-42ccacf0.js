import{_ as t,Y as n,Z as o,$ as e,a0 as s}from"./framework-3d290349.js";const _={},a=e("h1",{id:"执行例程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#执行例程","aria-hidden":"true"},"#"),s(" 执行例程")],-1),c=e("p",null,"每次你启动一个进程——例如启动一个应用程序——你的计算机都会创建一个叫做主程序的东西。这是每个程序的核心部分，因为它是您在代码中设置和运行所有其他组件的地方。在最基本的学习示例中，您通常有一个 main 函数，它会打印 Hello World。该 main 函数是程序的入口，也是主程序的一部分。",-1),i=e("p",null,"但是随着您的程序变得越来越大，函数的数量和对其他函数的调用次数也会增加。每当您在主函数中调用某个其他函数时，您就会启动一个称为子例程的东西。子例程也是一个例程，它嵌套在另一个例程中。计算机将所有这些例程放在调用堆栈上，它是一个跟踪当前正在运行的例程以及当前例程如何被调用的结构。当一个子例程完成运行时，它会从堆栈中弹出，并将控制权转移至调用者例程。最后，如果堆栈已经空了，并且没有任何例程去执行了，程序将结束退出。",-1),r=e("p",null,"调用子例程就像进行阻塞调用。然而协程是一个像进行非阻塞调用的子程序。因此，标准子程序和协程之间主要的不同点在于后者可以和其他代码并行执行。您可以开始协程，然后就不必再管理它们，这样可以继续进行程序的其余部分。",-1),l=[a,c,i,r];function d(h,u){return n(),o("div",null,l)}const m=t(_,[["render",d],["__file","01.executing-routines.html.vue"]]);export{m as default};

import{_ as p,Y as e,Z as o,$ as n,a0 as s,a1 as t,a3 as c,E as l}from"./framework-3d290349.js";const i={},u=c(`<h1 id="android-eventbus修改纪实-四-注解处理器" tabindex="-1"><a class="header-anchor" href="#android-eventbus修改纪实-四-注解处理器" aria-hidden="true">#</a> Android-EventBus修改纪实(四)-注解处理器</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>本文是 EventBus 修改纪实的第四篇，笔者在写第一篇文章时只是想记录下修改 EventBus 的过程，分享解决问题和查看源码的思路，没想到不知不觉会写这么多，“天下无不散之筵席”，本文将分析 EventBus 注解处理器的流程，也是 EventBus 修改纪实的最后一篇文章。</p><h2 id="纪实" tabindex="-1"><a class="header-anchor" href="#纪实" aria-hidden="true">#</a> 纪实</h2><p>EventBus 的注解处理器程序只有一个类 <code>EventBusAnnotationProcessor</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SupportedAnnotationTypes</span><span class="token punctuation">(</span><span class="token string">&quot;com.yarward.org.greenrobot.eventbus.Subscribe&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SupportedOptions</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;eventBusIndex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;verbose&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@IncrementalAnnotationProcessor</span><span class="token punctuation">(</span><span class="token constant">AGGREGATING</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventBusAnnotationProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProcessor</span> <span class="token punctuation">{</span>
    <span class="token comment">// ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>EventBusAnnotationProcessor</code> 上有三个注解，下面一一介绍：</p><ul><li><code>@SupportedAnnotationTypes</code> 注解标识该注解处理器只处理 <code>@Subscribe</code> 注解，</li><li><code>@SupportedOptions</code> 注解标识改注解处理器可以有两个参数，<code>eventBusIndex</code> 标识要生成 Index 类的全量限定名称，<code>verbose</code> 主要用于日志输出</li><li><code>@IncrementalAnnotationProcessor</code> 注解方便构建增量注解处理器</li></ul><h3 id="process" tabindex="-1"><a class="header-anchor" href="#process" aria-hidden="true">#</a> process</h3><p>接下来分析处理流程，处理流程主要在 <code>process</code> 方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">OPTION_EVENT_BUS_INDEX</span> <span class="token operator">=</span> <span class="token string">&quot;eventBusIndex&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">OPTION_VERBOSE</span> <span class="token operator">=</span> <span class="token string">&quot;verbose&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// annotations 是 \`@Subscribe\` 注解集合</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeElement</span><span class="token punctuation">&gt;</span></span> annotations<span class="token punctuation">,</span> <span class="token class-name">RoundEnvironment</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取日志输出器</span>
    <span class="token class-name">Messager</span> messager <span class="token operator">=</span> processingEnv<span class="token punctuation">.</span><span class="token function">getMessager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取 \`eventBusIndex\` 参数</span>
        <span class="token class-name">String</span> index <span class="token operator">=</span> processingEnv<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">OPTION_EVENT_BUS_INDEX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;No option &quot;</span> <span class="token operator">+</span> <span class="token constant">OPTION_EVENT_BUS_INDEX</span> <span class="token operator">+</span>
                                  <span class="token string">&quot; passed to annotation processor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 获取 \`verbose\` 参数</span>
        verbose <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>processingEnv<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">OPTION_VERBOSE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> lastPeriod <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 eventBusIndex 的包名</span>
        <span class="token class-name">String</span> indexPackage <span class="token operator">=</span> lastPeriod <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> index<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lastPeriod<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        round<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>verbose<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">NOTE</span><span class="token punctuation">,</span> <span class="token string">&quot;Processing round &quot;</span> <span class="token operator">+</span> round <span class="token operator">+</span> <span class="token string">&quot;, new annotations: &quot;</span> <span class="token operator">+</span>
                                  <span class="token operator">!</span>annotations<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, processingOver: &quot;</span> <span class="token operator">+</span> env<span class="token punctuation">.</span><span class="token function">processingOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">processingOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>annotations<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span>
                                      <span class="token string">&quot;Unexpected processing state: annotations still available after processing over&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>writerRoundDone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span>
                                  <span class="token string">&quot;Unexpected processing state: annotations still available after writing.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 收集订阅者和订阅方法</span>
        <span class="token function">collectSubscribers</span><span class="token punctuation">(</span>annotations<span class="token punctuation">,</span> env<span class="token punctuation">,</span> messager<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 检查是否可以为订阅者生成 Index</span>
        <span class="token function">checkForSubscribersToSkip</span><span class="token punctuation">(</span>messager<span class="token punctuation">,</span> indexPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>methodsByClass<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 生成 Index 文件</span>
            <span class="token function">createInfoIndexFile</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">WARNING</span><span class="token punctuation">,</span> <span class="token string">&quot;No @Subscribe annotations found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        writerRoundDone <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// IntelliJ does not handle exceptions nicely, so log and print a message</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;Unexpected error in EventBusAnnotationProcessor: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collectsubscribers" tabindex="-1"><a class="header-anchor" href="#collectsubscribers" aria-hidden="true">#</a> collectSubscribers</h3><p>我们首先分析是如何收集订阅者和订阅方法的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 自定义集合，实际上是 Map&lt;TypeElement, List&lt;ExecutableElement&gt;&gt;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ListMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TypeElement</span><span class="token punctuation">,</span> <span class="token class-name">ExecutableElement</span><span class="token punctuation">&gt;</span></span> methodsByClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// annotations 是 \`@Subscribe \` 注解集合</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">collectSubscribers</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeElement</span><span class="token punctuation">&gt;</span></span> annotations<span class="token punctuation">,</span> <span class="token class-name">RoundEnvironment</span> env<span class="token punctuation">,</span> <span class="token class-name">Messager</span> messager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历 \`@Subscribe\` 注解集合</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TypeElement</span> annotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取有 \`@Subscribe\` 注解的元素集合</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> elements <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getElementsAnnotatedWith</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> element <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断是不是可执行的元素，一般表示是 Java 方法</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token keyword">instanceof</span> <span class="token class-name">ExecutableElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ExecutableElement</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ExecutableElement</span><span class="token punctuation">)</span> element<span class="token punctuation">;</span>
                <span class="token comment">// 检查是否是订阅方法</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkHasNoErrors</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> messager<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TypeElement</span> classElement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TypeElement</span><span class="token punctuation">)</span> method<span class="token punctuation">.</span><span class="token function">getEnclosingElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 添加进 Map 集合</span>
                    methodsByClass<span class="token punctuation">.</span><span class="token function">putElement</span><span class="token punctuation">(</span>classElement<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;@Subscribe is only valid for methods&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先遍历 <code>@Subscribe</code> 注解集合，通过 <code>getElementsAnnotatedWith</code> 获取有 <code>@Subscribe</code> 注解的元素集合，然后遍历元素集合，在遍历元素集合时判断元素是否是 <code>ExecutableElement</code>，即当前元素是不是方法，如何是方法再通过 <code>checkHasNoErrors</code> 检查此方法是否符合订阅方法的规范：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkHasNoErrors</span><span class="token punctuation">(</span><span class="token class-name">ExecutableElement</span> element<span class="token punctuation">,</span> <span class="token class-name">Messager</span> messager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断是否是静态方法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">STATIC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;Subscriber method must not be static&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 判断是否是公开方法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;Subscriber method must be public&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 判断是否只有一个入参</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">VariableElement</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ExecutableElement</span><span class="token punctuation">)</span> element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parameters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;Subscriber method must have exactly 1 parameter&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查方法比较简单，需要满足以下条件：</p><ul><li>必须不能是静态方法</li><li>必须是公开方法</li><li>方法有且仅有一个入参</li></ul><p><strong>注意这里没有判断是否是桥接方法和合成方法，因为注解处理器处于编译期，桥接方法和合成方法应该经过 javac 编译后才会有。</strong></p><p>最后把符合订阅方法规范的方法收集起来，存储在 <code>methodsByClass</code> 中，<code>methodsByClass</code> 是 greenrobot 自定义的，其实际类型是 <code>Map&lt;TypeElement, List&lt;ExecutableElement&gt;&gt;</code>，以订阅者为 Key，订阅者中的订阅方法集合为 Value。</p><h3 id="checkforsubscriberstoskip" tabindex="-1"><a class="header-anchor" href="#checkforsubscriberstoskip" aria-hidden="true">#</a> checkForSubscribersToSkip</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkForSubscribersToSkip</span><span class="token punctuation">(</span><span class="token class-name">Messager</span> messager<span class="token punctuation">,</span> <span class="token class-name">String</span> myPackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历 订阅者</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TypeElement</span> skipCandidate <span class="token operator">:</span> methodsByClass<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TypeElement</span> subscriberClass <span class="token operator">=</span> skipCandidate<span class="token punctuation">;</span>
        <span class="token comment">// 循环判断订阅者及其父类</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>subscriberClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断订阅者是否可见</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVisible</span><span class="token punctuation">(</span>myPackage<span class="token punctuation">,</span> subscriberClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 若不可见，则添加进跳过订阅者集合，退出 while 循环</span>
                <span class="token keyword">boolean</span> added <span class="token operator">=</span> classesToSkip<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>skipCandidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>added<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriberClass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>skipCandidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        msg <span class="token operator">=</span> <span class="token string">&quot;Falling back to reflection because class is not public&quot;</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        msg <span class="token operator">=</span> <span class="token string">&quot;Falling back to reflection because &quot;</span> <span class="token operator">+</span> skipCandidate <span class="token operator">+</span>
                            <span class="token string">&quot; has a non-public super class&quot;</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">NOTE</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> subscriberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token comment">// 获取订阅者中的订阅方法集合</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutableElement</span><span class="token punctuation">&gt;</span></span> methods <span class="token operator">=</span> methodsByClass<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>methods <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 循环判断是否根据订阅方法跳过订阅者</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ExecutableElement</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> skipReason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token class-name">VariableElement</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">TypeMirror</span> typeMirror <span class="token operator">=</span> <span class="token function">getParamTypeMirror</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> messager<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 判断订阅方法的入参是否是声明类型，即不是基本类型；或者是声明类型但不是类或接口</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>typeMirror <span class="token keyword">instanceof</span> <span class="token class-name">DeclaredType</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                        <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DeclaredType</span><span class="token punctuation">)</span> typeMirror<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">TypeElement</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        skipReason <span class="token operator">=</span> <span class="token string">&quot;event type cannot be processed&quot;</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>skipReason <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">TypeElement</span> eventTypeElement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TypeElement</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DeclaredType</span><span class="token punctuation">)</span> typeMirror<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 判断 Event 是否可见</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVisible</span><span class="token punctuation">(</span>myPackage<span class="token punctuation">,</span> eventTypeElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            skipReason <span class="token operator">=</span> <span class="token string">&quot;event type is not public&quot;</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>skipReason <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 添加进跳过订阅者集合，退出 for 循环</span>
                        <span class="token keyword">boolean</span> added <span class="token operator">=</span> classesToSkip<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>skipCandidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>added<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;Falling back to reflection because &quot;</span> <span class="token operator">+</span> skipReason<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscriberClass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>skipCandidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                msg <span class="token operator">+=</span> <span class="token string">&quot; (found in super class for &quot;</span> <span class="token operator">+</span> skipCandidate <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">NOTE</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            
            <span class="token comment">// 移动至父类</span>
            subscriberClass <span class="token operator">=</span> <span class="token function">getSuperclass</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先调用 <code>isVisible</code> 方法判断订阅者是否可见：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isVisible</span><span class="token punctuation">(</span><span class="token class-name">String</span> myPackage<span class="token punctuation">,</span> <span class="token class-name">TypeElement</span> typeElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取描述符集合</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Modifier</span><span class="token punctuation">&gt;</span></span> modifiers <span class="token operator">=</span> typeElement<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> visible<span class="token punctuation">;</span>
    
    <span class="token comment">// 判断是否是 PUBLIC</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是否是 PRIVATE 或者 PROTECTED</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PRIVATE</span><span class="token punctuation">)</span> <span class="token operator">||</span> modifiers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token constant">PROTECTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 其他情况</span>
        <span class="token comment">// 获取元素的包名</span>
        <span class="token class-name">String</span> subscriberPackage <span class="token operator">=</span> <span class="token function">getPackageElement</span><span class="token punctuation">(</span>typeElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 若 Index 类包名为空，则根据元素包名的长度判断，否则比较 Index 类和元素是否在同一个包下</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myPackage <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            visible <span class="token operator">=</span> subscriberPackage<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            visible <span class="token operator">=</span> myPackage<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>subscriberPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> visible<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果订阅者符合以下条件即认为可见：</p><ul><li>订阅者含有 public 修饰符</li><li>Index 类包名为空时，订阅者包名长度为 0，</li><li>Index 类包名不为空，订阅者和 Index 类同属一个包下</li></ul><p>如果订阅者不符合可见性条件，则添加进 <code>classesToSkip</code> 集合，后续生成 Index 类时会忽略此这些订阅者。</p><p>如果订阅者符合可见性条件，接下来判断订阅方法是否符合规范：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ExecutableElement</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> skipReason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">VariableElement</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TypeMirror</span> typeMirror <span class="token operator">=</span> <span class="token function">getParamTypeMirror</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> messager<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断订阅方法的入参是否是声明类型，即不是基本类型；或者是声明类型但不是类或接口</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>typeMirror <span class="token keyword">instanceof</span> <span class="token class-name">DeclaredType</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DeclaredType</span><span class="token punctuation">)</span> typeMirror<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">TypeElement</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        skipReason <span class="token operator">=</span> <span class="token string">&quot;event type cannot be processed&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>skipReason <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TypeElement</span> eventTypeElement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TypeElement</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DeclaredType</span><span class="token punctuation">)</span> typeMirror<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断 Event 是否可见</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVisible</span><span class="token punctuation">(</span>myPackage<span class="token punctuation">,</span> eventTypeElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            skipReason <span class="token operator">=</span> <span class="token string">&quot;event type is not public&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>skipReason <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 添加进跳过订阅者集合，退出 for 循环</span>
        <span class="token keyword">boolean</span> added <span class="token operator">=</span> classesToSkip<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>skipCandidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>added<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;Falling back to reflection because &quot;</span> <span class="token operator">+</span> skipReason<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subscriberClass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>skipCandidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                msg <span class="token operator">+=</span> <span class="token string">&quot; (found in super class for &quot;</span> <span class="token operator">+</span> skipCandidate <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            messager<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">NOTE</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历订阅方法，判断订阅方法的入参如果不是声明类型，即不是基本类型；或者入参是声明类型但不是类或接口，则将订阅者添加进跳过订阅者集合并退出 for 循环，否则再判断入参是否可见，若是不可见，则将订阅者添加进跳过订阅者集合并退出 for 循环。</p><p>最后获取当前订阅者的父类，循环判断父类是否也符合以上规范，若是父类不符合以上规范，则将当前订阅者添加进跳过订阅者集合并退出 for 循环。</p><h3 id="createinfoindexfile" tabindex="-1"><a class="header-anchor" href="#createinfoindexfile" aria-hidden="true">#</a> createInfoIndexFile</h3><p>收集和过滤完订阅者后，接下来就可以生成 Index 类了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createInfoIndexFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">JavaFileObject</span> sourceFile <span class="token operator">=</span> processingEnv<span class="token punctuation">.</span><span class="token function">getFiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createSourceFile</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> period <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> myPackage <span class="token operator">=</span> period <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> index<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> period<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> clazz <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>period <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">.</span><span class="token function">openWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 包名不为空，写入包名</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myPackage <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;package &quot;</span> <span class="token operator">+</span> myPackage <span class="token operator">+</span> <span class="token string">&quot;;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 导包</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;import com.yarward.org.greenrobot.eventbus.meta.SimpleSubscriberInfo;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;import com.yarward.org.greenrobot.eventbus.meta.SubscriberMethodInfo;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;import com.yarward.org.greenrobot.eventbus.meta.SubscriberInfo;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;import com.yarward.org.greenrobot.eventbus.meta.SubscriberInfoIndex;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;import com.yarward.org.greenrobot.eventbus.ThreadMode;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;import java.util.HashMap;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;import java.util.Map;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;/** This class is generated by EventBus, do not edit. */\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 类声明，实现 \`SubscriberInfoIndex\` 接口</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;public class &quot;</span> <span class="token operator">+</span> clazz <span class="token operator">+</span> <span class="token string">&quot; implements SubscriberInfoIndex {\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 静态字段声明</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    private static final Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 静态代码块</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    static {\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;        SUBSCRIBER_INDEX = new HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 写入 Index</span>
        <span class="token function">writeIndexLines</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> myPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    }\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 静态方法</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    private static void putIndex(SubscriberInfo info) {\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;        SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    }\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 实现 \`SubscriberInfoIndex\` 接口方法</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    @Override\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    public SubscriberInfo getSubscriberInfo(Class&lt;?&gt; subscriberClass) {\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;        SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;        if (info != null) {\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;            return info;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;        } else {\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;            return null;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;        }\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;    }\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;}\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Could not write source for &quot;</span> <span class="token operator">+</span> index<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//Silent</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createInfoIndexFile</code> 方法比较简单，主要是模板代码，生成 Index 的逻辑主要在 <code>writeIndexLines</code> 中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeIndexLines</span><span class="token punctuation">(</span><span class="token class-name">BufferedWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">String</span> myPackage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历订阅者</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TypeElement</span> subscriberTypeElement <span class="token operator">:</span> methodsByClass<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否忽略当前订阅者</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>classesToSkip<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>subscriberTypeElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 获取订阅者类名，是内部类时包含外部类的类名</span>
        <span class="token class-name">String</span> subscriberClass <span class="token operator">=</span> <span class="token function">getClassString</span><span class="token punctuation">(</span>subscriberTypeElement<span class="token punctuation">,</span> myPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 再次判断订阅者是否可见</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVisible</span><span class="token punctuation">(</span>myPackage<span class="token punctuation">,</span> subscriberTypeElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">writeLine</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>
                      <span class="token string">&quot;putIndex(new SimpleSubscriberInfo(&quot;</span> <span class="token operator">+</span> subscriberClass <span class="token operator">+</span> <span class="token string">&quot;.class,&quot;</span><span class="token punctuation">,</span>
                      <span class="token string">&quot;true,&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;new SubscriberMethodInfo[] {&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取当前订阅者中订阅方法集合</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutableElement</span><span class="token punctuation">&gt;</span></span> methods <span class="token operator">=</span> methodsByClass<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriberTypeElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 生成订阅方法信息</span>
            <span class="token function">writeCreateSubscriberMethods</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> methods<span class="token punctuation">,</span> <span class="token string">&quot;new SubscriberMethodInfo&quot;</span><span class="token punctuation">,</span> myPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;        }));\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;        // Subscriber not visible to index: &quot;</span> <span class="token operator">+</span> subscriberClass <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>writeIndexLines</code> 方法也比较简单，遍历之前收集的订阅者集合，首先判断是否忽略当前订阅者，随后获取订阅者类名，如果是内部类则包含外部类的类名，然后再次判断当前订阅者是否可见，如果可见则生成 <code>SimpleSubscriberInfo</code> 对象添加进 Index。</p><p><code>SimpleSubscriberInfo</code> 是 Index 元素，其构造方法有三个入参，第一个入参是：订阅者 Class 对象，第二个入参是：是否检查父类，默认为 true，第三个参数是：订阅方法信息数组。</p><p>接下来调用 <code>writeCreateSubscriberMethods</code> 方法生成订阅方法信息 <code>SubscriberMethodInfo</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeCreateSubscriberMethods</span><span class="token punctuation">(</span><span class="token class-name">BufferedWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutableElement</span><span class="token punctuation">&gt;</span></span> methods<span class="token punctuation">,</span>
                                          <span class="token class-name">String</span> callPrefix<span class="token punctuation">,</span> <span class="token class-name">String</span> myPackage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历订阅方法集合</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ExecutableElement</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">VariableElement</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TypeMirror</span> paramType <span class="token operator">=</span> <span class="token function">getParamTypeMirror</span><span class="token punctuation">(</span>parameters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TypeElement</span> paramElement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TypeElement</span><span class="token punctuation">)</span> processingEnv<span class="token punctuation">.</span><span class="token function">getTypeUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asElement</span><span class="token punctuation">(</span>paramType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取订阅方法名称</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 Event 事件 Class 对象</span>
        <span class="token class-name">String</span> eventClass <span class="token operator">=</span> <span class="token function">getClassString</span><span class="token punctuation">(</span>paramElement<span class="token punctuation">,</span> myPackage<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.class&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取 \`Subscribe\` 注解</span>
        <span class="token class-name">Subscribe</span> subscribe <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Subscribe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>callPrefix <span class="token operator">+</span> <span class="token string">&quot;(\\&quot;&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">&quot;\\&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> lineEnd <span class="token operator">=</span> <span class="token string">&quot;),&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 \`Subscribe\` 注解的参数，并根据参数生成 \`SubscriberMethodInfo\` 的入参</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribe<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>subscribe<span class="token punctuation">.</span><span class="token function">sticky</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribe<span class="token punctuation">.</span><span class="token function">threadMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ThreadMode</span><span class="token punctuation">.</span><span class="token constant">POSTING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>eventClass <span class="token operator">+</span> lineEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>eventClass <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ThreadMode.&quot;</span> <span class="token operator">+</span> subscribe<span class="token punctuation">.</span><span class="token function">threadMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lineEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>eventClass <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ThreadMode.&quot;</span> <span class="token operator">+</span> subscribe<span class="token punctuation">.</span><span class="token function">threadMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscribe<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 此处是笔者对必达事件的处理</span>
            <span class="token comment">// begin - 添加必达事件</span>
            parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscribe<span class="token punctuation">.</span><span class="token function">sticky</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscribe<span class="token punctuation">.</span><span class="token function">rendezvous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lineEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// end - 添加必达事件</span>
        <span class="token punctuation">}</span>
        <span class="token function">writeLine</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> parts<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>verbose<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            processingEnv<span class="token punctuation">.</span><span class="token function">getMessager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">NOTE</span><span class="token punctuation">,</span> <span class="token string">&quot;Indexed @Subscribe at &quot;</span> <span class="token operator">+</span>
                                                     method<span class="token punctuation">.</span><span class="token function">getEnclosingElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span>
                                                     <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> paramElement<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历当前订阅者中所有的订阅方法，首先订阅方法的名称，入参 Event 事件的 Class 对象，然后获取 <code>@Subscribe</code> 注解的参数，并根据注解的参数生成 <code>SubscriberMethodInfo</code> 的入参，<strong>这里有笔者对必达事件的处理(注意：这里处理有Bug，不知读者有没有看出来呢？)</strong>，最后调用 <code>writeLine</code> 完整的生成 <code>SubscriberMethodInfo</code> 方法。</p><p>至此，EventBus 注解处理器的流程分析完毕，下面是生成的 Index 类示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventBusTestsIndex</span> <span class="token keyword">implements</span> <span class="token class-name">SubscriberInfoIndex</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">SubscriberInfo</span><span class="token punctuation">&gt;</span></span> <span class="token constant">SUBSCRIBER_INDEX</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token constant">SUBSCRIBER_INDEX</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">SubscriberInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">putIndex</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleSubscriberInfo</span><span class="token punctuation">(</span><span class="token class-name">EventBusMainThreadTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SubscriberMethodInfo</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">SubscriberMethodInfo</span><span class="token punctuation">(</span><span class="token string">&quot;onEventMainThread&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ThreadMode</span><span class="token punctuation">.</span><span class="token constant">MAIN</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">putIndex</span><span class="token punctuation">(</span><span class="token class-name">SubscriberInfo</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">SUBSCRIBER_INDEX</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getSubscriberClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">SubscriberInfo</span> <span class="token function">getSubscriberInfo</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> subscriberClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SubscriberInfo</span> info <span class="token operator">=</span> <span class="token constant">SUBSCRIBER_INDEX</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>info <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> info<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,44),k={href:"https://juejin.cn/post/7104107150678917133",target:"_blank",rel:"noopener noreferrer"},r=n("strong",null,"必达事件",-1),d={href:"https://juejin.cn/post/7104536485428199437",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7104912340851621901",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[s("在第四篇文章中笔者详细分析了 EventBus 注解处理器生成 Index 类的流程，第一篇文章中添加 "),n("strong",null,"必达事件"),s(" 时没有修改注解处理器，在本文中也进行了简单的描述。")],-1),b=n("p",null,"本文分析订阅者是否符合规范时，有一处根据订阅方法检查过滤订阅者，如果订阅者中有一个方法不符合规范，整个订阅者都要跳过，这里你认为是否合理呢？",-1),g=n("p",null,"大家求同存异，欢迎交流。",-1),f=n("p",null,"happy~，希望可以帮你更好的使用 EventBus",-1);function y(w,E){const a=l("ExternalLinkIcon");return e(),o("div",null,[u,n("ul",null,[n("li",null,[s("在第一篇 "),n("a",k,[s("Android-EventBus修改纪实"),t(a)]),s(" 文章中笔者记录了为 EventBus 增加 "),r,s(" 的过程，")]),n("li",null,[s("在第二篇 "),n("a",d,[s("Android-EventBus修改纪实(二)"),t(a)]),s(" 文章中笔者对第一篇文章中未实现的部分进行了补充，并简单介绍了 EventBus 提供的线程模型及使用注意事项，")]),n("li",null,[s("在第三篇 "),n("a",v,[s("Android-EventBus修改纪实(三)"),t(a)]),s(" 文章中笔者详细分析了 EventBus 的线程调度过程及使用注意事项，")]),m]),b,g,f])}const h=p(i,[["render",y],["__file","Android-EventBus修改纪实(四)-注解处理器.html.vue"]]);export{h as default};

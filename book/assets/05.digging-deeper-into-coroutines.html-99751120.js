import{_ as t,Y as e,Z as o,$ as n,a0 as s,a1 as p,a2 as c,a3 as i,E as l}from"./framework-3d290349.js";const u={},d=i(`<h2 id="分析协程" tabindex="-1"><a class="header-anchor" href="#分析协程" aria-hidden="true">#</a> 分析协程</h2><p>目前为止，您已经了解到：每次启动协程时，您都将获得 Job 引用。您也可以在两个不同的 Job 之间建立依赖关系 — 如何实现呢？您只需要将前面<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>的代码替换成下面这样即可：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> job1 <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Pong&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Ping&quot;</span></span><span class="token punctuation">)</span>
        job1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Ping&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并导入 <code>CoroutineStart</code> 。浏览上面的代码：</p><ul><li>您启动的第一个协程包含一些延迟代码并且输出 <code>Pong</code> 字符，将创建的 Job 对象赋值给 job1 引用。</li><li>您启动的第二个协程同样包含一些 <code>println</code> 输出，同时也将调用 job1 的 <code>join</code> 函数。</li></ul><p>上面代码的预期输出是什么呢？如果您的预期是先输出 <code>Pong</code> 再输出两次 <code>Ping</code> ，但是，实际上并非如此。如您所见，在第一个协程中您传入了 <code>CoroutineStart.LAZY</code> ，这意味着其相关的代码将在您实际需要它时被执行。</p><p>它会在第二个协程调用 job1 的 <code>join</code> 函数时执行。这就是为什么上面代码实际上先输出 <code>Ping</code>，然后输出 <code>Pong</code>，最后再输出 <code>Ping</code>。</p><h2 id="构建-job-层级" tabindex="-1"><a class="header-anchor" href="#构建-job-层级" aria-hidden="true">#</a> 构建 Job 层级</h2><p>在前面的代码中，您在不同的 Job 实例之间建立了依赖关系，但是这并不是您认为的那种父子关系。 请再一次用下面的代码替换前面的代码。您可以使用 with 来避免重复使用 GlobalScope 接收器：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">with</span><span class="token punctuation">(</span>GlobalScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> parentJob <span class="token operator">=</span> launch <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I’m the parent&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">launch</span><span class="token punctuation">(</span>context <span class="token operator">=</span> parentJob<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I’m a child&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parentJob<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The Job has children!&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The Job has NO children&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依次浏览上面的代码：</p><ul><li>首先，您启动了一个协程，并把创建的 Job 对象赋值给了 parentJob 引用。</li><li>然后，您使用前面的 Job 作为协程的 <code>CoroutineContext</code> 启动了另一个协程。因为 Job 抽象实现了 <code>CoroutineContext</code>。此时，您传递的 <code>CoroutineContext</code> 与当前活跃的 <code>CoroutineScope EmptyCoroutineContext</code> 中的一个合并。</li></ul><p>如果您运行上面的代码，您可以看到 parentJob 是有子节点的。如果您删除第二个协程构建器的上下文，再运行相同的代码，您可以看到父子关系没有建立并且子节点不存在。</p><h2 id="使用协程标准函数" tabindex="-1"><a class="header-anchor" href="#使用协程标准函数" aria-hidden="true">#</a> 使用协程标准函数</h2><p>您可以使用协程做的另一件事是构建重试逻辑机制。标准库中的 <code>repeat</code> 函数，与您在前面学到的 <code>delay</code> 函数配合使用，您可以创建尝试在延迟时间段内运行工作的代码。接下来，再次将 Main.kt 代码替换为以下代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> isDoorOpen <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unlocking the door... please wait.\\n&quot;</span></span><span class="token punctuation">)</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
        isDoorOpen <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Trying to open the door...\\n&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isDoorOpen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Opened the door!\\n&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The door is still locked\\n&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尝试运行上面代码。您可以看到在最终打开门之前，可以尝试多次去打开门。因此，使用 Kotlin 标准库中的 <code>delay</code> 和 <code>repeat</code> 函数，您设法构建了一种机制，该机制在满足时间或逻辑条件之前尝试多次运行某些代码。您可以使用相同的机制来构建网络回退和重试逻辑。当您在本书后续章节学习了如何从协程中返回值，您会看到它的强大之处。</p><hr class="footnotes-sep">`,18),r={class:"footnotes"},k={class:"footnotes-list"},v={id:"footnote1",class:"footnote-item"},b=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function m(f,g){const a=l("RouterLink");return e(),o("div",null,[d,n("section",r,[n("ol",k,[n("li",v,[n("p",null,[s("这里指"),p(a,{to:"/KotlinCoroutinesByTutorials/Chapter3/02.launching-coroutine.html"},{default:c(()=>[s("《启动协程》中的代码")]),_:1}),s(),b])])])])])}const _=t(u,[["render",m],["__file","05.digging-deeper-into-coroutines.html.vue"]]);export{_ as default};

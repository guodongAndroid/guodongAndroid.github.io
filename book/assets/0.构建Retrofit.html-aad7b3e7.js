import{_ as t,Y as e,Z as p,$ as n,a0 as a,a1 as c,a3 as o,E as l}from"./framework-3d290349.js";const i={},u=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1),r=n("p",null,"如今 Retrofit 早已被扒的皮都不剩了，那为什么还要写此系列文章呢？",-1),d=n("blockquote",null,[n("p",null,"纸上得来终觉浅，绝知此事要躬行。")],-1),k=n("p",null,"不管之前看过多少解析文章，终觉得理解的不够透彻，所以只有自己亲身阅读过源码，才能深有体会吧。",-1),v=n("hr",null,null,-1),m={href:"https://github.com/square/retrofit/commit/5180f481c58b0be80ad81a0c1ec540fe7e91ee81",target:"_blank",rel:"noopener noreferrer"},b=o(`<h2 id="如何构建retrofit" tabindex="-1"><a class="header-anchor" href="#如何构建retrofit" aria-hidden="true">#</a> 如何构建Retrofit？</h2><p>构建 Retrofit 有以下两种方式：</p><ol><li>创建 Retrofit 的内部类 Builder 的实例，调用 Builder 的 <code>build</code> 方法构建，</li><li>利用已有的 Retrofit 实例，调用 <code>newBuiler</code> 方法创建 Builder 实例，调用 Builder 的 <code>build</code> 方法构建。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Retrofit</span> retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一种方式</span>
retrofit <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二种方式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出上述两种方式最终都是调用 Builder 的 <code>build</code> 方法来构建 Retrofit。</p><p>构建入口的唯一性，利用后续的维护。</p><h2 id="builder" tabindex="-1"><a class="header-anchor" href="#builder" aria-hidden="true">#</a> Builder</h2><p>Builder 类是 Retrofit 的静态内部类，它唯一的作用就是帮助我们构建 Retrofit。我们通过给 Builder 类传入不同的参数，来构建不能功能的 Retrofit 实例。</p><p>下面我们逐个分析下 Builder 类中的字段和方法吧。</p><h3 id="callfactory" tabindex="-1"><a class="header-anchor" href="#callfactory" aria-hidden="true">#</a> <code>callFactory</code></h3><p><code>callFactory</code> 字段的类型是 <code>okhttp3.Call.Factory</code>，说明它是 okhttp3 中的一个类，此类是一个接口且其中仅有一个接口方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// okhttp3.Call.Factory</span>

<span class="token keyword">interface</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
    <span class="token class-name">Call</span> <span class="token function">newCall</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述源码可以看出此接口唯一的作用就是构建一个新的 Call 实例。</p><p>由于 Retrofit 是基于 okhttp3 的封装库，因此它需要通过 <code>callFactory</code> 字段来构建 okhttp3 的 Call 实例。</p><p><code>callFactory</code> 有两种注入方式：</p><ol><li>调用 Buidler 的 <code>client(OkHttpClient client)</code> 方法，</li><li>调用 Buidler 的 <code>callFactory(okhttp3.Call.Factory factory)</code> 方法。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token class-name">OkHttpClient</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callFactory</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token string">&quot;client == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">callFactory</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">okhttp3<span class="token punctuation">.</span></span>Call<span class="token punctuation">.</span>Factory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>callFactory <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> <span class="token string">&quot;factory == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上两种方式，其中第一种方式是我们经常使用的，在外部构建好一个 <code>OkHttpClient</code> 实例传入 Builder，其实 <code>OkHttpClient</code> 实现了 <code>okhttp3.Call.Factory</code> 接口，所以它才能赋值给 <code>callFactory</code> 字段。</p><h3 id="baseurl" tabindex="-1"><a class="header-anchor" href="#baseurl" aria-hidden="true">#</a> <code>baseUrl</code></h3><p><code>baseUrl</code> 字段的类型是 <code>okhttp3.HttpUrl</code>。</p><p>在 Builder 类的注释中说：在调用 <code>build()</code> 方法前必须调用 <code>baseUrl()</code> 方法。其他方法的调用都是可选的。</p><p>这足以说明 <code>baseUrl</code> 的重要性。</p><p>要注入 <code>baseUrl</code>，可以通过以下三种方式：</p><ol><li>调用 <code>baseUrl(URL baseUrl)</code> 方法，</li><li>调用 <code>baseUrl(String baseUrl)</code> 方法，</li><li>调用 <code>baseUrl(HttpUrl baseUrl)</code> 方法。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 第一种方式</span>
<span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token class-name">URL</span> baseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">,</span> <span class="token string">&quot;baseUrl == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token class-name">HttpUrl</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 第二种方式</span>
<span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> baseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">,</span> <span class="token string">&quot;baseUrl == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token class-name">HttpUrl</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 第三种方式</span>
<span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token class-name">HttpUrl</span> baseUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">,</span> <span class="token string">&quot;baseUrl == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pathSegments <span class="token operator">=</span> baseUrl<span class="token punctuation">.</span><span class="token function">pathSegments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pathSegments<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pathSegments<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;baseUrl must end in /: &quot;</span> <span class="token operator">+</span> baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>baseUrl <span class="token operator">=</span> baseUrl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中我们最常用的就数第二种方式了。</p><p>观察上面源码的可以看出，前两种方式都间接调用了第三种方式。在第三种方式中，判断了 <code>baseUrl</code> 是否以 <code>/</code> 结尾，所以我们注入 <code>baseUrl</code> 时，通常以 <code>/</code> 结尾，比如 <code>https://github.com/</code>。</p><h3 id="converterfactories" tabindex="-1"><a class="header-anchor" href="#converterfactories" aria-hidden="true">#</a> <code>converterFactories</code></h3><p><code>converterFactories</code> 字段是个集合类型，它存储的是 <code>Converter.Factory</code> 。<code>Converter.Factory</code> 用于构建各种 <code>Converter</code> 实例，<code>Converter</code> 是 Retrofit 的强大功能之一，这个后面学到时再具体分析吧。</p><p>与 <code>converterFactories</code> 相关的方法有两个：</p><ol><li>一个用于注入 <code>Converter.Factory</code>，</li><li>一个用于获取 <code>converterFactories</code> 的可修改集合。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 注入 \`Converter.Factory\`</span>
<span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    converterFactories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> <span class="token string">&quot;factory == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取 \`converterFactories\` 的可修改集合</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> <span class="token function">converterFactories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>converterFactories<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="calladapterfactories" tabindex="-1"><a class="header-anchor" href="#calladapterfactories" aria-hidden="true">#</a> <code>callAdapterFactories</code></h3><p><code>callAdapterFactories</code> 字段也是集合类型，它存储的是 <code>CallAdapter.Factory</code>。<code>CallAdapter.Factory</code> 用于构建各种 <code>CallAdapter</code> 实例，<code>CallAdapter</code> 也是 Retrofit 的强大功能之一，同样留到后面学到时再分析吧。</p><p>与 <code>callAdapterFactories</code> 相关的方法也有两个：</p><ol><li>一个用于注入 <code>CallAdapter.Factory</code>，</li><li>一个用于获取 <code>callAdapterFactories</code> 的可修改集合。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 注入 \`CallAdapter.Factory\`</span>
<span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span><span class="token class-name">CallAdapter<span class="token punctuation">.</span>Factory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    callAdapterFactories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> <span class="token string">&quot;factory == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取 \`callAdapterFactories\` 的可修改集合</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CallAdapter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> <span class="token function">callAdapterFactories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callAdapterFactories<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="callbackexecutor" tabindex="-1"><a class="header-anchor" href="#callbackexecutor" aria-hidden="true">#</a> <code>callbackExecutor</code></h3><p><code>callbackExecutor</code> 的类型是 <code>Executor</code>。它的作用是把 <code>Callback</code> 回调接口中的两个方法抛到指定的线程运行。</p><p>与 <code>callbackExecutor</code> 相关的只有一个注入方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">callbackExecutor</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>callbackExecutor <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> <span class="token string">&quot;executor == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="validateeagerly" tabindex="-1"><a class="header-anchor" href="#validateeagerly" aria-hidden="true">#</a> <code>validateEagerly</code></h3><p><code>validateEagerly</code> 目前是最后一个字段，Boolean 类型。主要用于在 <code>create()</code> 方法内的早期校验与接口方法与参数解析。</p><p>与 <code>validateEagerly</code> 相关的仅有一个注入方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">validateEagerly</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> validateEagerly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>validateEagerly <span class="token operator">=</span> validateEagerly<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> build()</h3><p>通过上面介绍的几个字段，我们已经了解构建 Retrofit 需要哪些必要参数，哪些是可选参数，现在我们可以调用 <code>build()</code> 方法来构建一个新的 Retrofit 实例了。</p><p><code>build()</code> 方法比较长，我们一步步分析吧。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Retrofit</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>baseUrl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Base URL required.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token class-name">Platform</span> platform <span class="token operator">=</span> <span class="token class-name">Platform</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name"><span class="token namespace">okhttp3<span class="token punctuation">.</span></span>Call<span class="token punctuation">.</span>Factory</span> callFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callFactory<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>callFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        callFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token class-name">Executor</span> callbackExecutor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbackExecutor<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>callbackExecutor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        callbackExecutor <span class="token operator">=</span> platform<span class="token punctuation">.</span><span class="token function">defaultCallbackExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>首先判断 <code>baseUrl</code> 不能为空，这里也对应在 <code>baseUrl</code> 字段的分析；</li><li>接下来判断是否注入了 <code>callFactory</code>，没有注入的话则创建一个默认的 <code>OkHttpClient</code> 实例，</li><li>下面在判断是否注入了 <code>callbackExecutor</code>，没有注入的话获取相应平台默认的 <code>Executor</code>。Android 平台默认在主线程。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Retrofit</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CallAdapter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> callAdapterFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callAdapterFactories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CallAdapter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> defaultCallAdapterFactories <span class="token operator">=</span>
        platform<span class="token punctuation">.</span><span class="token function">createDefaultCallAdapterFactories</span><span class="token punctuation">(</span>callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    callAdapterFactories<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>defaultCallAdapterFactories<span class="token punctuation">)</span><span class="token punctuation">;</span>	    

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来构建 <code>callAdapterFactories</code> 集合的副本，并添加相应平台默认的 <code>CallAdapter.Factory</code> 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Retrofit</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> defaultConverterFactories <span class="token operator">=</span>
        platform<span class="token punctuation">.</span><span class="token function">createDefaultConverterFactories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> defaultConverterFactoriesSize <span class="token operator">=</span> defaultConverterFactories<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span><span class="token punctuation">&gt;</span></span> converterFactories <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>converterFactories<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> defaultConverterFactoriesSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    converterFactories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BuiltInConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    converterFactories<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>converterFactories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    converterFactories<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>defaultConverterFactories<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>首先获取相应平台默认的 <code>Converter.Factory</code> 集合，并获取默认集合的大小，</li><li>其次构建一个 <code>1 + this.converterFactories.size() + defaultConverterFactoriesSize</code> 大小的 <code>Converter.Factory</code> 集合，</li><li>最后依次添加 <code>BuiltInConverters()</code>，外部注入的 <code>converterFactories</code> 以及平台默认的 <code>defaultConverterFactories</code> 。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Retrofit</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit</span><span class="token punctuation">(</span>
        callFactory<span class="token punctuation">,</span>
        baseUrl<span class="token punctuation">,</span>
        <span class="token function">unmodifiableList</span><span class="token punctuation">(</span>converterFactories<span class="token punctuation">)</span><span class="token punctuation">,</span>
        defaultConverterFactoriesSize<span class="token punctuation">,</span>
        <span class="token function">unmodifiableList</span><span class="token punctuation">(</span>callAdapterFactories<span class="token punctuation">)</span><span class="token punctuation">,</span>
        defaultCallAdapterFactories<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        callbackExecutor<span class="token punctuation">,</span>
        validateEagerly<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后把 <code>callAdapterFactories</code> 和 <code>callAdapterFactories</code> 转换为不可变集合，调用 <code>Retrofit</code> 的构造方法构建一个新的 <code>Retrofit</code> 实例。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>首先通过分析 Builder 类，我们学习了构建 <code>Retrofit</code> 实例所需的必需参数和可选参数。这样在不同的业务场景下，我们可以根据业务需求构建出适应业务场景的 <code>Retrofit</code> 实例。</p><p>其次阅读 Retrofit 源码，我们也学习了如何运用 Builder 构建器模式在所需参数较多，参数必选和可选时构建对象。</p><p>最后希望可以帮您更好的使用 Retrofit ~~</p>`,60);function f(y,h){const s=l("ExternalLinkIcon");return e(),p("div",null,[u,r,d,k,v,n("p",null,[a("本系列文章基于目前最新的 "),n("a",m,[a("Commit-2022/08/05"),c(s)])]),b])}const F=t(i,[["render",f],["__file","0.构建Retrofit.html.vue"]]);export{F as default};

import{_ as n,Y as s,Z as a,a3 as t}from"./framework-3d290349.js";const e={},p=t(`<h1 id="名噪一时" tabindex="-1"><a class="header-anchor" href="#名噪一时" aria-hidden="true">#</a> 名噪一时</h1><p>本书是关于协程的。协程是一个可以追溯到 1960 年代的概念，其描述了一种处理异步编程的独特方式。 这个概念围绕着使用挂起点、可挂起函数和续体作为语言中的一等公民。</p><p>这么说有点抽象，请看下面的示例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">fetchUser</span><span class="token punctuation">(</span>userId<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token comment">// 1</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Fetching user&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
    <span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 3</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Fetched user&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用前面你所学到的关于阻塞调用的知识看上面的代码片段，你会说代码的执行顺序可能是 1、2、3 和 4。如果你仔细查看上述代码，你会发现这并不是唯一可能的执行顺序。例如，1 和 2 之间的顺序并不重要，3 和 4 之间的顺序也不重要。重要的是在显示用户数据之前必须先获取用户数据，所以 1 必须在 3 之前执行。你还可以将用户数据的获取延迟到实际显示用户数据之前的某个时间。通过透明的方式管理这些问题是协程的黑魔法！</p><p>它们是一种部分线程、部分回调机制，并利用系统调度和挂起工作的能力。这样，你可以立即从调用中返回结果，而无需使用回调、线程或流。这样想，一旦你启动了一个协程，或者调用了一个可挂起的函数，它就会像 “卷饼” 一样被很好地包裹起来。但是，在你想吃 “卷饼” 之前，里面的代码可能不会被执行。</p>`,6),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","07.a-blast-from-the-past.html.vue"]]);export{r as default};

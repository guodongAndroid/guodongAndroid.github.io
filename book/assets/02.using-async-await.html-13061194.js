import{_ as n,Y as s,Z as a,a3 as e}from"./framework-3d290349.js";const t={},o=e(`<p>请使用 IntelliJ 打开本章的 <strong>starter</strong> 项目，并导航至 <strong>async-await/projects/starter</strong> 文件夹然后选择 <strong>async_await</strong> 项目。</p><p>现在，您可能想知道在 Kotlin 协程 API 中 async/await 模式是如何工作的。async 在 Kotlin 中返回一个 <code>Deferred&lt;T&gt;</code>，这与 <strong>future</strong> 模式非常相似。就像您有一个 <code>Future&lt;T&gt;</code> 一样，<code>Deferred</code> 只是包装了一个幕后对象，但是您可以使用它。当您准备好获取数据时，您必须等待，因为数据可能存在也可能不存在。如果数据已经存在，等待将变成简单的 <code>get</code>，否则，您的代码将被挂起并等待数据到来。</p><p>很简单，就像您创建了只有单个容量的 <code>BlockingQueue</code> 实例。然后，在任何时间点，您都可以尝试获取数据或者等待数据并挂起代码。关键区别在于您实际上并没有阻塞线程，而是挂起了代码。现在是时候让您看看它是如何在后台使用协程完成的了。</p><p>该模式被称为 async/await 是有原因的 —— 因为要完整实现这个模式需要两个函数调用，一个函数用于准备和包装数据，称为 <code>async</code> , 而另一个函数用于获取并使用数据，其被称为 <code>await</code>。在您开始使用这种方法之前，让我们看看这两个函数的签名是什么。</p><p>如果您打开 <code>async</code> 函数的定义，您将看到以下代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>
    context<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> EmptyCoroutineContext<span class="token punctuation">,</span>
    start<span class="token operator">:</span> CoroutineStart <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span>
    block<span class="token operator">:</span> <span class="token keyword">suspend</span> CoroutineScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T
<span class="token punctuation">)</span><span class="token operator">:</span> Deferred<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> newContext <span class="token operator">=</span> <span class="token function">newCoroutineContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
    <span class="token keyword">val</span> coroutine <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">.</span>isLazy<span class="token punctuation">)</span>
        <span class="token function">LazyDeferredCoroutine</span><span class="token punctuation">(</span>newContext<span class="token punctuation">,</span> block<span class="token punctuation">)</span> <span class="token keyword">else</span>
        DeferredCoroutine<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span>newContext<span class="token punctuation">,</span> active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    coroutine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> coroutine<span class="token punctuation">,</span> block<span class="token punctuation">)</span>
    <span class="token keyword">return</span> coroutine
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当您调用 <code>async</code> 时，您可以传递一个 <code>CoroutineContext</code> 来将它绑定到某个 <code>Job</code> 或 <code>Dispatcher</code>。您也可以传入 <code>CoroutineStart</code> 参数以不同的模式启动它。但是，最重要的是您必须要传入一个 <code>lambda</code> 代码块，该代码块可以访问调用该函数的 <code>CoroutineScope</code>，并且返回一个值，该值将尝试存储在 <code>Deferred</code> 中。它创建一个传入 <code>lambda</code> 代码块来启动的新 <code>DeferredCoroutine</code> 并返回该新的 <code>DeferredCoroutine</code>。您将在下一节中了解有关此协程的更多信息。</p><p>这个函数调用本质上将值包装在一个协程中，该协程实现了您稍后将在其上调用 <code>await</code> 的 <code>Deferred&lt;T&gt;</code> 接口。当您调用 <code>await</code> 时，该协程将尝试去提供值或者挂起直到值存在。让我们看看 <code>await</code> 的函数签名，看看有没有什么有趣的东西：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * Awaits for completion of this value without blocking a thread
 * and resumes when deferred computation is complete,
 * returning the resulting value or throwing the
 * corresponding exception if the deferred was cancelled.
 *
 * This suspending function is cancellable.
 * If the [Job] of the current coroutine is cancelled
 * or completed while this suspending function is waiting,
 * this function immediately resumes with [CancellationException].
 *
 * This function can be used in [select] invocation
 * with [onAwait] clause.
 * Use [isCompleted] to check for completion of this
 * deferred value without waiting.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数本身极其简单，但是其背后的思想却是极具深意的。您可以挂起整个函数或协程，然后在数据准备好让它解析，而不是实际上阻塞线程。是时候使用这种方法并将当前阻塞的代码片段迁移到异步了。如果您还没有打开本章中的 <strong>starter</strong> 项目，在 <strong>async-await</strong> 项目文件夹下。接下来，打开 <strong>AsyncAwait.kt</strong>，您应该会看到以下代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">val</span> userId <span class="token operator">=</span> <span class="token number">992</span>
	<span class="token function">getUserByIdFromNetwork</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span> user <span class="token operator">-&gt;</span>
		<span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getUserByIdFromNetwork</span><span class="token punctuation">(</span>userId<span class="token operator">:</span> Int<span class="token punctuation">,</span> onUserReady<span class="token operator">:</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
    <span class="token function">onUserReady</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Filip&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Babic&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> lastName<span class="token operator">:</span> String<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码片段尝试从模拟网络调用中获取一个 <code>User</code> 并打印它。但是，问题在于它会调用 <code>Thread.sleep</code> 暂停线程三秒钟。就像您有一个阻塞的网络调用一样，您必须等待数据返回，然后才能使用它。更进一步的问题是当数据准备好后它使用回调来通知调用方。接下来，您将使用协程 API 中的 <code>async</code> 和 <code>await</code> 来重构它。</p><p>将 <code>getUserByIdFromNetwork</code> 代码更改为以下内容：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getUserByIdFromNetwork</span><span class="token punctuation">(</span>userId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Retrieving user from network&quot;</span></span><span class="token punctuation">)</span>
	Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
	<span class="token function">User</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Filip&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Babic&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确保导入 <code>GlobalScope</code> 和 <code>async</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先，您已经在函数参数中移除了回调，其次，您将 <code>GlobalScope.async</code> 代码块作为函数的返回值。现在，该函数返回一个值，并且它不依赖回调来返回它。</p><p>最后，您还需要修改 <code>main</code> 函数里的代码来使用新版本的 <code>getUserByIdFromNetwork()</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> userId <span class="token operator">=</span> <span class="token number">992</span>
    <span class="token keyword">val</span> userData <span class="token operator">=</span> <span class="token function">getUserByIdFromNetwork</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，如果您运行上面的代码，您将看到与此类似的输出：</p><div class="language-logcat line-numbers-mode" data-ext="logcat"><pre class="language-logcat"><code>DeferredCoroutine{Active}@6eee89b3
Retrieving user from network
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为 <code>getUserByIdFromNetwork</code> 现在会返回一个 <code>Deferred&lt;User&gt;</code>。为了获取 <code>User</code>，您必须调用它的 <code>await</code> 函数。但是，<code>await</code> 是一个可挂起函数并且必须在另一个可挂起函数或者协程构建器中调用它，所以您还必须将调用代码包装在 <code>launch</code> 中。更新 <code>main</code> 函数代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> userId <span class="token operator">=</span> <span class="token number">992</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> userData <span class="token operator">=</span> <span class="token function">getUserByIdFromNetwork</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span>userData<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该代码流程与前面的相似，除了您还调用了 <code>await</code> 来获取 <code>User</code> 并打印它外。现在，您成功将基于回调的代码迁移到 <strong>async/await</strong> 模式。</p><p>现在，回顾上面所有更改以及更改代码的作用：</p><ul><li>首先，您从函数中删除了回调，因为您将返回一个值。</li><li>其次，您将 <code>async</code> 的返回值作为函数的返回值，且从 <code>lambda</code> 代码块中返回 <code>User</code> 。</li><li>最后，您必须在协程中调用 <code>await</code> ，因为它一个可挂起的函数。</li></ul><p>这三个步骤是将代码迁移到 <strong>async/await</strong> 所需要做的一切。</p><p>现在，它是如何工作的暂且不提。如前所述，它创建一个协程并使用 <code>Deferred&lt;T&gt;</code> 来包装值。通过该接口，您可以使用它暴露的 <code>await</code> 函数来访问该值。</p><p>一旦您调用了 <code>await</code> 就挂起了函数调用，有效地避免了线程阻塞。然后等待 <code>lambda</code> 代码块执行以使用其内部存储的值。当值准备好后，函数将退出挂起并正常执行。</p><p>现在，这里的很多工作都是由 <code>Deferred</code> 类型决定的，所以让我们看看它到底是什么。</p>`,30),p=[o];function c(i,l){return s(),a("div",null,p)}const r=n(t,[["render",c],["__file","02.using-async-await.html.vue"]]);export{r as default};

import{_ as e}from"./7.annotation-type-8860ced4.js";import{_ as t,Y as o,Z as c,$ as n,a0 as a,a1 as p,a2 as l,a3 as i,E as d}from"./framework-3d290349.js";const u={},r=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1),k=n("code",null,"@Url",-1),v=n("code",null,"@Path",-1),h=n("code",null,"Header",-1),m=i('<p><img src="'+e+`" alt="annotation-type" loading="lazy"></p><p>从上图可以看出与 <code>Header</code> 相关的注解有：</p><ul><li><code>@Header</code></li><li><code>@Headers</code></li><li><code>@HeaderMap</code></li></ul><h2 id="header" tabindex="-1"><a class="header-anchor" href="#header" aria-hidden="true">#</a> <code>@Header</code></h2><p><code>@Header</code> 注解标记HTTP接口方法中的一个参数，表示这个参数参与HTTP请求头的构建。参数的值，集合或数组中的子项会经过 <code>Retrofit#stringConverter(Type, Annotation[])</code> 转换，如果没有找到匹配的字符串转换器则使用 <code>Object#toString()</code>。</p><p><code>@Header</code> 注解有两个参数，分别为：</p><ol><li><code>value</code>：必选，表示请求头中的键 Key，</li><li><code>allowUnsafeNonAsciiValues</code>：可选，默认情况下，键和值仅允许 ascii 中的值，如果指定 <code>allowUnsafeNonAsciiValues=true</code>，可以改变上述行为，主要是适用于世界上其他语言，</li></ol><p>简单使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Language&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> lang<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Service</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">&quot;zh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Header</code> 注解使用时有以下几点需要注意：</p><ol><li><p>参数值为 <code>null</code> 的话会被忽略，</p></li><li><p>参数值为集合或数组时，会忽略其为 <code>null</code> 的子项，如果集合类型且不是参数化类型，则抛出异常，即：不能直接使用原始类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 错误示例</span>
<span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Language&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span> lang<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>相同键的请求头不会相互覆盖，所有相同键的请求头都会在HTTP请求中，</p></li></ol><h2 id="headermap" tabindex="-1"><a class="header-anchor" href="#headermap" aria-hidden="true">#</a> <code>@HeaderMap</code></h2><p><code>@HeaderMap</code> 注解也是标记HTTP接口方法中的一个参数，表示这个参数参与HTTP请求头的构建。</p><p><code>@HeaderMap</code> 注解目前只有一个参数：</p><ol><li><code>allowUnsafeNonAsciiValues</code>：可选，其作用与 <code>@Header</code> 注解中的相同，</li></ol><p>简单使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@HeaderMap</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Service</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
service<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">ImmutableMap</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Accept&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Accept-Charset&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@HeaderMap</code> 注解使用时有以下几点需要注意：</p><ol><li>被标注的参数类型必须是 <code>Map</code> 或者 <code>okhttp3.Headers</code>，否则抛出异常，</li><li>如果是 <code>Map</code> 类型，<code>Map</code> 中键的类型必须是 <code>String</code> 类型，否则抛出异常，</li><li>如果是 <code>Map</code> 类型，<code>Map</code> 中值没有限定类型，但是会经过 <code>Retrofit#stringConverter(Type, Annotation[])</code> 转换，如果没有找到匹配的字符串转换器，则使用 <code>Object#toString()</code>。</li></ol><h2 id="headers" tabindex="-1"><a class="header-anchor" href="#headers" aria-hidden="true">#</a> <code>Headers</code></h2><p><code>Headers</code> 注解标记一个HTTP接口方法，表示这个HTTP接口方法所包含的请求头数据。</p><p><code>Headers</code> 注解有两个参数，分别为：</p><ol><li><code>value</code>：必选，字符串数组类型，其子项格式必须为键值对：<code>Key: Value</code>，</li><li><code>allowUnsafeNonAsciiValues</code>：可选，其作用与 <code>@Header</code> 注解中的相同，</li></ol><p>简单使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">&quot;foo/bar&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;ping: pong&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kit: kat&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Headers</code> 注解使用时有以下几点需要注意：</p><ol><li>数组不能为空，否则抛出异常，</li><li>数组子项格式必须为键值对：<code>Key: Value</code>，缺少 <code>Key</code> 、<code>:</code> 或 <code>Value</code> 都会抛出异常，</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文学习了 <code>@Header</code>、<code>@HeaderMap</code> 和 <code>@@Headers</code> 请求参数注解的简单使用与注意事项，现简单总结下各自的作用与分类。</p><h3 id="静态-header" tabindex="-1"><a class="header-anchor" href="#静态-header" aria-hidden="true">#</a> 静态 Header</h3><p>静态 Header 是我们已经明确知道当前HTTP请求中需要包含的请求头，比如：<code>Content-Type</code>，那么我们就可以以字面量的形式通过 <code>@Headers</code> 注解直接声明在HTTP接口方法之上，这种方式即提升了代码结构，又增强了代码可读性，降低后续的维护成本。</p><h3 id="动态-header" tabindex="-1"><a class="header-anchor" href="#动态-header" aria-hidden="true">#</a> 动态 Header</h3><p>既然有静态 Header，那么就有动态 Header。静态 Header 的优势比较明显，同时劣势也比较鲜明。</p><p>当我们知道当前HTTP请求需要包含一些请求头的键，但是不确定请求头的值时，那么我们可以通过 <code>@Header</code> 注解声明在HTTP接口方法的某个参数上，在实际调用HTTP接口方法发起HTTP请求时再传入请求头的值，这种方式在一定程度上增加了请求头设置的灵活性。</p><p>当我们不确定当前HTTP请求需要包含哪些请求头，即完全不确定请求头的键和值时，或者请求头的键和值是由外部提供的，那么我们可以通过 <code>@HeaderMap</code> 注解声明在HTTP接口方法的某个参数上，在实际调用HTTP接口方法发起HTTP请求时把请求头信息封装成 <code>Map</code> 类型传入，这种方式极大的提高了请求头设置的灵活性，但是灵活性的提高，对它的一些限制/校验会相应提高，易用性则会相应降低，使用过程中的出错率也会相应增加。</p><table><thead><tr><th>注解</th><th>类型</th><th>适用场景</th></tr></thead><tbody><tr><td><code>@Header</code></td><td>动态 Header</td><td>明确键，不明确值</td></tr><tr><td><code>@HeaderMap</code></td><td>动态 Header</td><td>键和值都不明确</td></tr><tr><td><code>@Headers</code></td><td>静态 Header</td><td>键和值都明确</td></tr></tbody></table><p>通过本文的学习，相信在实际工作中使用这两个注解时肯定是信手捏来。</p><p>希望可以帮你更好的使用 Retrofit。</p><p>下篇 <code>@Feild</code> 相关的注解更精彩，happy~</p>`,39);function H(g,b){const s=d("RouterLink");return o(),c("div",null,[r,n("p",null,[a("在上一篇文章 "),p(s,{to:"/SourceCodeAnalysis/Retrofit/8.annotation-part-2.html"},{default:l(()=>[a("请求参数注解(一)")]),_:1}),a(" 中我们学习了 "),k,a(" 和 "),v,a(" 注解，本篇文章我们学习下与 "),h,a(" 相关的注解。")]),m])}const _=t(u,[["render",H],["__file","9.annotation-part-3.html.vue"]]);export{_ as default};

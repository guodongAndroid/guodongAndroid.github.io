import{_ as e,Y as t,Z as o,$ as a,a0 as n,a1 as c,a2 as p,a3 as l,E as d}from"./framework-3d290349.js";const i={},r=a("h2",{id:"前言",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),u=a("code",null,"Method",-1),k=a("code",null,"AnnotatedElement",-1),v=l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><code>AnnotatedElement</code> 类上的注释比较多，我们简单看下：<code>AnnotatedElement</code> 表示当前在此 VM 中运行的程序的带注解的元素。该接口允许以反射方式读取注解。此接口中方法返回的所有注解都是不可变的和可序列化的。该接口的方法返回的数组可以被调用者修改，而不影响返回给其他调用者的数组。注解可以以不同的形式存在于元素上，比如直接存在于元素上，或者以容器注解的形式间接存在于元素上等等。</p><h2 id="存在类型" tabindex="-1"><a class="header-anchor" href="#存在类型" aria-hidden="true">#</a> 存在类型</h2><p>在 <code>AnnotatedElement</code> 类的注释中已经描述了注解的四种存在类型：</p><ol><li>直接存在，</li><li>间接存在，</li><li>存在，</li><li>关联。</li></ol><p>类注释中不仅描述了这四种存在类型，还描述了这四种存在类型的判断条件或者说满足条件，下面我们将一一学习。</p><h3 id="直接存在" tabindex="-1"><a class="header-anchor" href="#直接存在" aria-hidden="true">#</a> 直接存在</h3><p><strong>直接存在</strong>应该是我们经常遇见或者说经常使用的一种类型：就是某个元素直接被注解标注。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Element</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>test()</code> 方法被 <code>@Element</code> 注解直接标注了，此时 <code>@Elment</code> 注解直接存在于元素之上，这种类型称为<strong>直接存在</strong>。</p><h3 id="间接存在" tabindex="-1"><a class="header-anchor" href="#间接存在" aria-hidden="true">#</a> 间接存在</h3><p><strong>间接存在</strong>目前(jdk 1.8)只有一种情况，那就是可重复注解：当我们使用可重复注解多次标注元素时，那么这个可重复注解就是间接存在于元素之上。</p><p>使用上一篇文章中的可重复注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>
    <span class="token class-name">Element</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Element</span>
    <span class="token annotation punctuation">@Element</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中， <code>test()</code> 方法被 <code>@Element</code> 注解多次标注，此时 <code>@Element</code> 注解是间接存在于元素之上，因为编译完后 <code>test()</code> 方法实际上被 <code>@Array</code> 注解标记，这种类型称为<strong>间接存在</strong>。</p><p>下面是 <code>test()</code> 方法的字节码：字节码中的 <code>RuntimeVisibleAnnotations</code> 表示方法运行时可见的注解，其中 <code>#13</code>，<code>#14</code> 和 <code>#15</code> 对应常量池中的编号，从常量池中我们也可以看到 <code>#13</code>，<code>#14</code> 和 <code>#15</code> 分别对应的内容。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Constant</span> pool<span class="token operator">:</span>
#<span class="token number">13</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Lcom</span><span class="token operator">/</span>guodong<span class="token operator">/</span>android<span class="token operator">/</span>retrofit<span class="token operator">/</span><span class="token class-name">Array</span><span class="token punctuation">;</span>
#<span class="token number">14</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               value
#<span class="token number">15</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Lcom</span><span class="token operator">/</span>guodong<span class="token operator">/</span>android<span class="token operator">/</span>retrofit<span class="token operator">/</span><span class="token class-name">Element</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>guodong<span class="token punctuation">.</span>android<span class="token punctuation">.</span>retrofit<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
         <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">8</span><span class="token operator">:</span> <span class="token number">0</span>
      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
            <span class="token number">0</span>       <span class="token number">1</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Lcom</span><span class="token operator">/</span>guodong<span class="token operator">/</span>android<span class="token operator">/</span>retrofit<span class="token operator">/</span><span class="token class-name">Test</span><span class="token punctuation">;</span>
    <span class="token class-name">RuntimeVisibleAnnotations</span><span class="token operator">:</span>
      <span class="token number">0</span><span class="token operator">:</span> #<span class="token function">13</span><span class="token punctuation">(</span>#<span class="token number">14</span><span class="token operator">=</span><span class="token punctuation">[</span>@#<span class="token function">15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>@#<span class="token function">15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存在" tabindex="-1"><a class="header-anchor" href="#存在" aria-hidden="true">#</a> 存在</h3><p>若是满足以下任一条件，则认为元素上<strong>存在</strong>注解：</p><ol><li>元素上<strong>直接存在</strong>注解，</li><li>元素上没有直接存在的注解，并且元素是一个类，父类上存在可继承的注解。</li></ol><p>简单点说：元素自身有注解或者元素父类上有可继承的注解。</p><p>创建可继承注解和父类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ParentAnnotation</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ParentAnnotation</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestParent</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 <code>Test</code> 继承 <code>TestParent</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">TestParent</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中 <code>@ParentAnnotation</code> 注解是可继承的，并且直接存在于 <code>TestParent</code> 类上，此时 <code>Test</code> 类继承了 <code>TestParent</code> 类，那么此时 <code>@PatentAnnotation</code> <strong>存在</strong>于 <code>Test</code> 元素之上，这种类型称为<strong>存在</strong>。</p><h3 id="关联" tabindex="-1"><a class="header-anchor" href="#关联" aria-hidden="true">#</a> 关联</h3><p>若是满足以下任一条件，则认为元素上有<strong>关联</strong>注解：</p><ol><li>元素上<strong>直接或间接存在</strong>注解，</li><li>元素上没有直接或间接存在的注解，并且元素是一个类，该注解与其父类有关联关系。</li></ol><p>创建超类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParentAnnotation</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGrandfather</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改父类 <code>TestParent</code>，去掉父类上的 <code>@ParentAnnotation</code>，<code>Test</code> 类不变：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestParent</span> <span class="token keyword">extends</span> <span class="token class-name">TestGrandfather</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中 <code>@ParentAnnotaion</code> 注解标注在 <code>TestGradfather</code> 类上，并且 <code>Test</code> 类间接继承了 <code>TestGradfather</code>，那么此时 <code>@PatentAnnotation</code> 与 <code>Test</code> 是关联关系，这种类型称为<strong>关联</strong>。</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p><code>AnnotatedElement</code> 类的注释中描述了注解存在类型，那么它所提供的方法，也是基于注解存在类型来实现的，同时注释中也描述了它提供的方法与注解存在类型的关系，以下表格摘自 <code>AnnotatedElement</code> 类注释：</p><table><thead><tr><th>返回值</th><th>方法</th><th>直接存在</th><th>间接存在</th><th>存在</th><th>关联</th></tr></thead><tbody><tr><td>T</td><td><code>getAnnotation(Class&lt;T&gt;)</code></td><td></td><td></td><td>✔️</td><td></td></tr><tr><td>Annotation[]</td><td>getAnnotations()</td><td></td><td></td><td>✔️</td><td></td></tr><tr><td>T[]</td><td><code>getAnnotationsByType(Class&lt;T&gt;)</code></td><td></td><td></td><td></td><td>✔️</td></tr><tr><td>T</td><td><code>getDeclaredAnnotation(Class&lt;T&gt;)</code></td><td>✔️</td><td></td><td></td><td></td></tr><tr><td>Annotation[]</td><td>getDeclaredAnnotations()</td><td>✔️</td><td></td><td></td><td></td></tr><tr><td>T[]</td><td><code>getDeclaredAnnotationsByType(Class&lt;T&gt;)</code></td><td>✔️</td><td>✔️</td><td></td><td></td></tr></tbody></table><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>对 <code>AnnotatedElement</code> 的学习可以让我们更好理解和运用注解，以及如何获取注解，同时也是对上一篇文章中 <code>Method</code> 获取注解的补充，其实 <code>Method</code> 间接实现了 <code>AnnotatedElement</code> 接口，<code>AnnotatedElement</code> 接口还有其他几个子类，后续我们再学习。</p><p>happy~</p>`,40);function m(b,h){const s=d("RouterLink");return t(),o("div",null,[r,a("p",null,[n("在 "),c(s,{to:"/SourceCodeAnalysis/Retrofit/5.%E5%8F%8D%E5%B0%84(%E4%BA%8C).html"},{default:p(()=>[n("上一篇文章")]),_:1}),n(" 中我们学习了与反射相关的 "),u,n(" 知识，而且在上篇文章最后说反射先学到这里。没想到这么快就食言了，本篇文章继续学习下与反射相关的知识，那么本文的重点就是 "),k,n("。")]),v])}const y=e(i,[["render",m],["__file","6.反射(三).html.vue"]]);export{y as default};

import{_ as c,Y as l,Z as i,$ as a,a0 as n,a1 as s,a2 as u,a3 as e,E as t}from"./framework-3d290349.js";const r="/book/assets/01-00-modify-spring-config-property-022f3739.png",d="/book/assets/01-01-setter-run-test-result-7afe546b.png",k="/book/assets/01-02-modify-spring-config-p-a8492766.png",m="/book/assets/01-03-p-run-test-result-8baf8d8c.png",g="/book/assets/01-04-no-matching-constructor-6b2db6c6.png",v="/book/assets/01-05-modify-spring-config-constructor-b3447375.png",b="/book/assets/01-06-constructor-run-test-result-619d0a74.png",h="/book/assets/01-07-modify-spring-config-c-488e3146.png",q="/book/assets/01-08-c-run-test-result-24a0bacd.png",y={},f=e('<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>什么是 <strong>Bean</strong> 管理？</p><ol><li>由 Spring 创建和销毁对象，</li><li>由 Spring 为 Bean 注入属性。</li></ol><p>今日笔者学习下基于 xml 配置文件的方式为 Bean 注入属性。</p><h2 id="注入" tabindex="-1"><a class="header-anchor" href="#注入" aria-hidden="true">#</a> 注入</h2>',5),_=a("code",null,"User",-1),x=a("code",null,"spring.xml",-1),w=a("strong",null,"Spring IOC",-1),U=a("code",null,"User",-1),S=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">bean</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;User{&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
            <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span>
            <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们为 <code>User</code> 类中的属性注入数据，有两种方式是可以实现属性注入：</p><ol><li>构造器注入，</li><li><strong>setter</strong> 方法注入。</li></ol><p>首先看 <strong>setter</strong> 方法注入吧，因为之前我们为 <code>User</code> 类创建了 <strong>setter/getter</strong> 方法，这里直接就可以使用了。</p><h2 id="setter-注入" tabindex="-1"><a class="header-anchor" href="#setter-注入" aria-hidden="true">#</a> Setter 注入</h2><h3 id="property-标签注入" tabindex="-1"><a class="header-anchor" href="#property-标签注入" aria-hidden="true">#</a> property 标签注入</h3><p><code>User</code> 类无需修改，只需修改 <code>spring.xml</code> 配置文件即可：</p><p><img src="`+r+`" alt="modify-spring-config-xml" loading="lazy"></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean.User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>guodongAndroid<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>18<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>bean</code> 标签中增加 <code>property</code> 标签，其中 <code>name</code> 属性的值是 <code>User</code> 类中的属性名，<code>value</code> 属性的值是为 <code>User</code> 类中的属性注入的数据。</p><p>下面运行测试代码，输出结果如下：</p><p><img src="`+d+`" alt="setter-run-test-result" loading="lazy"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>User<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">&#39;guodongAndroid&#39;</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="p-命名空间注入" tabindex="-1"><a class="header-anchor" href="#p-命名空间注入" aria-hidden="true">#</a> p 命名空间注入</h3><p>同样无需修改 <code>User</code> 类，只需修改 <code>spring.xml</code> 配置文件：</p><p><img src="`+k+`" alt="modify-spring-config-p" loading="lazy"></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/p<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean.User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>guodongAndroid<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>19<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先在配置文件中引入 <code>p</code> 命名空间，然后就可以在 <code>bean</code> 标签中使用 <code>p:name</code> 为 <code>User</code> 类中的 <code>name</code> 属性注入数据，<code>p:age</code> 以此类推。</p><p>下面运行测试代码，输出结果如下：</p><p><img src="`+m+`" alt="p-run-test-result" loading="lazy"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>User<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">&#39;guodongAndroid&#39;</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="构造器注入" tabindex="-1"><a class="header-anchor" href="#构造器注入" aria-hidden="true">#</a> 构造器注入</h2><p>需要修改 <code>User</code> 类，增加有参构造器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">bean</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructor-arg-标签注入" tabindex="-1"><a class="header-anchor" href="#constructor-arg-标签注入" aria-hidden="true">#</a> constructor-arg 标签注入</h3><p><code>User</code> 类增加有参构造器后，<code>spring.xml</code> 配置文件会提示错误信息：<code>No matching constructor found in class &#39;User&#39;</code>:</p><p><img src="`+g+'" alt="no-matching-constructor" loading="lazy"></p><p>错误信息是指在 <code>User</code> 类中找不到匹配的构造器，因为 <code>bean</code> 标签默认使用无参构造器。在提示信息中也为我们提供了解决方案：添加 <code>constructor-arg</code> 标签，下面我们修改 <code>spring.xml</code> 配置文件：</p><p><img src="'+v+`" alt="modify-spring-config-constructor" loading="lazy"></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean.User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>guodongAndroid<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>bean</code> 标签中增加 <code>constructor-arg</code> 标签，其中 <code>name</code> 属性对应构造器中的形参，<code>value</code> 属性为注入的数据。</p><p>下面运行测试代码，输出结果如下：</p><p><img src="`+b+`" alt="constructor-run-test-result" loading="lazy"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>User<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">&#39;guodongAndroid&#39;</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="c-命名空间注入" tabindex="-1"><a class="header-anchor" href="#c-命名空间注入" aria-hidden="true">#</a> c 命名空间注入</h3><p>修改配置文件，引入 <code>c</code> 命名空间，实现注入：</p><p><img src="`+h+`" alt="modify-spring-config-c" loading="lazy"></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/c<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean.User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>guodongAndroid<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>21<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先在配置文件中引入 <code>c</code> 命名空间，然后就可以在 <code>bean</code> 标签中使用 <code>c:name</code> 为 <code>User</code> 类的有参构造器的形参注入数据，<code>c:age</code> 以此类推。</p><p>下面运行测试代码，输出结果如下：</p><p><img src="`+q+`" alt="c-run-test-result" loading="lazy"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>User<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">&#39;guodongAndroid&#39;</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文学习了通过配置文件为 <strong>Bean</strong> 注入属性的几种方式：</p><ol><li>构造器注入： <ol><li>通过 <code>constructor-arg</code> 标签，</li><li>通过 <code>c</code> 命名空间。</li></ol></li><li><strong>setter</strong> 注入： <ol><li>通过 <code>property</code> 标签，</li><li>通过 <code>p</code> 命名空间。</li></ol></li></ol>`,45),A={href:"https://gitee.com/guodongAndroid/spring-study/commit/68fb477aa7d44207e9863d43cb178be1c5505c53",target:"_blank",rel:"noopener noreferrer"};function j(z,B){const p=t("RouterLink"),o=t("ExternalLinkIcon");return l(),i("div",null,[f,a("p",null,[n("在 "),s(p,{to:"/SourceCodeAnalysis/Spring/00-create-spring-project.html"},{default:u(()=>[n("上一篇文章")]),_:1}),n(" 中，我们创建了 "),_,n(" 类，并在 "),x,n(" 中注册进了 "),w,n(" 容器中，最后测试时也从容器中获取并输出了 "),U,n(" 类的实例，但是输出的内容都是默认值。")]),S,a("p",null,[a("a",A,[n("今日学习记录"),s(o)])])])}const C=c(y,[["render",j],["__file","01-injection-property.html.vue"]]);export{C as default};

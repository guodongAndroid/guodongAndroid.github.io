import{_ as o,Y as p,Z as c,$ as n,a0 as s,a1 as t,a3 as e,E as i}from"./framework-3d290349.js";const l="/book/assets/202205081206919-0fa1907f.png",u="/book/assets/202205081212412-6f804789.png",r="/book/assets/202205081211833-2f71a736.png",d="/book/assets/202205081211011-cd668550.png",k="/book/assets/202205081312860-dc6e5f16.png",v={},m=e(`<h1 id="kotlin-kcp的应用-第一篇" tabindex="-1"><a class="header-anchor" href="#kotlin-kcp的应用-第一篇" aria-hidden="true">#</a> Kotlin-KCP的应用-第一篇</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>KCP的应用计划分两篇，本文是第一篇</p><p>本文主要记录从发现问题到使用KCP解决问题的折腾过程，下一篇记录KCP的应用</p><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p><code>Kotlin</code> 号称百分百兼容 <code>Java</code> ，所以在 <code>Kotlin</code> 中一些修饰符，比如 <code>internal</code> ，在编译后放在纯 <code>Java</code> 的项目中使用(没有<code>Kotlin</code>环境)，<code>Java</code> 仍然可以访问被 <code>internal</code> 修饰的类、方法、字段等</p><p>在使用 <code>Kotlin</code> 开发过程中需要对外提供 <code>SDK</code> 包，在 <code>SDK</code> 中有一些 <code>API</code> 不想被外部调用，并且已经添加了 <code>internal</code> 修饰，但是受限于上诉问题且第三方使用 <code>SDK</code> 的环境不可控(不能要求第三方必须使用<code>Kotlin</code>)</p><p>带着问题Google一番，查到以下几个解决方案：</p><ol><li>使用 <code>JvmName</code> 注解设置一个不符合 <code>Java</code> 命名规则的标识符<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></li><li>使用 <code>ˋˋ</code> 在 <code>Kotlin</code> 中把一个不合法的标识符强行合法化<sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup></li><li>使用 <code>JvmSynthetic</code> 注解<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></li></ol><p>以上方案可以满足大部分需求，但是以上方案都不满足隐藏构造方法，可能会想什么情景下需要隐藏构造方法，例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token keyword">internal</span> <span class="token keyword">val</span> a<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">internal</span> <span class="token keyword">val</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">/**
     * non-public constructor for java
     */</span>
    <span class="token keyword">internal</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为此我还提了个Issue<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>，期望官方把 <code>JvmSynthetic</code> 的作用域扩展到构造方法，不过官方好像没有打算实现😂</p><p>为解决隐藏构造方法，可以把构造方法私有化，对外暴露静态工厂方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Builder <span class="token keyword">private</span> <span class="token keyword">constructor</span> <span class="token punctuation">(</span><span class="token keyword">internal</span> <span class="token keyword">val</span> a<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">internal</span> <span class="token keyword">val</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">/**
     * non-public constructor for java
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    
    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>

        <span class="token annotation builtin">@JvmStatic</span>
        <span class="token keyword">fun</span> <span class="token function">newBuilder</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Builder</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方案说完了，大家散了吧，散了吧~</p><p>开玩笑，开玩笑😛，必然要折腾一番</p><h2 id="折腾" tabindex="-1"><a class="header-anchor" href="#折腾" aria-hidden="true">#</a> 折腾</h2><h3 id="探索jvmsynthetic实现原理" tabindex="-1"><a class="header-anchor" href="#探索jvmsynthetic实现原理" aria-hidden="true">#</a> 探索<code>JvmSynthetic</code>实现原理</h3><p>先看下 <code>JvmSynthetic</code> 注解的注释文档</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>/**
 * Sets \`ACC_SYNTHETIC\` flag on the annotated target in the Java bytecode.
 *
 * Synthetic targets become inaccessible for Java sources at compile time while still being accessible for Kotlin sources.
 * Marking target as synthetic is a binary compatible change, already compiled Java code will be able to access such target.
 *
 * This annotation is intended for *rare cases* when API designer needs to hide Kotlin-specific target from Java API
 * while keeping it a part of Kotlin API so the resulting API is idiomatic for both languages.
 */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好家伙，实现原理都说了：在 <code>Java</code> 字节码中的注解目标上设置 <code>ACC_SYNTHETIC</code> 标识</p><p>此处涉及 <code>Java</code> 字节码知识点，<code>ACC_SYNTHETIC</code> 标识可以简单理解是 <code>Java</code> 隐藏的，非公开的一种修饰符，可以修饰类、方法、字段等<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></p>`,22),b=n("code",null,"Kotlin",-1),f=n("code",null,"ACC_SYNTHETIC",-1),g={href:"https://github.com/JetBrains/kotlin",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"Github Kotlin",-1),y=n("code",null,"JvmSynthetic",-1),_={href:"https://github.com/JetBrains/kotlin/search?q=JvmSynthetic",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[n("img",{src:l,alt:"image-20220508120615028",loading:"lazy"})],-1),T=n("code",null,"JVM_SYNTHETIC_ANNOTATION_FQ_NAME",-1),I=n("code",null,"JVM_SYNTHETIC_ANNOTATION_FQ_NAME",-1),A={href:"https://github.com/JetBrains/kotlin/search?q=JVM_SYNTHETIC_ANNOTATION_FQ_NAME",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,[n("img",{src:u,alt:"image-20220508121250275",loading:"lazy"})],-1),x=n("p",null,[n("img",{src:r,alt:"image-20220508121115651",loading:"lazy"})],-1),N=n("p",null,[n("img",{src:d,alt:"image-20220508121137580",loading:"lazy"})],-1),S={href:"https://github.com/JetBrains/kotlin/blob/effd21d074fb07e64797aef4db624cae0decbf42/compiler/ir/backend.jvm/codegen/src/org/jetbrains/kotlin/backend/jvm/codegen/ClassCodegen.kt",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"ClassCodegen.kt",-1),O=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 获取Class的SynthAccessFlag</span>
<span class="token keyword">private</span> <span class="token keyword">fun</span> IrClass<span class="token punctuation">.</span><span class="token function">getSynthAccessFlag</span><span class="token punctuation">(</span>languageVersionSettings<span class="token operator">:</span> LanguageVersionSettings<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token comment">// 如果有\`JvmSynthetic\`注解，返回\`ACC_SYNTHETIC\`标识</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>JVM_SYNTHETIC_ANNOTATION_FQ_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Opcodes<span class="token punctuation">.</span>ACC_SYNTHETIC
    <span class="token keyword">if</span> <span class="token punctuation">(</span>origin <span class="token operator">==</span> IrDeclarationOrigin<span class="token punctuation">.</span>GENERATED_SAM_IMPLEMENTATION <span class="token operator">&amp;&amp;</span>
        languageVersionSettings<span class="token punctuation">.</span><span class="token function">supportsFeature</span><span class="token punctuation">(</span>LanguageFeature<span class="token punctuation">.</span>SamWrapperClassesAreSynthetic<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
        <span class="token keyword">return</span> Opcodes<span class="token punctuation">.</span>ACC_SYNTHETIC
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token comment">// 计算字段的AccessFlag</span>
<span class="token keyword">private</span> <span class="token keyword">fun</span> IrField<span class="token punctuation">.</span><span class="token function">computeFieldFlags</span><span class="token punctuation">(</span>context<span class="token operator">:</span> JvmBackendContext<span class="token punctuation">,</span> languageVersionSettings<span class="token operator">:</span> LanguageVersionSettings<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span>
    origin<span class="token punctuation">.</span>flags <span class="token operator">or</span> visibility<span class="token punctuation">.</span>flags <span class="token function">or</span>
            <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDeprecatedCallable</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">||</span>
                correspondingPropertySymbol<span class="token operator">?</span><span class="token punctuation">.</span>owner<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">isDeprecatedCallable</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span>
            <span class="token punctuation">)</span> Opcodes<span class="token punctuation">.</span>ACC_DEPRECATED <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">or</span>
            <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isFinal<span class="token punctuation">)</span> Opcodes<span class="token punctuation">.</span>ACC_FINAL <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">or</span>
            <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isStatic<span class="token punctuation">)</span> Opcodes<span class="token punctuation">.</span>ACC_STATIC <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">or</span>
            <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>VOLATILE_ANNOTATION_FQ_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> Opcodes<span class="token punctuation">.</span>ACC_VOLATILE <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">or</span>
            <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>TRANSIENT_ANNOTATION_FQ_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> Opcodes<span class="token punctuation">.</span>ACC_TRANSIENT <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">or</span>
			<span class="token comment">// 如果有\`JvmSynthetic\`注解，返回\`ACC_SYNTHETIC\`标识</span>
            <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>JVM_SYNTHETIC_ANNOTATION_FQ_NAME<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token function">isPrivateCompanionFieldInInterface</span><span class="token punctuation">(</span>languageVersionSettings<span class="token punctuation">)</span>
            <span class="token punctuation">)</span> Opcodes<span class="token punctuation">.</span>ACC_SYNTHETIC <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述源码中 <code>Opcodes</code> 是字节码操作库 <code>ASM</code> 中的类</p><p>猜想 <code>Kotlin</code> 编译器也是使用 <code>ASM</code> 编译生成/修改Class文件</p><p>🆗，知道了 <code>JvmSynthetic</code> 注解的实现原理，是不是可以仿照 <code>JvmSynthetic</code> 给构造方法也添加 <code>ACC_SYNTHETIC</code> 标识呢❓</p><p>首先想到的就是利用 AGP Transform 进行字节码修改</p><h3 id="agp-transform" tabindex="-1"><a class="header-anchor" href="#agp-transform" aria-hidden="true">#</a> AGP Transform</h3><p>AGP Transform 的搭建、使用，网上有很多相关文章，此处不再描述，下图是本仓库的组织架构</p><p><img src="`+k+`" alt="项目架构" loading="lazy"></p><p>这里简单说明下：</p><h4 id="api-xxx" tabindex="-1"><a class="header-anchor" href="#api-xxx" aria-hidden="true">#</a> api-xxx</h4><p>api-xxx模块中只有一个注解类 <code>Hide</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">CLASS</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Hide</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Target</span><span class="token punctuation">(</span>
    AnnotationTarget<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span>
    AnnotationTarget<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">,</span>
    AnnotationTarget<span class="token punctuation">.</span>FUNCTION<span class="token punctuation">,</span>
    AnnotationTarget<span class="token punctuation">.</span>PROPERTY_GETTER<span class="token punctuation">,</span>
    AnnotationTarget<span class="token punctuation">.</span>PROPERTY_SETTER<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token annotation builtin">@Retention</span><span class="token punctuation">(</span>AnnotationRetention<span class="token punctuation">.</span>BINARY<span class="token punctuation">)</span>
<span class="token keyword">annotation</span> <span class="token keyword">class</span> Hide
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="kcp" tabindex="-1"><a class="header-anchor" href="#kcp" aria-hidden="true">#</a> kcp</h4><p>kcp相关，下篇再讲</p><h4 id="lib-xxx" tabindex="-1"><a class="header-anchor" href="#lib-xxx" aria-hidden="true">#</a> lib-xxx</h4><p>lib-xxx模块中包含对注解api-xxx的测试，打包成<code>SDK</code>，供app模块使用</p><h4 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> plugin</h4><p>plugin模块包含AGP Transform</p><h3 id="实现plugin模块" tabindex="-1"><a class="header-anchor" href="#实现plugin模块" aria-hidden="true">#</a> 实现plugin模块</h3><h4 id="创建maskplugin" tabindex="-1"><a class="header-anchor" href="#创建maskplugin" aria-hidden="true">#</a> 创建MaskPlugin</h4><p>创建 <code>MaskPlugin</code> 类，实现 <code>org.gradle.api.Plugin</code> 接口</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token keyword">class</span> <span class="token class-name">MaskPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Plugin</span><span class="token operator">&lt;</span>Project<span class="token operator">&gt;</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span>Project project<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 输出日志，查看Plugin是否生效</span>
        project<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;Welcome to guodongAndroid mask plugin.&quot;</span></span><span class="token punctuation">)</span>

        <span class="token comment">// 目前增加了限制仅能用于\`AndroidLibrary\`</span>
        LibraryExtension extension <span class="token operator">=</span> project<span class="token punctuation">.</span>extensions<span class="token punctuation">.</span><span class="token function">findByType</span><span class="token punctuation">(</span>LibraryExtension<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>extension <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            project<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;Only support [AndroidLibrary].&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>

        extension<span class="token punctuation">.</span><span class="token function">registerTransform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MaskTransform</span><span class="token punctuation">(</span>project<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建masktransform" tabindex="-1"><a class="header-anchor" href="#创建masktransform" aria-hidden="true">#</a> 创建MaskTransform</h4><p>创建 <code>MaskTransform</code>，继承 <code>com.android.build.api.transform.Transform</code> 抽象类，主要实现 <code>transform</code> 方法，以下为核心代码</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token keyword">class</span> <span class="token class-name">MaskTransform</span> <span class="token keyword">extends</span> <span class="token class-name">Transform</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>TransformInvocation transformInvocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransformException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">logE</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">TAG</span></span><span class="token string"> - start&quot;</span></span><span class="token punctuation">)</span>

        TransformOutputProvider outputProvider <span class="token operator">=</span> transformInvocation<span class="token punctuation">.</span>outputProvider
        
        <span class="token comment">// 没有适配增量编译</span>

        <span class="token comment">// 只关心本项目生成的Class文件</span>
        transformInvocation<span class="token punctuation">.</span>inputs<span class="token punctuation">.</span>each <span class="token punctuation">{</span> transformInput <span class="token operator">-&gt;</span>
            transformInput<span class="token punctuation">.</span>directoryInputs<span class="token punctuation">.</span>each <span class="token punctuation">{</span> dirInput <span class="token operator">-&gt;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dirInput<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dirInput<span class="token punctuation">.</span>file<span class="token punctuation">.</span>eachFileRecurse <span class="token punctuation">{</span> file <span class="token operator">-&gt;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;.class&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 使用ASM修改Class文件</span>
                            ClassReader cr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>bytes<span class="token punctuation">)</span>
                            ClassWriter cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span>cr<span class="token punctuation">,</span> ClassWriter<span class="token punctuation">.</span>COMPUTE_MAXS<span class="token punctuation">)</span>
                            ClassVisitor cv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckClassAdapter</span><span class="token punctuation">(</span>cw<span class="token punctuation">)</span>
                            cv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MaskClassNode</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ASM9<span class="token punctuation">,</span> cv<span class="token punctuation">,</span> mProject<span class="token punctuation">)</span>
                            <span class="token keyword">int</span> parsingOptions <span class="token operator">=</span> <span class="token number">0</span>
                            cr<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>cv<span class="token punctuation">,</span> parsingOptions<span class="token punctuation">)</span>
                            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

                            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
                            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
                            fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                File dest <span class="token operator">=</span> outputProvider<span class="token punctuation">.</span><span class="token function">getContentLocation</span><span class="token punctuation">(</span>dirInput<span class="token punctuation">.</span>name<span class="token punctuation">,</span> dirInput<span class="token punctuation">.</span>contentTypes<span class="token punctuation">,</span> dirInput<span class="token punctuation">.</span>scopes<span class="token punctuation">,</span> Format<span class="token punctuation">.</span>DIRECTORY<span class="token punctuation">)</span>
                FileUtils<span class="token punctuation">.</span><span class="token function">copyDirectory</span><span class="token punctuation">(</span>dirInput<span class="token punctuation">.</span>file<span class="token punctuation">,</span> dest<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 不关心第三方Jar中的Class文件</span>
            transformInput<span class="token punctuation">.</span>jarInputs<span class="token punctuation">.</span>each <span class="token punctuation">{</span> jarInput <span class="token operator">-&gt;</span>
                String jarName <span class="token operator">=</span> jarInput<span class="token punctuation">.</span>name
                String md5Name <span class="token operator">=</span> DigestUtils<span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span>jarInput<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>jarName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;.jar&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    jarName <span class="token operator">=</span> jarName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> jarName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                File dest <span class="token operator">=</span> outputProvider<span class="token punctuation">.</span><span class="token function">getContentLocation</span><span class="token punctuation">(</span>jarName <span class="token operator">+</span> md5Name<span class="token punctuation">,</span> jarInput<span class="token punctuation">.</span>contentTypes<span class="token punctuation">,</span> jarInput<span class="token punctuation">.</span>scopes<span class="token punctuation">,</span> Format<span class="token punctuation">.</span>JAR<span class="token punctuation">)</span>
                FileUtils<span class="token punctuation">.</span><span class="token function">copyFile</span><span class="token punctuation">(</span>jarInput<span class="token punctuation">.</span>file<span class="token punctuation">,</span> dest<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> cost <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start
        <span class="token function">logE</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">TAG</span></span><span class="token string"> - end, cost: %dms&quot;</span></span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">logE</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mProject<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建maskclassnode" tabindex="-1"><a class="header-anchor" href="#创建maskclassnode" aria-hidden="true">#</a> 创建MaskClassNode</h4><p>创建 <code>MaskClassNode</code>，继承 <code>org.objectweb.asm.tree.ClassNode</code>，主要实现 <code>visitEnd</code> 方法</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token keyword">class</span> <span class="token class-name">MaskClassNode</span> <span class="token keyword">extends</span> <span class="token class-name">ClassNode</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> MaskClassNode<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>simpleName

    <span class="token comment">// api-java中\`Hide\`注解的描述符</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HIDE_JAVA_DESCRIPTOR <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;Lcom/guodong/android/mask/api/Hide;&quot;</span></span>
    
    <span class="token comment">// api-kt中\`Hide\`注解的描述符</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HIDE_KOTLIN_DESCRIPTOR <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;Lcom/guodong/android/mask/api/kt/Hide;&quot;</span></span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> HIDE_DESCRIPTOR_SET <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        HIDE_DESCRIPTOR_SET<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>HIDE_JAVA_DESCRIPTOR<span class="token punctuation">)</span>
        HIDE_DESCRIPTOR_SET<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>HIDE_KOTLIN_DESCRIPTOR<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> Project project

    <span class="token function">MaskClassNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">,</span> ClassVisitor cv<span class="token punctuation">,</span> Project project<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>project <span class="token operator">=</span> project
        <span class="token keyword">this</span><span class="token punctuation">.</span>cv <span class="token operator">=</span> cv
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 处理Field</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>fn <span class="token keyword">in</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> has <span class="token operator">=</span> <span class="token function">hasHideAnnotation</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>invisibleAnnotations<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>has<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                project<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">TAG</span></span><span class="token string">, before --&gt; typeName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, fieldName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">fn<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, access = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">fn<span class="token punctuation">.</span>access</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                <span class="token comment">// 修改字段的访问标识</span>
                fn<span class="token punctuation">.</span>access <span class="token operator">+=</span> Opcodes<span class="token punctuation">.</span>ACC_SYNTHETIC
                project<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">TAG</span></span><span class="token string">, after --&gt; typeName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, fieldName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">fn<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, access = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">fn<span class="token punctuation">.</span>access</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 处理Method</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>mn <span class="token keyword">in</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> has <span class="token operator">=</span> <span class="token function">hasHideAnnotation</span><span class="token punctuation">(</span>mn<span class="token punctuation">.</span>invisibleAnnotations<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>has<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                project<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">TAG</span></span><span class="token string">, before --&gt; typeName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, methodName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">mn<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, access = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">mn<span class="token punctuation">.</span>access</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                <span class="token comment">// 修改方法的访问标识</span>
                mn<span class="token punctuation">.</span>access <span class="token operator">+=</span> Opcodes<span class="token punctuation">.</span>ACC_SYNTHETIC
                project<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">TAG</span></span><span class="token string">, after --&gt; typeName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">, methodName = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">mn<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, access = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">mn<span class="token punctuation">.</span>access</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>cv <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">accept</span><span class="token punctuation">(</span>cv<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 是否有\`Hide\`注解
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">hasHideAnnotation</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>AnnotationNode<span class="token operator">&gt;</span> annotationNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotationNodes <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>node <span class="token keyword">in</span> annotationNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>HIDE_DESCRIPTOR_SET<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用transform" tabindex="-1"><a class="header-anchor" href="#使用transform" aria-hidden="true">#</a> 使用Transform</h3><h4 id="build-gradle-project-level" tabindex="-1"><a class="header-anchor" href="#build-gradle-project-level" aria-hidden="true">#</a> build.gradle - project level</h4><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>buildscript <span class="token punctuation">{</span>
    ext<span class="token punctuation">.</span>plugin_version <span class="token operator">=</span> <span class="token string">&#39;x.x.x&#39;</span>
    dependencies <span class="token punctuation">{</span>
        classpath <span class="token interpolation-string"><span class="token string">&quot;com.guodong.android:mask-gradle-plugin:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">plugin_version</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="build-gradle-module-level" tabindex="-1"><a class="header-anchor" href="#build-gradle-module-level" aria-hidden="true">#</a> build.gradle - module level</h4><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code># lib<span class="token operator">-</span>kotlin
plugins <span class="token punctuation">{</span>
    id <span class="token string">&#39;com.android.library&#39;</span>
    id <span class="token string">&#39;kotlin-android&#39;</span>
    id <span class="token string">&#39;kotlin-kapt&#39;</span>
    id <span class="token string">&#39;maven-publish&#39;</span>
    id <span class="token string">&#39;com.guodong.android.mask&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lib-kotlin" tabindex="-1"><a class="header-anchor" href="#lib-kotlin" aria-hidden="true">#</a> lib-kotlin</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> InterfaceTest <span class="token punctuation">{</span>

    <span class="token comment">// 使用api-kt中的注解</span>
    <span class="token annotation builtin">@Hide</span>
    <span class="token keyword">fun</span> <span class="token function">testInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">KotlinTest</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> InterfaceTest <span class="token punctuation">{</span>

    <span class="token comment">// 使用api-kt中的注解</span>
    <span class="token annotation builtin">@Hide</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>

        <span class="token annotation builtin">@JvmStatic</span>
        <span class="token keyword">fun</span> <span class="token function">newKotlinTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">KotlinTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">val</span> binding<span class="token operator">:</span> LayoutKotlinTestBinding<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token comment">// 使用api-kt中的注解</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> a
        <span class="token annotation builtin">@Hide</span> <span class="token keyword">get</span>
        <span class="token annotation builtin">@Hide</span> <span class="token keyword">set</span>

    <span class="token keyword">fun</span> <span class="token function">getA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">1000</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">testInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Interface function test&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="app" tabindex="-1"><a class="header-anchor" href="#app" aria-hidden="true">#</a> app</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># <span class="token class-name">MainActivity</span><span class="token punctuation">.</span>java

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testKotlinLib</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建对象时不能访问无参构造方法，可以访问有参构造方法或访问静态工厂方法</span>
    <span class="token class-name">KotlinTest</span> test <span class="token operator">=</span> <span class="token class-name">KotlinTest</span><span class="token punctuation">.</span><span class="token function">newKotlinTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用时不能访问\`test.getA()\`方法，仅能访问\`getA1()方法</span>
    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;testKotlinLib: before --&gt; &quot;</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">getA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;testKotlinLib: after --&gt; &quot;</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">getA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    test<span class="token punctuation">.</span><span class="token function">testInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">InterfaceTest</span> interfaceTest <span class="token operator">=</span> test<span class="token punctuation">;</span>
    <span class="token comment">// Error - cannot resolve method &#39;testInterface&#39; in &#39;InterfaceTest&#39;</span>
    interfaceTest<span class="token punctuation">.</span><span class="token function">testInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>happy:happy:</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2><hr class="footnotes-sep">`,42),j={class:"footnotes"},P={class:"footnotes-list"},H={id:"footnote1",class:"footnote-item"},J={href:"https://blog.csdn.net/qq_23626713/article/details/90698534",target:"_blank",rel:"noopener noreferrer"},K=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),M=n("a",{href:"#footnote-ref1:1",class:"footnote-backref"},"↩︎",-1),R={id:"footnote2",class:"footnote-item"},q={href:"https://youtrack.jetbrains.com/issue/KT-24981/Support-more-targets-for-JvmSynthetic",target:"_blank",rel:"noopener noreferrer"},F=n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),D={id:"footnote3",class:"footnote-item"},L={href:"https://youtrack.jetbrains.com/issue/KT-50609/Support-constructor-target-for-JvmSynthetic-annotation",target:"_blank",rel:"noopener noreferrer"},Y=n("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1),V={id:"footnote4",class:"footnote-item"},$={href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html",target:"_blank",rel:"noopener noreferrer"},G=n("a",{href:"#footnote-ref4",class:"footnote-backref"},"↩︎",-1);function B(Q,U){const a=i("ExternalLinkIcon");return p(),c("div",null,[m,n("p",null,[s("得看看 "),b,s(" 是如何设置 "),f,s(" 标识的，打开 "),n("a",g,[h,s(" 仓库"),t(a)]),s("，在仓库内搜索 "),y,s(" 关键字 "),n("a",_,[s("Search · JvmSynthetic (github.com)"),t(a)])]),w,n("p",null,[s("在搜索结果中分析发现 "),T,s(" 关联性较大，继续在仓库内搜索 "),I,s(" 关键字 "),n("a",A,[s("Search · JVM_SYNTHETIC_ANNOTATION_FQ_NAME (github.com)"),t(a)])]),C,x,N,n("p",null,[s("在搜索结果中发现几个类名与代码生成相关，这里以 "),n("a",S,[E,t(a)]),s(" 为例，附上相关代码")]),O,n("section",j,[n("ol",P,[n("li",H,[n("p",null,[n("a",J,[s("正确地使用 Kotlin 的 internal"),t(a)]),s(),K,s(),M])]),n("li",R,[n("p",null,[n("a",q,[s("Support more targets for @JvmSynthetic : KT-24981 (jetbrains.com)"),t(a)]),s(),F])]),n("li",D,[n("p",null,[n("a",L,[s("Support 'constructor' target for JvmSynthetic annotation : KT-50609 (jetbrains.com)"),t(a)]),s(),Y])]),n("li",V,[n("p",null,[n("a",$,[s("Chapter 4. The class File Format (oracle.com)"),t(a)]),s(),G])])])])])}const z=o(v,[["render",B],["__file","Kotlin-KCP的应用-第一篇.html.vue"]]);export{z as default};
